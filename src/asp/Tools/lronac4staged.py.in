#!/usr/bin/env python
# __BEGIN_LICENSE__
#  Copyright (c) 2009-2012, United States Government as represented by the
#  Administrator of the National Aeronautics and Space Administration. All
#  rights reserved.
#
#  The NGT platform is licensed under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance with the
#  License. You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# __END_LICENSE__


import os, glob, optparse, re, shutil, subprocess, sys, string

job_pool = [];

def man(option, opt, value, parser):
    print >>sys.stderr, parser.usage
    print >>sys.stderr, '''\
This program creates directories and runs cam2map for the 4 stereo
combinations needed to create an entire LRO-NAC frame.

It can also run the following steps:
* Stereo for each session
* Point2dem for each session
'''
    sys.exit()

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def add_job( cmd, num_working_threads=4, cwd=None ):
    if ( len(job_pool) >= num_working_threads):
        job_pool[0].wait();
        job_pool.pop(0);
    print cmd;
    job_pool.append( subprocess.Popen(cmd, shell=True, cwd=cwd) );

def wait_on_all_jobs():
    print "Waiting for jobs to finish";
    while len(job_pool) > 0:
        job_pool[0].wait();
        job_pool.pop(0);

class JobDescription:
    def __init__(self, name, left, right):
        self.name = name
        self.left = left
        self.right = right
        self.left_prefix = prefix(left)
        self.right_prefix = prefix(right)

def prefix( filename ):
    return filename[:filename.find('.')]

def build_session_directory(job_desc, options):
    # Create Directory
    if os.path.isdir(job_desc.name) and options.force:
        os.system("rm -rf %s" % job_desc.name)
    if not os.path.isdir(job_desc.name):
        os.system("mkdir %s" % job_desc.name)

    # Create Symlinks
    symlinks = [job_desc.left, job_desc.right, "stereo.default"]
    for target in symlinks:
        if os.path.exists(os.path.join(job_desc.name,target)) and options.force:
            subprocess.Popen("rm %s" % target, shell=True, cwd=job_desc.name)
        if not os.path.exists(os.path.join(job_desc.name,target)):
            subprocess.Popen("ln -s ../%s" % target, shell=True, cwd=job_desc.name)

    # Run cam2map
    if os.path.exists(os.path.join(job_desc.name,job_desc.left_prefix+".map.cub")) and options.force:
        subprocess.Popen("rm %s" % (job_desc.left_prefix+".map.cub"),shell=True, cwd=job_desc.name)
    if os.path.exists(os.path.join(job_desc.name,job_desc.right_prefix+".map.cub")) and options.force:
        subprocess.Popen("rm %s" % (job_desc.right_prefix+".map.cub"),shell=True, cwd=job_desc.name)
    if not os.path.exists(os.path.join(job_desc.name, job_desc.left_prefix+".map.cub")) or not os.path.exists(os.path.join(job_desc.name, job_desc.right_prefix+".map.cub")):
        cmd = "cam2map4stereo.py %s %s" % (job_desc.left,job_desc.right)
        add_job(cmd, options.threads, job_desc.name)

def stereo( job_desc, threads, additional ):
    cmd = "stereo %s.map.cub %s.map.cub stereo/%s %s" % (job_desc.left_prefix,job_desc.right_prefix,job_desc.name,additional)
    add_job(cmd, threads, job_desc.name)
    pass

def point2dem( job_desc, threads, additional ):
    cmd = "point2dem -r moon %s/stereo/%s-PC.tif %s" % (job_desc.name,job_desc.name,additional)
    add_job(cmd, threads)
    pass

#---------------------------

def main():
    try:
        try:
            usage = "usage: lronac4staged.py [--help][--manual][--threads N] LRONAC_CAL.CUB-files\n  [ASP [@]ASP_VERSION[@]]"
            parser = optparse.OptionParser(usage=usage)
            parser.set_defaults(delete=True)
            parser.set_defaults(threads=4)
            parser.add_option("--manual", action="callback", callback=man,
                              help="Read the manual.")
            parser.add_option("-t", "--threads", dest="threads",
                              help="Number of threads to use.",type="int")
            parser.add_option("--force", dest="force", action="store_true",
                              help="Force overwriting of previous process's directories.")
            parser.add_option("--stereo", dest="stereo", action="store_true",
                              help="Perform stereo on each session.")
            parser.add_option("--point2dem", dest="point2dem", action="store_true",
                              help="Perform point2dem on each session.")
            parser.add_option("--args", dest="args",
                              help="Additional arguments to apply to your command", type="string")


            (options, args) = parser.parse_args()

            if not len(args) == 4: parser.error("need 4 *.CUB files")

        except optparse.OptionError, msg:
            raise Usage(msg)

        args.sort()

        jobs = []
        jobs.append( JobDescription("LELE", args[0], args[2]) )
        jobs.append( JobDescription("RERE", args[1], args[3]) )
        jobs.append( JobDescription("LERE", args[0], args[3]) )
        jobs.append( JobDescription("RELE", args[1], args[2]) )

        for job in jobs:
            build_session_directory( job, options )
        wait_on_all_jobs()

        if options.stereo:
            for job in jobs:
                stereo( job, options.threads, options.args )
            wait_on_all_jobs()

        if options.point2dem:
            for job in jobs:
                point2dem( job, options.threads, options.args )
            wait_on_all_jobs()

        print "Finished"
        return 0

    except Usage, err:
        print >>sys.stderr, err.msg
        # print >>sys.stderr, "for help use --help"
        return 2

	# To more easily debug this program, comment out this catch block.
    # except Exception, err:
    #     sys.stderr.write( str(err) + '\n' )
    #     return 1


if __name__ == "__main__":
    sys.exit(main())

