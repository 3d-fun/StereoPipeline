#!/usr/bin/env python
# -*- coding: utf-8 -*-
# __BEGIN_LICENSE__
#  Copyright (c) 2009-2013, United States Government as represented by the
#  Administrator of the National Aeronautics and Space Administration. All
#  rights reserved.
#
#  The NGT platform is licensed under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance with the
#  License. You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# __END_LICENSE__

'''
A helper tool to streamline the process of solving for 
pinhole camera models using Theia and ASP.
'''

import sys
import os, glob, re, shutil, subprocess, string, time, errno, optparse, math

if sys.version_info < (2, 6, 0):
    print('\nERROR: Must use Python 2.6 or greater.')
    sys.exit(1)

# The path to the ASP python files
basepath    = os.path.abspath(sys.path[0])
pythonpath  = os.path.abspath(basepath + '/../Python')  # for dev ASP
libexecpath = os.path.abspath(basepath + '/../libexec') # for packaged ASP
sys.path.insert(0, basepath) # prepend to Python path
sys.path.insert(0, pythonpath)
sys.path.insert(0, libexecpath)

import asp_file_utils, asp_system_utils, asp_cmd_utils, asp_image_utils

# Prepend to system PATH
os.environ["PATH"] = libexecpath + os.pathsep + os.environ["PATH"]



def get_paths_with_extension(input_list, output_folder, new_extension, prefix=""):
    '''Given a list of input files, generates a list of output paths with an extension appended'''

    output_paths = []
    for path in input_list:
        filename    = os.path.basename(path)
        output_path = os.path.join(output_folder, prefix + filename + new_extension)
        output_paths.append(output_path)
        
    return output_paths

def prep_input_images(options):
    '''Make sure all the input images can be loaded by Theia.
       This is done by making symlinks or conversions of all input
       images in the output directory.'''

    # List of image types that Theia cannot read and must be translated
    convert_ext_list = ['.cub']

    # Set up the image wildcard string required by Theia.
    common_ext = os.path.splitext(options.input_images[0])[1]
    options.image_wildcard = os.path.join(os.path.abspath(options.output_folder), '*' + common_ext)
    
    for input_path in options.input_images:
        ext = os.path.splitext(input_path)[1]
        if not (ext == common_ext):
            raise Exception('All input images must have the same extension!')

        # TODO: Use gdal_translate to convert the file type.
        if ext in convert_ext_list:
            raise Exception('This image type is not yet supported!')
            
        # Make a symlink to this file in the output folder
        filename     = os.path.basename(input_path)
        symlink_path = os.path.join(options.output_folder, filename)
        #print 'sym '
        #print filename
        #print symlink_path
        try:    os.remove(symlink_path) # Redo the symlink each time
        except: pass
        os.symlink(os.path.abspath(input_path), symlink_path)
        
    return

def generate_flagfile(options):
    '''Generate a Theia config file based on user options'''

    match_path       = os.path.join(options.output_folder, 'theia_matches.dat')
    output_path      = os.path.join(options.output_folder, 'theia_reconstruction.dat')
    flagfile_path    = os.path.join(options.output_folder, 'theia_flagfile.txt')
    options.theia_output_path = output_path
    options.flagfile_path     = flagfile_path
    
    # Make sure the output file has the latest options
    if os.path.exists(options.flagfile_path):
        os.remove(options.flagfile_path)
   
    # TODO: Make use of options.custom_theia_flagfile
   
    output_string =  '''
############### Input/Output ###############
# Input/output files.
# Set these if a matches file is not present. Images should be a filepath with a
# wildcard e.g., /home/my_username/my_images/*.jpg
--images='''+options.image_wildcard+'''
--output_matches_file='''+os.path.abspath(match_path)+'''

# If a matches file has already been created, set the filepath here. This avoids
# having to recompute all features and matches.
#--matches_file=/home/smcmich1/data/theia_test/apollo_15_nadir/sub/sfm_run/theia_matches.dat

# The calibration file indicates possibly known calibration e.g, from EXIF or
# explicit calibration. Theia attempts to extract EXIF focal lengths if calibration
# is not supplied for a given image.
--calibration_file='''+os.path.abspath(options.camera_param_path)+'''
--output_reconstruction='''+os.path.abspath(output_path)+'''

############### Multithreading ###############
# Set to the number of threads you want to use.
--num_threads=16

############### Feature Extraction ###############
--descriptor=SIFT
# Sift blob detector parameters.
--sift_num_octaves=-1
--sift_num_levels=3
--sift_first_octave=-1
--sift_edge_threshold=10.0
--sift_peak_threshold=1.7
# Disable if regular sift descriptor is desired.
--root_sift=true

############### Matching Options ###############
# Perform matching out-of-core. If set to true, the matching_working_directory
# must be set to a valid, writable directory (the directory will be created if
# it does not exits) Set to false to perform all-in-memory matching.
--match_out_of_core=false

# During feature matching, features are saved to disk so that out-of-core
# matching may be performed. This directory specifies which directory those
# features should be saved to.
--matching_working_directory=

# During feature matching we utilize an LRU cache for out-of-core matching. The size
# of that cache (in terms of number of images) is controlled by this parameter. The
# higher this number the more memory is required.
--matching_max_num_images_in_cache=128

--matching_strategy=CASCADE_HASHING
--lowes_ratio=0.75
--min_num_inliers_for_valid_match=30
--max_sampson_error_for_verified_match=4.0
--bundle_adjust_two_view_geometry=true
--keep_only_symmetric_matches=true

############### General SfM Options ###############
--reconstruction_estimator=GLOBAL
--max_track_length=50
--reconstruct_largest_connected_component=false
# If set to true, only views with known calibration are reconstructed.
--only_calibrated_views=false

############### Global SfM Options ###############
--global_position_estimator=NONLINEAR
--global_rotation_estimator=ROBUST_L1L2
--post_rotation_filtering_degrees=15.0

# This refinement is very unstable for rotation-only motions so
# it is advised that this is set to false for these motions.
--refine_relative_translations_after_rotation_estimation=true

# If true, only cameras that are well-conditioned for position estimation will
# be used for global position estimation
--extract_maximal_rigid_subgraph=false

# Filter the relative translations with the 1DSfM filter to remove potential
# outliers in the relative pose measurements.
--filter_relative_translations_with_1dsfm=true

# Nonlinear position estimation options
--position_estimation_min_num_tracks_per_view=0
--position_estimation_robust_loss_width=0.1

# After estimating camera poses, we perform trianguation, then BA,
# then filter out bad points. This controls how many times we repeat
# this process.
--num_retriangulation_iterations=1

############### Incremental SfM Options ###############
--absolute_pose_reprojection_error_threshold=8
--partial_bundle_adjustment_num_views=20
--full_bundle_adjustment_growth_percent=5
--min_num_absolute_pose_inliers=30

############### Bundle Adjustment Options ###############
# Set to true to hold camera intrinsics constant during BA.
--constant_camera_intrinsics=true
# After BA, remove any points that have a reprojection error greater
# than this.
--max_reprojection_error_pixels=4.0

############### Triangulation Options ###############
--min_triangulation_angle_degrees=4.0
--triangulation_reprojection_error_pixels=15.0
--bundle_adjust_tracks=true

############### Logging Options ###############
# Logging verbosity.
--logtostderr
# Increase this number to get more verbose logging.
--v=3
'''
    handle = open(flagfile_path, 'w')
    handle.write(output_string)
    handle.close()
    return flagfile_path

def build_reconstruction(options):
    '''Call Theia to generate a 3D camera reconstruction'''

    # Make sure the input images are set up
    prep_input_images(options)

    # Create the Theia config file!
    flagfile_path = generate_flagfile(options)

    # TODO: Make sure this tool is exported by BB!

    if (not os.path.exists(options.theia_output_path)) or options.overwrite:
        cmd = ['/home/smcmich1/repo/BinaryBuilder/build_root_gcc52/build/theia/TheiaSfM-0.5/build/bin/build_reconstruction', '--flagfile', flagfile_path]
        asp_cmd_utils.executeCommand(cmd, suppressOutput=options.suppressOutput)

        # Theia appends a tag to the requested output file, just rename the file.
        theia_temp_output_path = options.theia_output_path + '-0'
        if not os.path.exists(theia_temp_output_path):
            raise Exception('Theia failed to generate a camera reconstruction')
        shutil.move(theia_temp_output_path, options.theia_output_path)

    # TODO: Any other output verification needed?
    return options.theia_output_path

def export_cameras_to_vw(options):
    '''Convert from Theia's camera format to VW's pinhole format'''

    # TODO: Make sure this tool is exported by BB!
    # Need to wrap the image wildcard in quotes so it does not get expanded too early!
    cmd = ['/home/smcmich1/repo/BinaryBuilder/build_root_gcc52/build/theia/TheiaSfM-0.5/build/bin/export_reconstruction_to_vw',  '--reconstruction', options.theia_output_path, 
           '--output_directory', options.output_folder, '--images', options.image_wildcard]
    asp_cmd_utils.executeCommand(cmd, suppressOutput=options.suppressOutput)

    # Running the tool should generate a .tsai file for each input image
    options.theia_camera_models = get_paths_with_extension(options.input_images, 
                                                         options.output_folder, '.tsai')
    
    all_found = True
    for model_path in options.theia_camera_models:
        if not os.path.exists(model_path):
            all_found = False
            print 'Failed to generate model file: ' + model_path
    if not all_found:
        raise Exception('Failed to extract camera models for all input image files.')


def run_bundle_adjust(options):
    '''Run the ASP bundle adjust program to move the camera models into global coordinates'''

    output_prefix = os.path.join(options.output_folder, 'asp_ba_out')

    # Some extra bundle adjust params
    # - TODO: Figure out the datum automatically
    ba_params = ['--max-iterations', '1000', '--threads', '1', 
                 '-t', 'pinhole', '--datum', 'wgs84']

    # Always run this step as otherwise there was no point to calling the tool

    # Run ASP's bundle_adjust tool    
    cmd = ['bundle_adjust'] + options.input_images + options.theia_camera_models
    cmd += [options.gcp_path, '-o', output_prefix]
    cmd += ba_params
    asp_cmd_utils.executeCommand(cmd, suppressOutput=options.suppressOutput)

    # The previous call should create a .pinhole file for every input image in the output folder
    options.asp_camera_models = get_paths_with_extension(options.input_images, 
                                                         options.output_folder, 
                                                         '.pinhole', 'asp_ba_out-')

    all_found = True
    for model_path in options.asp_camera_models:       
        if not os.path.exists(model_path):
            all_found = False
            print 'Failed to generate model file: ' + model_path
    if not all_found:
        raise Exception('Bundle adjustment failed to generate all camera models.')


    # TODO: Where should the final files be located??


#------------------------------------------------------------------------------

def main(argsIn):

    try:

        # Use parser that ignores unknown options
        usage  = "usage: pinhole_solver [options] <camera param file> <GCP file> <output folder> <Input Image 1> <Input Image 2> ..."
        parser = optparse.OptionParser(usage=usage)

        parser.add_option("--suppress-output", action="store_true", default=False,
                                               dest="suppressOutput",  help="Suppress output of sub-calls.")
        parser.add_option("--overwrite",       action="store_true", default=False,
                                               dest="overwrite",  
                                               help="Overwrite any partial computation results on disk.")


        # TODO: Hook up functionality behind these features:
        parser.add_option('--theia-flagfile',  dest='existing_theia_flagfile', default=None,
                                         help='Path to a custom THEIA flag file to fine-tune its operation')
        parser.add_option('--work-dir',  dest='workDir', default=None,
                                         help='Working directory to assemble the tiles in')
        parser.add_option("--solve-intrinsic-params", action="store_true", default=False,
                                               dest="solveIntrinsic",  help="Use the optimizer to improve the intrinsic camera parameter estimates.")

        # This call handles all the parallel_mapproject specific options.
        (options, args) = parser.parse_args(argsIn)

        # Check the required positional arguments.
        if len(args) < 1:
            parser.print_help()
            parser.error("Missing input camera parameter file.\n" );
        if len(args) < 2:
            parser.print_help()
            parser.error("Missing ground control point file.\n" );
        if len(args) < 3:
            parser.print_help()
            parser.error("Missing output folder.\n" );
        if len(args) < 5:
            parser.print_help()
            parser.error("At least two input images are required.\n" );
            
        # Store the positional input parameters
        options.camera_param_path = args[0]
        options.gcp_path          = args[1]
        options.output_folder     = args[2]
        options.input_images      = args[3:]
        
        
    except optparse.OptionError, msg:
        raise Usage(msg)

    startTime = time.time()

    if not (os.path.exists(options.output_folder)):
        os.mkdir(options.output_folder)

    # Step 1 - Call Theia's build_reconstruction tool.
    build_reconstruction(options)

    print 'Finished generating reconstruction using Theia'

    # Step 2 - Call an extra tool to export Theia's camera output.
    export_cameras_to_vw(options)
    
    print 'Finished extracting camera models'
    
    # Step 3 - Call ASP's bundle_adjust to move the cameras into global coordinates
    run_bundle_adjust(options)

    endTime = time.time()
    print "Finished in " + str(endTime - startTime) + " seconds."

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
