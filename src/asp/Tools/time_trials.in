#!/usr/bin/env python
# __BEGIN_LICENSE__
#  Copyright (c) 2009-2012, United States Government as represented by the
#  Administrator of the National Aeronautics and Space Administration. All
#  rights reserved.
#
#  The NGT platform is licensed under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance with the
#  License. You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# __END_LICENSE__


import os, sys, optparse, string, subprocess, math

def main():
    try:
        usage = "usage: time_trials [options] command\n  [ASP [@]ASP_VERSION[@]]"
        parser = optparse.OptionParser(usage=usage)
        parser.set_defaults(trials=5)
        parser.add_option("--trials", dest="trials",
                          help="Number of trials to run.", type="int")

        (options, args) = parser.parse_args()

        if not args: raise Exception('No input command')

    except optparse.OptionError, msg:
        print >>sys.stderr, msg
        return 2

    print "Running command: [%s]" % args[0]

    mean = 0.0
    stddev = 0.0

    for i in range(0,options.trials):
        print " -> trial %i / %i " % (i+1,options.trials),
        p = subprocess.Popen("( time %s ) 2>&1 | tail -n2 | head -n1"%args[0] , shell=True, stdout=subprocess.PIPE)
        output = p.stdout.read().strip().split()[1]
        minutes = float(output[:output.find("m")])
        seconds = float(output[output.find("m")+1:-1])
        time = minutes*60+seconds
        print time

        # Accumulate values
        mean += time / float(options.trials)
        stddev += time * time  / float(options.trials)

    stddev = stddev - mean*mean
    stddev = math.sqrt(stddev)

    print
    print "Mean:   %.3f" % mean
    print "StdDev: %.3f" % stddev

if __name__ == "__main__":
    sys.exit(main())
