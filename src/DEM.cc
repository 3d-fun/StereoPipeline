#include "DEM.h"

#include <stdlib.h>

void write_GMT_script(std::string const prefix,
                      int width, int height, double min_value, double max_value,
                      vw::cartography::GeoReference const& georef) {
  std::string filename = prefix + "-gmt.sh";
  std::string dem_filename = prefix + "-DEM.dem";
  std::string drg_filename = prefix + "-DRG.dem";

  double left = georef.transform()(0,2);
  double top = georef.transform()(1,2);
  double right = georef.transform()(0,2) + (width-1) * georef.transform()(0,0);
  double bottom = georef.transform()(1,2) + (height-1) * georef.transform()(1,1);

  FILE *f = fopen(filename.c_str(), "w");

  fprintf(f, "# Generic Mapping Tools Contour Mapping Script\n");
  fprintf(f, "# \n");
  fprintf(f, "# Automatically generated by the Ames Stereo Pipeline\n");
  fprintf(f, "# You must have the GMT packages installed and in your search path.\n");
  fprintf(f, "# \n");
  fprintf(f, "xyz2grd %s -Gtemporary-dem.grd -Dlat/lon/alt/=/=/=/= -R%f/%f/%f/%f -I%e/%e -V -Zf \n", 
          dem_filename.c_str(),
          left, right, bottom, top,
          georef.transform()(0,0),
          -georef.transform()(1,1));
  fprintf(f, "xyz2grd %s -Gtemporary-drg.grd -Dlat/lon/alt/=/=/=/= -R%f/%f/%f/%f -I%e/%e -V -Zf \n", 
          drg_filename.c_str(),
          left, right, bottom, top,
          georef.transform()(0,0),
          -georef.transform()(1,1));
  fprintf(f, "grdinfo temporary-dem.grd \n");
  fprintf(f, "grdinfo temporary-drg.grd \n\n");


  std::string colorized_contour_name = prefix + "-DEM-colorized.ps";
  std::string texture_contour_name = prefix + "-DEM-contour.ps";
  fprintf(f, "export DEM_FILENAME=%s\n", colorized_contour_name.c_str());
  fprintf(f, "export DRG_FILENAME=%s\n", texture_contour_name.c_str());
  fprintf(f, "rm -f $DEM_FILENAME\n");
  fprintf(f, "rm -f $DRG_FILENAME\n");
  fprintf(f, "gmtset GRID_CROSS_SIZE 0 ANNOT_FONT_SIZE_PRIMARY 10\n\n");

  // DEM
  fprintf(f, "psbasemap -R%f/%f/%f/%f -Jx30i -X1.5i -Y1.5i -B0 -P -K > $DEM_FILENAME\n",left, right, bottom, top);
  double color_scale = (max_value - min_value)/255.0;
  fprintf(f, "makecpt -Chaxby -T%f/%f/%f > g.cpt \n", min_value, max_value, color_scale);
  fprintf(f, "grdimage temporary-dem.grd -R%f/%f/%f/%f -Jx30i -P -U/-0i/-0.25i/\"NASA Ames / MSSS\" -B10 -Cg.cpt -K > $DEM_FILENAME\n",left,right,bottom,top);
  int contour_interval = int(round((max_value - min_value) / 100))*10;
  if (contour_interval < 10) { contour_interval = 10; }
  fprintf(f, "grdcontour -R%f/%f/%f/%f temporary-dem.grd -Jx30i -C%d -A50+s7 -Gd4i -Wc0.25p,- -Wa0.25p -O -K -T0.1i/0.02i >> $DEM_FILENAME\n\n", left,right,bottom,top,contour_interval);

  // DRG
  fprintf(f, "psbasemap -R%f/%f/%f/%f -Jx30i -X1.5i -Y1.5i -B0 -P -K > $DRG_FILENAME\n",left, right, bottom, top);
  fprintf(f, "makecpt -Cgray -T0.0/1.0/%f > g.cpt\n", 1.0/255.0);
  fprintf(f, "grdimage temporary-drg.grd -R%f/%f/%f/%f -Jx30i -P -U/-0i/-0.25i/\"NASA Ames / MSSS\" -B10 -Cg.cpt -K > $DRG_FILENAME\n",left,right,bottom,top);
  fprintf(f, "grdcontour -R%f/%f/%f/%f temporary-dem.grd -Jx30i -C%d -A50+s7 -Gd4i -Wc0.25p,- -Wa0.25p -O -K -T0.1i/0.02i >> $DRG_FILENAME\n", left,right,bottom,top,contour_interval);

  fprintf(f, "rm -f .gmtcommands4 .gmtdefaults4 g.cpt\n");

  fclose(f);

}

// Write an ENVI compatible DEM header
void write_ENVI_header(std::string header_name, 
                       int width, int height, 
                       double pixelScaling, vw::BBox3 bBox) {
  FILE *headerFile = fopen(header_name.c_str(), "w");

//   fprintf(headerFile, "ENVI\n");
//   fprintf(headerFile, "description = { \n");
//   fprintf(headerFile, "   -- Digital Elevation Map generated by the NASA Ames Stereo Pipeline --\n");
//   fprintf(headerFile, "   \n");
//   fprintf(headerFile, "   The Ames Stereo Pipeline generates 3D coordinates in a planetocentric, \n");
//   fprintf(headerFile, "   coordinate system as defined by the International Astronomical Union (IAU).  \n");
//   fprintf(headerFile, "   The origin of this coordinate system is the planetary center of mass, and \n");
//   fprintf(headerFile, "   coordinate system is right handed.\n");
//   fprintf(headerFile, "   \n");
//   fprintf(headerFile, "   The output of the stereo reconstruction process is are points in a cartesian \n");
//   fprintf(headerFile, "   coordinate frame.  ");
//   fprintf(headerFile, "   \n");
//   fprintf(headerFile, "    This DEM was generated by converting the cartesion coordinates to spherical \n");
//   fprintf(headerFile, "   (polar) coordinates.   Next, the radius of an areoid that defines Mars \"sea level\"\n");
//   fprintf(headerFile, "   is subtracted from the radial value of each data point.  This yields a value for\n");
//   fprintf(headerFile, "   elevation relative to this areoid.  The sea-level reference is given by the IAU200 Mars\n");
//   fprintf(headerFile, "   areoid: a bi-axial ellipsoid with an equatorial radius of 3396 kilometers and a\n");
//   fprintf(headerFile, "   polar radius of 3376.2 kilometers.\n");
//   fprintf(headerFile, "   \n");
//   fprintf(headerFile, "   Finally, the latitude/longitude values have been remapped using a sinusoidal (equal area)\n");
//   fprintf(headerFile, "   projection.\n");
//   fprintf(headerFile, "   \n");
//   fprintf(headerFile, "   Bounding box:\n");
//   fprintf(headerFile, "     Minimum X (left)    = %f\n", bBox.xMin);
//   fprintf(headerFile, "     Minimum Y (top)     = %f\n", bBox.yMax);
//   fprintf(headerFile, "     Maximum X (right)   = %f\n", bBox.xMax);
//   fprintf(headerFile, "     Maximum Y (bottom)  = %f\n", bBox.yMin);
//   fprintf(headerFile, "     Minimum Z           = %f\n", bBox.zMin);
//   fprintf(headerFile, "     Maximum Z           = %f\n", bBox.zMax);
//   fprintf(headerFile, "     Default Z           = %f\n", bBox.zMin);
//   fprintf(headerFile, "}\n");
//   fprintf(headerFile, "samples = %d\n", width);
//   fprintf(headerFile, "lines   = %d\n", height);
//   fprintf(headerFile, "bands   = 1\n");
//   fprintf(headerFile, "header offset = 0\n");
//   fprintf(headerFile, "map info = { Geographic Lat/Lon, 1.5, 1.5, %f, %f, %f, %f, Mars IAU 2000 Areoid, units=Degrees}\n",
// 	               bBox.xMin, bBox.yMax, pixelScaling, pixelScaling);
//   fprintf(headerFile, "file type = ENVI Standard\n");
//   fprintf(headerFile, "data type = 4\n");	   // Floating point id
//   fprintf(headerFile, "interleave = bsq\n");
//   fprintf(headerFile, "byte order = 0\n");	   // IEEE/Unix byte-order
//   fprintf(headerFile, "\n");
   fclose(headerFile);
}

