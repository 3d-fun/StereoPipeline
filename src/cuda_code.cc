# 1 "/tmp/tmpxft_00009006_00000000-1_cuda_code.cudafe1.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/tmp/tmpxft_00009006_00000000-1_cuda_code.cudafe1.cpp"
# 1 "cuda_code.cu"
# 152 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stddef.h" 3
typedef int ptrdiff_t;
# 214 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stddef.h" 3
typedef unsigned long size_t;
# 1 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 1 3
# 69 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 3
# 1 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 1 3
# 54 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 3
# 1 "/usr/local/cuda/bin/../include/host_defines.h" 1 3
# 55 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 2 3
# 1 "/usr/local/cuda/bin/../include/builtin_types.h" 1 3
# 42 "/usr/local/cuda/bin/../include/builtin_types.h" 3
# 1 "/usr/local/cuda/bin/../include/device_types.h" 1 3
# 46 "/usr/local/cuda/bin/../include/device_types.h" 3
enum cudaRoundMode
{
  cudaRoundNearest,
  cudaRoundZero,
  cudaRoundPosInf,
  cudaRoundMinInf
};
# 43 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/driver_types.h" 1 3
# 59 "/usr/local/cuda/bin/../include/driver_types.h" 3
enum cudaError
{
  cudaSuccess = 0,
  cudaErrorMissingConfiguration,
  cudaErrorMemoryAllocation,
  cudaErrorInitializationError,
  cudaErrorLaunchFailure,
  cudaErrorPriorLaunchFailure,
  cudaErrorLaunchTimeout,
  cudaErrorLaunchOutOfResources,
  cudaErrorInvalidDeviceFunction,
  cudaErrorInvalidConfiguration,
  cudaErrorInvalidDevice,
  cudaErrorInvalidValue,
  cudaErrorInvalidPitchValue,
  cudaErrorInvalidSymbol,
  cudaErrorMapBufferObjectFailed,
  cudaErrorUnmapBufferObjectFailed,
  cudaErrorInvalidHostPointer,
  cudaErrorInvalidDevicePointer,
  cudaErrorInvalidTexture,
  cudaErrorInvalidTextureBinding,
  cudaErrorInvalidChannelDescriptor,
  cudaErrorInvalidMemcpyDirection,
  cudaErrorAddressOfConstant,
  cudaErrorTextureFetchFailed,
  cudaErrorTextureNotBound,
  cudaErrorSynchronizationError,
  cudaErrorInvalidFilterSetting,
  cudaErrorInvalidNormSetting,
  cudaErrorMixedDeviceExecution,
  cudaErrorCudartUnloading,
  cudaErrorUnknown,
  cudaErrorNotYetImplemented,
  cudaErrorMemoryValueTooLarge,
  cudaErrorInvalidResourceHandle,
  cudaErrorNotReady,
  cudaErrorStartupFailure = 0x7f,
  cudaErrorApiFailureBase = 10000
};


enum cudaChannelFormatKind
{
  cudaChannelFormatKindSigned,
  cudaChannelFormatKindUnsigned,
  cudaChannelFormatKindFloat
};


struct cudaChannelFormatDesc
{
  int x;
  int y;
  int z;
  int w;
  enum cudaChannelFormatKind f;
};


struct cudaArray;


enum cudaMemcpyKind
{
  cudaMemcpyHostToHost = 0,
  cudaMemcpyHostToDevice,
  cudaMemcpyDeviceToHost,
  cudaMemcpyDeviceToDevice
};


struct cudaPitchedPtr
{
  void *ptr;
  size_t pitch;
  size_t xsize;
  size_t ysize;
};


struct cudaExtent
{
  size_t width;
  size_t height;
  size_t depth;
};


struct cudaPos
{
  size_t x;
  size_t y;
  size_t z;
};


struct cudaMemcpy3DParms
{
  struct cudaArray *srcArray;
  struct cudaPos srcPos;
  struct cudaPitchedPtr srcPtr;

  struct cudaArray *dstArray;
  struct cudaPos dstPos;
  struct cudaPitchedPtr dstPtr;

  struct cudaExtent extent;
  enum cudaMemcpyKind kind;
};


struct cudaDeviceProp
{
  char name[256];
  size_t totalGlobalMem;
  size_t sharedMemPerBlock;
  int regsPerBlock;
  int warpSize;
  size_t memPitch;
  int maxThreadsPerBlock;
  int maxThreadsDim[3];
  int maxGridSize[3];
  int clockRate;
  size_t totalConstMem;
  int major;
  int minor;
  size_t textureAlignment;
  int deviceOverlap;
  int multiProcessorCount;
  int __cudaReserved[40];
};
# 219 "/usr/local/cuda/bin/../include/driver_types.h" 3
typedef enum cudaError cudaError_t;


typedef int cudaStream_t;


typedef int cudaEvent_t;
# 44 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/texture_types.h" 1 3
# 46 "/usr/local/cuda/bin/../include/texture_types.h" 3
enum cudaTextureAddressMode
{
  cudaAddressModeWrap,
  cudaAddressModeClamp
};


enum cudaTextureFilterMode
{
  cudaFilterModePoint,
  cudaFilterModeLinear
};


enum cudaTextureReadMode
{
  cudaReadModeElementType,
  cudaReadModeNormalizedFloat
};


struct textureReference
{
  int normalized;
  enum cudaTextureFilterMode filterMode;
  enum cudaTextureAddressMode addressMode[3];
  struct cudaChannelFormatDesc channelDesc;
  int __cudaReserved[16];
};
# 45 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/vector_types.h" 1 3
# 54 "/usr/local/cuda/bin/../include/vector_types.h" 3
struct char1
{
  signed char x;
};


struct uchar1
{
  unsigned char x;
};


struct char2
{
  signed char x, y;
};


struct uchar2
{
  unsigned char x, y;
};


struct char3
{
  signed char x, y, z;
};


struct uchar3
{
  unsigned char x, y, z;
};


struct char4
{
  signed char x, y, z, w;
};


struct uchar4
{
  unsigned char x, y, z, w;
};


struct short1
{
  short x;
};


struct ushort1
{
  unsigned short x;
};


struct short2
{
  short x, y;
};


struct ushort2
{
  unsigned short x, y;
};


struct short3
{
  short x, y, z;
};


struct ushort3
{
  unsigned short x, y, z;
};


struct short4
{
  short x, y, z, w;
};


struct ushort4
{
  unsigned short x, y, z, w;
};


struct int1
{
  int x;
};


struct uint1
{
  unsigned int x;
};


struct int2
{
  int x, y;
};


struct uint2
{
  unsigned int x, y;
};


struct int3
{
  int x, y, z;
};


struct uint3
{
  unsigned int x, y, z;
};


struct int4
{
  int x, y, z, w;
};


struct uint4
{
  unsigned int x, y, z, w;
};


struct long1
{
  long int x;
};


struct ulong1
{
  unsigned long x;
};


struct



      

                                             long2
{
  long int x, y;
};


struct



      

                                                      ulong2
{
  unsigned long int x, y;
};




struct long3
{
  long int x, y, z;
};


struct ulong3
{
  unsigned long int x, y, z;
};


struct long4
{
  long int x, y, z, w;
};


struct ulong4
{
  unsigned long int x, y, z, w;
};




struct float1
{
  float x;
};


struct float2
{
  float x, y;
};


struct float3
{
  float x, y, z;
};


struct float4
{
  float x, y, z, w;
};


struct double1
{
  double x;
};


struct double2
{
  double x, y;
};
# 304 "/usr/local/cuda/bin/../include/vector_types.h" 3
typedef struct char1 char1;

typedef struct uchar1 uchar1;

typedef struct char2 char2;

typedef struct uchar2 uchar2;

typedef struct char3 char3;

typedef struct uchar3 uchar3;

typedef struct char4 char4;

typedef struct uchar4 uchar4;

typedef struct short1 short1;

typedef struct ushort1 ushort1;

typedef struct short2 short2;

typedef struct ushort2 ushort2;

typedef struct short3 short3;

typedef struct ushort3 ushort3;

typedef struct short4 short4;

typedef struct ushort4 ushort4;

typedef struct int1 int1;

typedef struct uint1 uint1;

typedef struct int2 int2;

typedef struct uint2 uint2;

typedef struct int3 int3;

typedef struct uint3 uint3;

typedef struct int4 int4;

typedef struct uint4 uint4;

typedef struct long1 long1;

typedef struct ulong1 ulong1;

typedef struct long2 long2;

typedef struct ulong2 ulong2;

typedef struct long3 long3;

typedef struct ulong3 ulong3;

typedef struct long4 long4;

typedef struct ulong4 ulong4;

typedef struct float1 float1;

typedef struct float2 float2;

typedef struct float3 float3;

typedef struct float4 float4;

typedef struct double1 double1;

typedef struct double2 double2;
# 387 "/usr/local/cuda/bin/../include/vector_types.h" 3
typedef struct dim3 dim3;


struct dim3
{
    unsigned int x, y, z;

    dim3(unsigned int x = 1, unsigned int y = 1, unsigned int z = 1) : x(x), y(y), z(z) {}
    dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};
# 45 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 56 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 2 3
# 79 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 3
extern "C" {
# 88 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 3
extern cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchDevPtr, struct cudaExtent extent);
extern cudaError_t cudaMalloc3DArray(struct cudaArray** arrayPtr, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent);
extern cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchDevPtr, int value, struct cudaExtent extent);
extern cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
extern cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
# 101 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 3
extern cudaError_t cudaMalloc(void **devPtr, size_t size);
extern cudaError_t cudaMallocHost(void **ptr, size_t size);
extern cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
extern cudaError_t cudaMallocArray(struct cudaArray **array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height );
extern cudaError_t cudaFree(void *devPtr);
extern cudaError_t cudaFreeHost(void *ptr);
extern cudaError_t cudaFreeArray(struct cudaArray *array);
# 116 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 3
extern cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpyToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpyFromArray(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpyArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind );
extern cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpy2DToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpy2DArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind );
extern cudaError_t cudaMemcpyToSymbol(const char *symbol, const void *src, size_t count, size_t offset , enum cudaMemcpyKind kind );
extern cudaError_t cudaMemcpyFromSymbol(void *dst, const char *symbol, size_t count, size_t offset , enum cudaMemcpyKind kind );







extern cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern cudaError_t cudaMemcpyToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern cudaError_t cudaMemcpyFromArrayAsync(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern cudaError_t cudaMemcpy2DToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern cudaError_t cudaMemcpyToSymbolAsync(const char *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream);
extern cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const char *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream);







extern cudaError_t cudaMemset(void *mem, int c, size_t count);
extern cudaError_t cudaMemset2D(void *mem, size_t pitch, int c, size_t width, size_t height);







extern cudaError_t cudaGetSymbolAddress(void **devPtr, const char *symbol);
extern cudaError_t cudaGetSymbolSize(size_t *size, const char *symbol);







extern cudaError_t cudaGetDeviceCount(int *count);
extern cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
extern cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
extern cudaError_t cudaSetDevice(int device);
extern cudaError_t cudaGetDevice(int *device);







extern cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size );
extern cudaError_t cudaBindTextureToArray(const struct textureReference *texref, const struct cudaArray *array, const struct cudaChannelFormatDesc *desc);
extern cudaError_t cudaUnbindTexture(const struct textureReference *texref);
extern cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
extern cudaError_t cudaGetTextureReference(const struct textureReference **texref, const char *symbol);







extern cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, const struct cudaArray *array);
extern struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);







extern cudaError_t cudaGetLastError(void);
extern const char* cudaGetErrorString(cudaError_t error);







extern cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem , cudaStream_t stream );
extern cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
extern cudaError_t cudaLaunch(const char *symbol);







extern cudaError_t cudaStreamCreate(cudaStream_t *stream);
extern cudaError_t cudaStreamDestroy(cudaStream_t stream);
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream);
extern cudaError_t cudaStreamQuery(cudaStream_t stream);







extern cudaError_t cudaEventCreate(cudaEvent_t *event);
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream);
extern cudaError_t cudaEventQuery(cudaEvent_t event);
extern cudaError_t cudaEventSynchronize(cudaEvent_t event);
extern cudaError_t cudaEventDestroy(cudaEvent_t event);
extern cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);







extern cudaError_t cudaSetDoubleForDevice(double *d);
extern cudaError_t cudaSetDoubleForHost(double *d);







extern cudaError_t cudaThreadExit(void);
extern cudaError_t cudaThreadSynchronize(void);


}
# 70 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2 3
# 1 "/usr/local/cuda/bin/../include/crt/storage_class.h" 1 3
# 71 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2 3
# 216 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stddef.h" 2 3
# 88 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3D(cudaPitchedPtr *, cudaExtent);
# 89 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3DArray(cudaArray **, const cudaChannelFormatDesc *, cudaExtent);
# 90 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3D(cudaPitchedPtr, int, cudaExtent);
# 91 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms *);
# 92 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms *, cudaStream_t);
# 101 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc(void **, size_t);
# 102 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocHost(void **, size_t);
# 103 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocPitch(void **, size_t *, size_t, size_t);
# 104 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocArray(cudaArray **, const cudaChannelFormatDesc *, size_t, size_t = (1));
# 105 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFree(void *);
# 106 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeHost(void *);
# 107 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeArray(cudaArray *);
# 116 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy(void *, const void *, size_t, cudaMemcpyKind);
# 117 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArray(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind);
# 118 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArray(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind);
# 119 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice);
# 120 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2D(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind);
# 121 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArray(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind);
# 122 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArray(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind);
# 123 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice);
# 124 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbol(const char *, const void *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyHostToDevice);
# 125 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbol(void *, const char *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyDeviceToHost);
# 133 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyAsync(void *, const void *, size_t, cudaMemcpyKind, cudaStream_t);
# 134 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind, cudaStream_t);
# 135 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArrayAsync(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t);
# 136 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DAsync(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t);
# 137 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t);
# 138 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArrayAsync(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t);
# 139 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbolAsync(const char *, const void *, size_t, size_t, cudaMemcpyKind, cudaStream_t);
# 140 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbolAsync(void *, const char *, size_t, size_t, cudaMemcpyKind, cudaStream_t);
# 148 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset(void *, int, size_t);
# 149 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2D(void *, size_t, int, size_t, size_t);
# 157 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolAddress(void **, const char *);
# 158 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolSize(size_t *, const char *);
# 166 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceCount(int *);
# 167 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceProperties(cudaDeviceProp *, int);
# 168 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaChooseDevice(int *, const cudaDeviceProp *);
# 169 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDevice(int);
# 170 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDevice(int *);
# 178 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture(size_t *, const textureReference *, const void *, const cudaChannelFormatDesc *, size_t = (((2147483647) * 2U) + 1U));
# 179 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTextureToArray(const textureReference *, const cudaArray *, const cudaChannelFormatDesc *);
# 180 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaUnbindTexture(const textureReference *);
# 181 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureAlignmentOffset(size_t *, const textureReference *);
# 182 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureReference(const textureReference **, const char *);
# 190 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc *, const cudaArray *);
# 191 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaChannelFormatDesc cudaCreateChannelDesc(int, int, int, int, cudaChannelFormatKind);
# 199 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetLastError();
# 200 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" const char *cudaGetErrorString(cudaError_t);
# 208 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaConfigureCall(dim3, dim3, size_t = (0), cudaStream_t = (0));
# 209 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetupArgument(const void *, size_t, size_t);
# 210 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaLaunch(const char *);
# 218 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreate(cudaStream_t *);
# 219 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamDestroy(cudaStream_t);
# 220 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamSynchronize(cudaStream_t);
# 221 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamQuery(cudaStream_t);
# 229 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreate(cudaEvent_t *);
# 230 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventRecord(cudaEvent_t, cudaStream_t);
# 231 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventQuery(cudaEvent_t);
# 232 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventSynchronize(cudaEvent_t);
# 233 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventDestroy(cudaEvent_t);
# 234 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventElapsedTime(float *, cudaEvent_t, cudaEvent_t);
# 242 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForDevice(double *);
# 243 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForHost(double *);
# 251 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadExit();
# 252 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSynchronize();
# 57 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<class T> inline cudaChannelFormatDesc cudaCreateChannelDesc()
# 58 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 59 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 60 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 62 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> ()
# 63 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 64 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(char)) * 8);
# 69 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 71 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 73 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> ()
# 74 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 75 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(signed char)) * 8);
# 77 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 78 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 80 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> ()
# 81 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 82 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned char)) * 8);
# 84 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 85 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 87 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> ()
# 88 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 89 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(signed char)) * 8);
# 91 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 92 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 94 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> ()
# 95 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 96 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned char)) * 8);
# 98 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 99 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 101 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> ()
# 102 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 103 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(signed char)) * 8);
# 105 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 106 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 108 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> ()
# 109 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 110 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned char)) * 8);
# 112 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 113 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 115 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> ()
# 116 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 117 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(signed char)) * 8);
# 119 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 120 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 122 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> ()
# 123 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 124 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned char)) * 8);
# 126 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 127 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 129 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> ()
# 130 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 131 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(short)) * 8);
# 133 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 134 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 136 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> ()
# 137 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 138 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned short)) * 8);
# 140 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 141 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 143 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> ()
# 144 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 145 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(short)) * 8);
# 147 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 148 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 150 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> ()
# 151 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 152 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned short)) * 8);
# 154 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 155 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 157 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> ()
# 158 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 159 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(short)) * 8);
# 161 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 162 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 164 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> ()
# 165 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 166 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned short)) * 8);
# 168 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 169 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 171 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> ()
# 172 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 173 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(short)) * 8);
# 175 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 176 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 178 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> ()
# 179 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 180 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned short)) * 8);
# 182 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 183 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 185 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> ()
# 186 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 187 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(int)) * 8);
# 189 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 190 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 192 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> ()
# 193 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 194 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned)) * 8);
# 196 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 197 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 199 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> ()
# 200 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 201 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(int)) * 8);
# 203 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 204 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 206 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> ()
# 207 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 208 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned)) * 8);
# 210 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 211 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 213 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> ()
# 214 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 215 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(int)) * 8);
# 217 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 218 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 220 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> ()
# 221 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 222 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned)) * 8);
# 224 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 225 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 227 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> ()
# 228 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 229 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(int)) * 8);
# 231 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 232 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 234 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> ()
# 235 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 236 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned)) * 8);
# 238 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 239 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 243 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long> ()
# 244 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 245 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(long)) * 8);
# 247 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 248 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 250 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> ()
# 251 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 252 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned long)) * 8);
# 254 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 255 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 257 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> ()
# 258 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 259 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(long)) * 8);
# 261 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 262 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 264 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> ()
# 265 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 266 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned long)) * 8);
# 268 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 269 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 271 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> ()
# 272 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 273 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(long)) * 8);
# 275 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 276 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 278 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> ()
# 279 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 280 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned long)) * 8);
# 282 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 283 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 285 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> ()
# 286 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 287 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(long)) * 8);
# 289 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 290 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 292 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> ()
# 293 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 294 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(unsigned long)) * 8);
# 296 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 297 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 301 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> ()
# 302 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 303 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(float)) * 8);
# 305 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 306 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 308 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> ()
# 309 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 310 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(float)) * 8);
# 312 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 313 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 315 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> ()
# 316 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 317 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(float)) * 8);
# 319 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
# 320 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 322 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> ()
# 323 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 324 "/usr/local/cuda/bin/../include/channel_descriptor.h"
auto int e = (((int)sizeof(float)) * 8);
# 326 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
# 327 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 94 "/usr/local/cuda/bin/../include/texture_types.h"
template<class T, int dim = 1, cudaTextureReadMode = cudaReadModeElementType>
# 95 "/usr/local/cuda/bin/../include/texture_types.h"
struct texture : public textureReference {
# 97 "/usr/local/cuda/bin/../include/texture_types.h"
texture(int norm = 0, cudaTextureFilterMode
# 98 "/usr/local/cuda/bin/../include/texture_types.h"
fMode = cudaFilterModePoint, cudaTextureAddressMode
# 99 "/usr/local/cuda/bin/../include/texture_types.h"
aMode = cudaAddressModeClamp)
# 100 "/usr/local/cuda/bin/../include/texture_types.h"
{
# 101 "/usr/local/cuda/bin/../include/texture_types.h"
(this->normalized) = norm;
# 102 "/usr/local/cuda/bin/../include/texture_types.h"
(this->filterMode) = fMode;
# 103 "/usr/local/cuda/bin/../include/texture_types.h"
((this->addressMode)[0]) = aMode;
# 104 "/usr/local/cuda/bin/../include/texture_types.h"
((this->addressMode)[1]) = aMode;
# 105 "/usr/local/cuda/bin/../include/texture_types.h"
((this->addressMode)[2]) = aMode;
# 106 "/usr/local/cuda/bin/../include/texture_types.h"
(this->channelDesc) = cudaCreateChannelDesc< T> ();
# 107 "/usr/local/cuda/bin/../include/texture_types.h"
}
# 109 "/usr/local/cuda/bin/../include/texture_types.h"
texture(int norm, cudaTextureFilterMode
# 110 "/usr/local/cuda/bin/../include/texture_types.h"
fMode, cudaTextureAddressMode
# 111 "/usr/local/cuda/bin/../include/texture_types.h"
aMode, cudaChannelFormatDesc
# 112 "/usr/local/cuda/bin/../include/texture_types.h"
desc)
# 113 "/usr/local/cuda/bin/../include/texture_types.h"
{
# 114 "/usr/local/cuda/bin/../include/texture_types.h"
(this->normalized) = norm;
# 115 "/usr/local/cuda/bin/../include/texture_types.h"
(this->filterMode) = fMode;
# 116 "/usr/local/cuda/bin/../include/texture_types.h"
((this->addressMode)[0]) = aMode;
# 117 "/usr/local/cuda/bin/../include/texture_types.h"
((this->addressMode)[1]) = aMode;
# 118 "/usr/local/cuda/bin/../include/texture_types.h"
((this->addressMode)[2]) = aMode;
# 119 "/usr/local/cuda/bin/../include/texture_types.h"
(this->channelDesc) = desc;
# 120 "/usr/local/cuda/bin/../include/texture_types.h"
}
# 121 "/usr/local/cuda/bin/../include/texture_types.h"
};
# 54 "/usr/local/cuda/bin/../include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
# 55 "/usr/local/cuda/bin/../include/driver_functions.h"
{
# 56 "/usr/local/cuda/bin/../include/driver_functions.h"
auto cudaPitchedPtr s;
# 58 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.ptr) = d;
# 59 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.pitch) = p;
# 60 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.xsize) = xsz;
# 61 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.ysize) = ysz;
# 63 "/usr/local/cuda/bin/../include/driver_functions.h"
return s;
# 64 "/usr/local/cuda/bin/../include/driver_functions.h"
}
# 66 "/usr/local/cuda/bin/../include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z)
# 67 "/usr/local/cuda/bin/../include/driver_functions.h"
{
# 68 "/usr/local/cuda/bin/../include/driver_functions.h"
auto cudaPos p;
# 70 "/usr/local/cuda/bin/../include/driver_functions.h"
(p.x) = x;
# 71 "/usr/local/cuda/bin/../include/driver_functions.h"
(p.y) = y;
# 72 "/usr/local/cuda/bin/../include/driver_functions.h"
(p.z) = z;
# 74 "/usr/local/cuda/bin/../include/driver_functions.h"
return p;
# 75 "/usr/local/cuda/bin/../include/driver_functions.h"
}
# 77 "/usr/local/cuda/bin/../include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
# 78 "/usr/local/cuda/bin/../include/driver_functions.h"
{
# 79 "/usr/local/cuda/bin/../include/driver_functions.h"
auto cudaExtent e;
# 81 "/usr/local/cuda/bin/../include/driver_functions.h"
(e.width) = w;
# 82 "/usr/local/cuda/bin/../include/driver_functions.h"
(e.height) = h;
# 83 "/usr/local/cuda/bin/../include/driver_functions.h"
(e.depth) = d;
# 85 "/usr/local/cuda/bin/../include/driver_functions.h"
return e;
# 86 "/usr/local/cuda/bin/../include/driver_functions.h"
}
# 54 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char1 make_char1(signed char x)
# 55 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 56 "/usr/local/cuda/bin/../include/vector_functions.h"
auto char1 t; (t.x) = x; return t;
# 57 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 59 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar1 make_uchar1(unsigned char x)
# 60 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 61 "/usr/local/cuda/bin/../include/vector_functions.h"
auto uchar1 t; (t.x) = x; return t;
# 62 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 64 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char2 make_char2(signed char x, signed char y)
# 65 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 66 "/usr/local/cuda/bin/../include/vector_functions.h"
auto char2 t; (t.x) = x; (t.y) = y; return t;
# 67 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 69 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar2 make_uchar2(unsigned char x, unsigned char y)
# 70 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 71 "/usr/local/cuda/bin/../include/vector_functions.h"
auto uchar2 t; (t.x) = x; (t.y) = y; return t;
# 72 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 74 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char3 make_char3(signed char x, signed char y, signed char z)
# 75 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 76 "/usr/local/cuda/bin/../include/vector_functions.h"
auto char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 77 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 79 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
# 80 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 81 "/usr/local/cuda/bin/../include/vector_functions.h"
auto uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 82 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 84 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w)
# 85 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 86 "/usr/local/cuda/bin/../include/vector_functions.h"
auto char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 87 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 89 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
# 90 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 91 "/usr/local/cuda/bin/../include/vector_functions.h"
auto uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 92 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 94 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short1 make_short1(short x)
# 95 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 96 "/usr/local/cuda/bin/../include/vector_functions.h"
auto short1 t; (t.x) = x; return t;
# 97 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 99 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort1 make_ushort1(unsigned short x)
# 100 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 101 "/usr/local/cuda/bin/../include/vector_functions.h"
auto ushort1 t; (t.x) = x; return t;
# 102 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 104 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short2 make_short2(short x, short y)
# 105 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 106 "/usr/local/cuda/bin/../include/vector_functions.h"
auto short2 t; (t.x) = x; (t.y) = y; return t;
# 107 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 109 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort2 make_ushort2(unsigned short x, unsigned short y)
# 110 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 111 "/usr/local/cuda/bin/../include/vector_functions.h"
auto ushort2 t; (t.x) = x; (t.y) = y; return t;
# 112 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 114 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short3 make_short3(short x, short y, short z)
# 115 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 116 "/usr/local/cuda/bin/../include/vector_functions.h"
auto short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 117 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 119 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
# 120 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 121 "/usr/local/cuda/bin/../include/vector_functions.h"
auto ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 122 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 124 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short4 make_short4(short x, short y, short z, short w)
# 125 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 126 "/usr/local/cuda/bin/../include/vector_functions.h"
auto short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 127 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 129 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
# 130 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 131 "/usr/local/cuda/bin/../include/vector_functions.h"
auto ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 132 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 134 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int1 make_int1(int x)
# 135 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 136 "/usr/local/cuda/bin/../include/vector_functions.h"
auto int1 t; (t.x) = x; return t;
# 137 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 139 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint1 make_uint1(unsigned x)
# 140 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 141 "/usr/local/cuda/bin/../include/vector_functions.h"
auto uint1 t; (t.x) = x; return t;
# 142 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 144 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int2 make_int2(int x, int y)
# 145 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 146 "/usr/local/cuda/bin/../include/vector_functions.h"
auto int2 t; (t.x) = x; (t.y) = y; return t;
# 147 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 149 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint2 make_uint2(unsigned x, unsigned y)
# 150 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 151 "/usr/local/cuda/bin/../include/vector_functions.h"
auto uint2 t; (t.x) = x; (t.y) = y; return t;
# 152 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 154 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int3 make_int3(int x, int y, int z)
# 155 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 156 "/usr/local/cuda/bin/../include/vector_functions.h"
auto int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 157 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 159 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z)
# 160 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 161 "/usr/local/cuda/bin/../include/vector_functions.h"
auto uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 162 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 164 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int4 make_int4(int x, int y, int z, int w)
# 165 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 166 "/usr/local/cuda/bin/../include/vector_functions.h"
auto int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 167 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 169 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w)
# 170 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 171 "/usr/local/cuda/bin/../include/vector_functions.h"
auto uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 172 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 174 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long1 make_long1(long x)
# 175 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 176 "/usr/local/cuda/bin/../include/vector_functions.h"
auto long1 t; (t.x) = x; return t;
# 177 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 179 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong1 make_ulong1(unsigned long x)
# 180 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 181 "/usr/local/cuda/bin/../include/vector_functions.h"
auto ulong1 t; (t.x) = x; return t;
# 182 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 184 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long2 make_long2(long x, long y)
# 185 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 186 "/usr/local/cuda/bin/../include/vector_functions.h"
auto long2 t; (t.x) = x; (t.y) = y; return t;
# 187 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 189 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong2 make_ulong2(unsigned long x, unsigned long y)
# 190 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 191 "/usr/local/cuda/bin/../include/vector_functions.h"
auto ulong2 t; (t.x) = x; (t.y) = y; return t;
# 192 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 196 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long3 make_long3(long x, long y, long z)
# 197 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 198 "/usr/local/cuda/bin/../include/vector_functions.h"
auto long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 199 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 201 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z)
# 202 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 203 "/usr/local/cuda/bin/../include/vector_functions.h"
auto ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 204 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 206 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long4 make_long4(long x, long y, long z, long w)
# 207 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 208 "/usr/local/cuda/bin/../include/vector_functions.h"
auto long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 209 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 211 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w)
# 212 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 213 "/usr/local/cuda/bin/../include/vector_functions.h"
auto ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 214 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 218 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float1 make_float1(float x)
# 219 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 220 "/usr/local/cuda/bin/../include/vector_functions.h"
auto float1 t; (t.x) = x; return t;
# 221 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 223 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float2 make_float2(float x, float y)
# 224 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 225 "/usr/local/cuda/bin/../include/vector_functions.h"
auto float2 t; (t.x) = x; (t.y) = y; return t;
# 226 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 228 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float3 make_float3(float x, float y, float z)
# 229 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 230 "/usr/local/cuda/bin/../include/vector_functions.h"
auto float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 231 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 233 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float4 make_float4(float x, float y, float z, float w)
# 234 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 235 "/usr/local/cuda/bin/../include/vector_functions.h"
auto float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 236 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 238 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double1 make_double1(double x)
# 239 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 240 "/usr/local/cuda/bin/../include/vector_functions.h"
auto double1 t; (t.x) = x; return t;
# 241 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 243 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double2 make_double2(double x, double y)
# 244 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 245 "/usr/local/cuda/bin/../include/vector_functions.h"
auto double2 t; (t.x) = x; (t.y) = y; return t;
# 246 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 37 "/usr/include/i386/_types.h" 3
typedef signed char __int8_t;
# 41 "/usr/include/i386/_types.h" 3
typedef unsigned char __uint8_t;
# 42 "/usr/include/i386/_types.h" 3
typedef short __int16_t;
# 43 "/usr/include/i386/_types.h" 3
typedef unsigned short __uint16_t;
# 44 "/usr/include/i386/_types.h" 3
typedef int __int32_t;
# 45 "/usr/include/i386/_types.h" 3
typedef unsigned __uint32_t;
# 46 "/usr/include/i386/_types.h" 3
typedef long long __int64_t;
# 47 "/usr/include/i386/_types.h" 3
typedef unsigned long long __uint64_t;
# 49 "/usr/include/i386/_types.h" 3
typedef long __darwin_intptr_t;
# 50 "/usr/include/i386/_types.h" 3
typedef unsigned __darwin_natural_t;
# 70 "/usr/include/i386/_types.h" 3
typedef int __darwin_ct_rune_t;
# 79 "/usr/include/i386/_types.h" 3
typedef
# 76 "/usr/include/i386/_types.h" 3
union __mbstate_t {
# 77 "/usr/include/i386/_types.h" 3
char __mbstate8[128];
# 78 "/usr/include/i386/_types.h" 3
long long _mbstateL;
# 79 "/usr/include/i386/_types.h" 3
} __mbstate_t;
# 81 "/usr/include/i386/_types.h" 3
typedef __mbstate_t __darwin_mbstate_t;
# 84 "/usr/include/i386/_types.h" 3
typedef int __darwin_ptrdiff_t;
# 90 "/usr/include/i386/_types.h" 3
typedef unsigned long __darwin_size_t;
# 96 "/usr/include/i386/_types.h" 3
typedef __builtin_va_list __darwin_va_list;
# 102 "/usr/include/i386/_types.h" 3
typedef int __darwin_wchar_t;
# 107 "/usr/include/i386/_types.h" 3
typedef __darwin_wchar_t __darwin_rune_t;
# 110 "/usr/include/i386/_types.h" 3
typedef int __darwin_wint_t;
# 115 "/usr/include/i386/_types.h" 3
typedef unsigned long __darwin_clock_t;
# 116 "/usr/include/i386/_types.h" 3
typedef __uint32_t __darwin_socklen_t;
# 117 "/usr/include/i386/_types.h" 3
typedef long __darwin_ssize_t;
# 118 "/usr/include/i386/_types.h" 3
typedef long __darwin_time_t;
# 58 "/usr/include/sys/_types.h" 3
struct __darwin_pthread_handler_rec {
# 60 "/usr/include/sys/_types.h" 3
void (*__routine)(void *);
# 61 "/usr/include/sys/_types.h" 3
void *__arg;
# 62 "/usr/include/sys/_types.h" 3
__darwin_pthread_handler_rec *__next;
# 63 "/usr/include/sys/_types.h" 3
};
# 64 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_attr_t { long __sig; char __opaque[36]; };
# 65 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_cond_t { long __sig; char __opaque[24]; };
# 66 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_condattr_t { long __sig; char __opaque[4]; };
# 67 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_mutex_t { long __sig; char __opaque[40]; };
# 68 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
# 69 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_once_t { long __sig; char __opaque[4]; };
# 70 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[124]; };
# 71 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[12]; };
# 72 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_t { long __sig; __darwin_pthread_handler_rec *__cleanup_stack; char __opaque[596]; };
# 94 "/usr/include/sys/_types.h" 3
typedef __int64_t __darwin_blkcnt_t;
# 95 "/usr/include/sys/_types.h" 3
typedef __int32_t __darwin_blksize_t;
# 96 "/usr/include/sys/_types.h" 3
typedef __int32_t __darwin_dev_t;
# 97 "/usr/include/sys/_types.h" 3
typedef unsigned __darwin_fsblkcnt_t;
# 98 "/usr/include/sys/_types.h" 3
typedef unsigned __darwin_fsfilcnt_t;
# 99 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_gid_t;
# 100 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_id_t;
# 101 "/usr/include/sys/_types.h" 3
typedef __uint64_t __darwin_ino64_t;
# 105 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_ino_t;
# 107 "/usr/include/sys/_types.h" 3
typedef __darwin_natural_t __darwin_mach_port_name_t;
# 108 "/usr/include/sys/_types.h" 3
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
# 109 "/usr/include/sys/_types.h" 3
typedef __uint16_t __darwin_mode_t;
# 110 "/usr/include/sys/_types.h" 3
typedef __int64_t __darwin_off_t;
# 111 "/usr/include/sys/_types.h" 3
typedef __int32_t __darwin_pid_t;
# 113 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_attr_t __darwin_pthread_attr_t;
# 115 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_cond_t __darwin_pthread_cond_t;
# 117 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
# 118 "/usr/include/sys/_types.h" 3
typedef unsigned long __darwin_pthread_key_t;
# 120 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
# 122 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
# 124 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_once_t __darwin_pthread_once_t;
# 126 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
# 128 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
# 130 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_t *__darwin_pthread_t;
# 131 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_sigset_t;
# 132 "/usr/include/sys/_types.h" 3
typedef __int32_t __darwin_suseconds_t;
# 133 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_uid_t;
# 134 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_useconds_t;
# 135 "/usr/include/sys/_types.h" 3
typedef unsigned char __darwin_uuid_t[16];
# 29 "/usr/include/_types.h" 3
typedef int __darwin_nl_item;
# 30 "/usr/include/_types.h" 3
typedef int __darwin_wctrans_t;
# 34 "/usr/include/_types.h" 3
typedef unsigned long __darwin_wctype_t;
# 88 "/usr/include/sys/_structs.h" 3
struct timespec {
# 90 "/usr/include/sys/_structs.h" 3
__darwin_time_t tv_sec;
# 91 "/usr/include/sys/_structs.h" 3
long tv_nsec;
# 92 "/usr/include/sys/_structs.h" 3
};
# 77 "/usr/include/time.h" 3
typedef __darwin_clock_t clock_t;
# 87 "/usr/include/time.h" 3
typedef __darwin_time_t time_t;
# 90 "/usr/include/time.h" 3
struct tm {
# 91 "/usr/include/time.h" 3
int tm_sec;
# 92 "/usr/include/time.h" 3
int tm_min;
# 93 "/usr/include/time.h" 3
int tm_hour;
# 94 "/usr/include/time.h" 3
int tm_mday;
# 95 "/usr/include/time.h" 3
int tm_mon;
# 96 "/usr/include/time.h" 3
int tm_year;
# 97 "/usr/include/time.h" 3
int tm_wday;
# 98 "/usr/include/time.h" 3
int tm_yday;
# 99 "/usr/include/time.h" 3
int tm_isdst;
# 100 "/usr/include/time.h" 3
long tm_gmtoff;
# 101 "/usr/include/time.h" 3
char *tm_zone;
# 102 "/usr/include/time.h" 3
};
# 113 "/usr/include/time.h" 3
extern char *tzname[];
# 116 "/usr/include/time.h" 3
extern int getdate_err;
# 118 "/usr/include/time.h" 3
extern long timezone __asm__("_timezone$UNIX2003");
# 120 "/usr/include/time.h" 3
extern int daylight;
# 123 "/usr/include/time.h" 3
extern "C" char *asctime(const tm *);
# 124 "/usr/include/time.h" 3
extern "C" __attribute__((__weak__)) clock_t clock() __asm__("_clock$UNIX2003");
# 125 "/usr/include/time.h" 3
extern "C" char *ctime(const time_t *);
# 126 "/usr/include/time.h" 3
extern "C" double difftime(time_t, time_t);
# 127 "/usr/include/time.h" 3
extern "C" tm *getdate(const char *);
# 128 "/usr/include/time.h" 3
extern "C" tm *gmtime(const time_t *);
# 129 "/usr/include/time.h" 3
extern "C" tm *localtime(const time_t *);
# 130 "/usr/include/time.h" 3
extern "C" time_t mktime(tm *) __asm__("_mktime$UNIX2003");
# 131 "/usr/include/time.h" 3
extern "C" size_t strftime(char *, size_t, const char *, const tm *) __asm__("_strftime$UNIX2003");
# 132 "/usr/include/time.h" 3
extern "C" char *strptime(const char *, const char *, tm *) __asm__("_strptime$UNIX2003");
# 133 "/usr/include/time.h" 3
extern "C" time_t time(time_t *);
# 136 "/usr/include/time.h" 3
extern "C" void tzset();
# 140 "/usr/include/time.h" 3
extern "C" char *asctime_r(const tm *, char *);
# 141 "/usr/include/time.h" 3
extern "C" char *ctime_r(const time_t *, char *);
# 142 "/usr/include/time.h" 3
extern "C" tm *gmtime_r(const time_t *, tm *);
# 143 "/usr/include/time.h" 3
extern "C" tm *localtime_r(const time_t *, tm *);
# 146 "/usr/include/time.h" 3
extern "C" time_t posix2time(time_t);
# 150 "/usr/include/time.h" 3
extern "C" void tzsetwall();
# 151 "/usr/include/time.h" 3
extern "C" time_t time2posix(time_t);
# 152 "/usr/include/time.h" 3
extern "C" time_t timelocal(tm *const);
# 153 "/usr/include/time.h" 3
extern "C" time_t timegm(tm *const);
# 157 "/usr/include/time.h" 3
extern "C" int nanosleep(const timespec *, timespec *) __asm__("_nanosleep$UNIX2003");
# 70 "/usr/include/string.h" 3
typedef __darwin_ssize_t ssize_t;
# 81 "/usr/include/string.h" 3
extern "C" void *memchr(const void *, int, size_t);
# 82 "/usr/include/string.h" 3
extern "C" int memcmp(const void *, const void *, size_t);
# 83 "/usr/include/string.h" 3
extern "C" __attribute__((__weak__)) void *memcpy(void *, const void *, size_t);
# 84 "/usr/include/string.h" 3
extern "C" void *memmove(void *, const void *, size_t);
# 85 "/usr/include/string.h" 3
extern "C" __attribute__((__weak__)) void *memset(void *, int, size_t);
# 87 "/usr/include/string.h" 3
extern "C" char *stpcpy(char *, const char *);
# 88 "/usr/include/string.h" 3
extern "C" char *strcasestr(const char *, const char *);
# 90 "/usr/include/string.h" 3
extern "C" char *strcat(char *, const char *);
# 91 "/usr/include/string.h" 3
extern "C" char *strchr(const char *, int);
# 92 "/usr/include/string.h" 3
extern "C" int strcmp(const char *, const char *);
# 93 "/usr/include/string.h" 3
extern "C" int strcoll(const char *, const char *);
# 94 "/usr/include/string.h" 3
extern "C" char *strcpy(char *, const char *);
# 95 "/usr/include/string.h" 3
extern "C" size_t strcspn(const char *, const char *);
# 96 "/usr/include/string.h" 3
extern "C" char *strerror(int) __asm__("_strerror$UNIX2003");
# 97 "/usr/include/string.h" 3
extern "C" int strerror_r(int, char *, size_t);
# 98 "/usr/include/string.h" 3
extern "C" size_t strlen(const char *);
# 99 "/usr/include/string.h" 3
extern "C" char *strncat(char *, const char *, size_t);
# 100 "/usr/include/string.h" 3
extern "C" int strncmp(const char *, const char *, size_t);
# 101 "/usr/include/string.h" 3
extern "C" char *strncpy(char *, const char *, size_t);
# 103 "/usr/include/string.h" 3
extern "C" char *strnstr(const char *, const char *, size_t);
# 105 "/usr/include/string.h" 3
extern "C" char *strpbrk(const char *, const char *);
# 106 "/usr/include/string.h" 3
extern "C" char *strrchr(const char *, int);
# 107 "/usr/include/string.h" 3
extern "C" size_t strspn(const char *, const char *);
# 108 "/usr/include/string.h" 3
extern "C" char *strstr(const char *, const char *);
# 109 "/usr/include/string.h" 3
extern "C" char *strtok(char *, const char *);
# 110 "/usr/include/string.h" 3
extern "C" size_t strxfrm(char *, const char *, size_t);
# 114 "/usr/include/string.h" 3
extern "C" void *memccpy(void *, const void *, int, size_t);
# 115 "/usr/include/string.h" 3
extern "C" char *strtok_r(char *, const char *, char **);
# 116 "/usr/include/string.h" 3
extern "C" char *strdup(const char *);
# 118 "/usr/include/string.h" 3
extern "C" int bcmp(const void *, const void *, size_t);
# 119 "/usr/include/string.h" 3
extern "C" void bcopy(const void *, void *, size_t);
# 120 "/usr/include/string.h" 3
extern "C" void bzero(void *, size_t);
# 121 "/usr/include/string.h" 3
extern "C" int ffs(int);
# 122 "/usr/include/string.h" 3
extern "C" int ffsl(long);
# 123 "/usr/include/string.h" 3
extern "C" int fls(int);
# 124 "/usr/include/string.h" 3
extern "C" int flsl(long);
# 125 "/usr/include/string.h" 3
extern "C" char *index(const char *, int);
# 126 "/usr/include/string.h" 3
extern "C" void memset_pattern4(void *, const void *, size_t);
# 127 "/usr/include/string.h" 3
extern "C" void memset_pattern8(void *, const void *, size_t);
# 128 "/usr/include/string.h" 3
extern "C" void memset_pattern16(void *, const void *, size_t);
# 129 "/usr/include/string.h" 3
extern "C" char *rindex(const char *, int);
# 130 "/usr/include/string.h" 3
extern "C" int strcasecmp(const char *, const char *);
# 131 "/usr/include/string.h" 3
extern "C" size_t strlcat(char *, const char *, size_t);
# 132 "/usr/include/string.h" 3
extern "C" size_t strlcpy(char *, const char *, size_t);
# 133 "/usr/include/string.h" 3
extern "C" void strmode(int, char *);
# 134 "/usr/include/string.h" 3
extern "C" int strncasecmp(const char *, const char *, size_t);
# 135 "/usr/include/string.h" 3
extern "C" char *strsep(char **, const char *);
# 136 "/usr/include/string.h" 3
extern "C" char *strsignal(int);
# 137 "/usr/include/string.h" 3
extern "C" void swab(const void *, void *, ssize_t);
# 56 "/usr/local/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((__weak__)) clock_t clock() __asm__("_clock$UNIX2003");
# 59 "/usr/local/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((__weak__)) void *memset(void *, int, size_t);
# 62 "/usr/local/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((__weak__)) void *memcpy(void *, const void *, size_t);
# 65 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int abs(int) __attribute__((__const__));
# 67 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long labs(long) __attribute__((__const__));
# 69 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llabs(long long);
# 71 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fabs(double);
# 73 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fabsf(float);
# 76 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int min(int, int);
# 78 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) unsigned umin(unsigned, unsigned);
# 80 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fminf(float, float);
# 82 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fmin(double, double);
# 85 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int max(int, int);
# 87 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) unsigned umax(unsigned, unsigned);
# 89 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fmaxf(float, float);
# 91 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fmax(double, double);
# 94 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double sin(double);
# 96 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float sinf(float);
# 99 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double cos(double);
# 101 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float cosf(float);
# 104 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) void sincos(double, double *, double *);
# 106 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) void sincosf(float, float *, float *);
# 109 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double tan(double);
# 111 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float tanf(float);
# 114 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double sqrt(double);
# 116 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float sqrtf(float);
# 119 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double rsqrt(double);
# 121 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float rsqrtf(float);
# 124 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double exp2(double);
# 126 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float exp2f(float);
# 129 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double exp10(double);
# 131 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float exp10f(float);
# 134 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double expm1(double);
# 136 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float expm1f(float);
# 139 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double log2(double);
# 141 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float log2f(float);
# 144 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double log10(double);
# 146 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float log10f(float);
# 149 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double log(double);
# 151 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float logf(float);
# 154 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double log1p(double);
# 156 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float log1pf(float);
# 159 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double floor(double);
# 161 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float floorf(float);
# 164 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double exp(double);
# 166 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float expf(float);
# 169 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double cosh(double);
# 171 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float coshf(float);
# 174 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double sinh(double);
# 176 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float sinhf(float);
# 179 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double tanh(double);
# 181 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float tanhf(float);
# 184 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double acosh(double);
# 186 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float acoshf(float);
# 189 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double asinh(double);
# 191 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float asinhf(float);
# 194 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double atanh(double);
# 196 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float atanhf(float);
# 199 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double ldexp(double, int);
# 201 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float ldexpf(float, int);
# 204 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double logb(double);
# 206 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float logbf(float);
# 209 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int ilogb(double);
# 211 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int ilogbf(float);
# 214 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double scalbn(double, int);
# 216 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float scalbnf(float, int);
# 219 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double scalbln(double, long);
# 221 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float scalblnf(float, long);
# 224 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double frexp(double, int *);
# 226 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float frexpf(float, int *);
# 229 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double round(double);
# 231 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float roundf(float);
# 234 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long lround(double);
# 236 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long lroundf(float);
# 239 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llround(double);
# 241 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llroundf(float);
# 244 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double rint(double);
# 246 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float rintf(float);
# 249 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long lrint(double);
# 251 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long lrintf(float);
# 254 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llrint(double);
# 256 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llrintf(float);
# 259 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double nearbyint(double);
# 261 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float nearbyintf(float);
# 264 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double ceil(double);
# 266 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float ceilf(float);
# 269 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double trunc(double);
# 271 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float truncf(float);
# 274 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fdim(double, double);
# 276 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fdimf(float, float);
# 279 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double atan2(double, double);
# 281 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float atan2f(float, float);
# 284 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double atan(double);
# 286 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float atanf(float);
# 289 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double asin(double);
# 291 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float asinf(float);
# 294 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double acos(double);
# 296 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float acosf(float);
# 299 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double hypot(double, double);
# 301 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float hypotf(float, float);
# 304 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double cbrt(double);
# 306 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float cbrtf(float);
# 309 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double pow(double, double);
# 311 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float powf(float, float);
# 314 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double modf(double, double *);
# 316 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float modff(float, float *);
# 319 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fmod(double, double);
# 321 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fmodf(float, float);
# 324 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double remainder(double, double);
# 326 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float remainderf(float, float);
# 329 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double remquo(double, double, int *);
# 331 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float remquof(float, float, int *);
# 334 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double erf(double);
# 336 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float erff(float);
# 339 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double erfc(double);
# 341 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float erfcf(float);
# 344 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double lgamma(double);
# 346 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float lgammaf(float);
# 349 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double tgamma(double);
# 351 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float tgammaf(float);
# 354 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double copysign(double, double);
# 356 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float copysignf(float, float);
# 359 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double nextafter(double, double);
# 361 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float nextafterf(float, float);
# 364 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double nan(const char *);
# 366 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float nanf(const char *);
# 369 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isinf(double);
# 371 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isinff(float);
# 374 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isnan(double);
# 376 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isnanf(float);
# 381 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isfinited(double);
# 383 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isfinitef(float);
# 385 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __signbitd(double);
# 399 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __signbitf(float);
# 402 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fma(double, double, double);
# 404 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fmaf(float, float, float);
# 49 "/usr/include/architecture/i386/math.h" 3
extern "C" { typedef float float_t; }
# 50 "/usr/include/architecture/i386/math.h" 3
extern "C" { typedef double double_t; }
# 83 "/usr/include/architecture/i386/math.h" 3
enum __cuda__FP_NAN {
# 84 "/usr/include/architecture/i386/math.h" 3
_FP_NAN = 1,
# 85 "/usr/include/architecture/i386/math.h" 3
_FP_INFINITE,
# 86 "/usr/include/architecture/i386/math.h" 3
_FP_ZERO,
# 87 "/usr/include/architecture/i386/math.h" 3
_FP_NORMAL,
# 88 "/usr/include/architecture/i386/math.h" 3
_FP_SUBNORMAL,
# 89 "/usr/include/architecture/i386/math.h" 3
_FP_SUPERNORMAL
# 90 "/usr/include/architecture/i386/math.h" 3
};
# 117 "/usr/include/architecture/i386/math.h" 3
extern "C" unsigned __math_errhandling();
# 137 "/usr/include/architecture/i386/math.h" 3
extern "C" int __fpclassifyf(float);
# 138 "/usr/include/architecture/i386/math.h" 3
extern "C" int __fpclassifyd(double);
# 139 "/usr/include/architecture/i386/math.h" 3
extern "C" int __fpclassify(long double);
# 172 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isfinitef(float) __attribute__((__always_inline__)); }
# 173 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isfinited(double) __attribute__((__always_inline__)); }
# 174 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isfinite(long double) __attribute__((__always_inline__)); }
# 175 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isinff(float) __attribute__((__always_inline__)); }
# 176 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isinfd(double) __attribute__((__always_inline__)); }
# 177 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isinf(long double) __attribute__((__always_inline__)); }
# 178 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnanf(float) __attribute__((__always_inline__)); }
# 179 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnand(double) __attribute__((__always_inline__)); }
# 180 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnan(long double) __attribute__((__always_inline__)); }
# 181 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnormalf(float) __attribute__((__always_inline__)); }
# 182 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnormald(double) __attribute__((__always_inline__)); }
# 183 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnormal(long double) __attribute__((__always_inline__)); }
# 184 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_signbitf(float) __attribute__((__always_inline__)); }
# 185 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_signbitd(double) __attribute__((__always_inline__)); }
# 186 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_signbit(long double) __attribute__((__always_inline__)); }
# 188 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isinff(float __x) { return __builtin_fabsf(__x) == __builtin_inff(); } }
# 189 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isinfd(double __x) { return __builtin_fabs(__x) == __builtin_inf(); } }
# 190 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isinf(long double __x) { return __builtin_fabsl(__x) == __builtin_infl(); } }
# 191 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isfinitef(float __x) { return (__x == __x) && (__builtin_fabsf(__x) != __builtin_inff()); } }
# 192 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isfinited(double __x) { return (__x == __x) && (__builtin_fabs(__x) != __builtin_inf()); } }
# 193 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isfinite(long double __x) { return (__x == __x) && (__builtin_fabsl(__x) != __builtin_infl()); } }
# 194 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnanf(float __x) { return __x != __x; } }
# 195 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnand(double __x) { return __x != __x; } }
# 196 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnan(long double __x) { return __x != __x; } }
# 197 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_signbitf(float __x) { auto union { float __f; unsigned __u; } __u; (__u.__f) = __x; return (int)((__u.__u) >> 31); } }
# 198 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_signbitd(double __x) { auto union { double __f; unsigned __u[2]; } __u; (__u.__f) = __x; return (int)(((__u.__u)[1]) >> 31); } }
# 199 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_signbit(long double __x) { auto union { long double __ld; struct { unsigned __m[2]; short __sexp; } __p; } __u; (__u.__ld) = __x; return (int)(((unsigned short)((__u.__p).__sexp)) >> 15); } }
# 200 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnormalf(float __x) { auto float fabsf = __builtin_fabsf(__x); if (__x != __x) { return 0; } return (fabsf < __builtin_inff()) && (fabsf >= (1.175494351e-38F)); } }
# 201 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnormald(double __x) { auto double fabsf = __builtin_fabs(__x); if (__x != __x) { return 0; } return (fabsf < __builtin_inf()) && (fabsf >= (2.225073858507201383e-308)); } }
# 202 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnormal(long double __x) { auto long double fabsf = __builtin_fabsl(__x); if (__x != __x) { return 0; } return (fabsf < __builtin_infl()) && (fabsf >= (3.3621031431120935063e-4932L)); } }
# 262 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double acos(double);
# 263 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float acosf(float);
# 265 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double asin(double);
# 266 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float asinf(float);
# 268 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double atan(double);
# 269 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float atanf(float);
# 271 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double atan2(double, double);
# 272 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float atan2f(float, float);
# 274 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double cos(double);
# 275 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float cosf(float);
# 277 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double sin(double);
# 278 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float sinf(float);
# 280 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double tan(double);
# 281 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float tanf(float);
# 283 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double acosh(double);
# 284 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float acoshf(float);
# 286 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double asinh(double);
# 287 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float asinhf(float);
# 289 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double atanh(double);
# 290 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float atanhf(float);
# 292 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double cosh(double);
# 293 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float coshf(float);
# 295 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double sinh(double);
# 296 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float sinhf(float);
# 298 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double tanh(double);
# 299 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float tanhf(float);
# 301 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double exp(double);
# 302 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float expf(float);
# 304 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double exp2(double);
# 305 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float exp2f(float);
# 307 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double expm1(double);
# 308 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float expm1f(float);
# 310 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double log(double);
# 311 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float logf(float);
# 313 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double log10(double);
# 314 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float log10f(float);
# 316 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double log2(double);
# 317 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float log2f(float);
# 319 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double log1p(double);
# 320 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float log1pf(float);
# 322 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double logb(double);
# 323 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float logbf(float);
# 325 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double modf(double, double *);
# 326 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float modff(float, float *);
# 328 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double ldexp(double, int);
# 329 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float ldexpf(float, int);
# 331 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double frexp(double, int *);
# 332 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float frexpf(float, int *);
# 334 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) int ilogb(double);
# 335 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) int ilogbf(float);
# 337 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double scalbn(double, int);
# 338 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float scalbnf(float, int);
# 340 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double scalbln(double, long);
# 341 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float scalblnf(float, long);
# 343 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double fabs(double);
# 344 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float fabsf(float);
# 346 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double cbrt(double);
# 347 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float cbrtf(float);
# 349 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double hypot(double, double);
# 350 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float hypotf(float, float);
# 352 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double pow(double, double);
# 353 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float powf(float, float);
# 355 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double sqrt(double);
# 356 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float sqrtf(float);
# 358 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double erf(double);
# 359 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float erff(float);
# 361 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double erfc(double);
# 362 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float erfcf(float);
# 364 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double lgamma(double);
# 365 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float lgammaf(float);
# 367 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double tgamma(double);
# 368 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float tgammaf(float);
# 370 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double ceil(double);
# 371 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float ceilf(float);
# 373 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double floor(double);
# 374 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float floorf(float);
# 376 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double nearbyint(double);
# 377 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float nearbyintf(float);
# 379 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double rint(double);
# 380 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float rintf(float);
# 382 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) long lrint(double);
# 383 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) long lrintf(float);
# 385 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double round(double);
# 386 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float roundf(float);
# 388 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) long lround(double);
# 389 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) long lroundf(float);
# 394 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) long long llrint(double);
# 395 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) long long llrintf(float);
# 397 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) long long llround(double);
# 398 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) long long llroundf(float);
# 402 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double trunc(double);
# 403 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float truncf(float);
# 405 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double fmod(double, double);
# 406 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float fmodf(float, float);
# 408 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double remainder(double, double);
# 409 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float remainderf(float, float);
# 411 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double remquo(double, double, int *);
# 412 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float remquof(float, float, int *);
# 414 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double copysign(double, double);
# 415 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float copysignf(float, float);
# 417 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double nan(const char *);
# 418 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float nanf(const char *);
# 420 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double nextafter(double, double);
# 421 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float nextafterf(float, float);
# 423 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double fdim(double, double);
# 424 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float fdimf(float, float);
# 426 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double fmax(double, double);
# 427 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float fmaxf(float, float);
# 429 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double fmin(double, double);
# 430 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float fminf(float, float);
# 432 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) double fma(double, double, double);
# 433 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((__weak__)) float fmaf(float, float, float);
# 435 "/usr/include/architecture/i386/math.h" 3
extern "C" long double acosl(long double);
# 436 "/usr/include/architecture/i386/math.h" 3
extern "C" long double asinl(long double);
# 437 "/usr/include/architecture/i386/math.h" 3
extern "C" long double atanl(long double);
# 438 "/usr/include/architecture/i386/math.h" 3
extern "C" long double atan2l(long double, long double);
# 439 "/usr/include/architecture/i386/math.h" 3
extern "C" long double cosl(long double);
# 440 "/usr/include/architecture/i386/math.h" 3
extern "C" long double sinl(long double);
# 441 "/usr/include/architecture/i386/math.h" 3
extern "C" long double tanl(long double);
# 442 "/usr/include/architecture/i386/math.h" 3
extern "C" long double acoshl(long double);
# 443 "/usr/include/architecture/i386/math.h" 3
extern "C" long double asinhl(long double);
# 444 "/usr/include/architecture/i386/math.h" 3
extern "C" long double atanhl(long double);
# 445 "/usr/include/architecture/i386/math.h" 3
extern "C" long double coshl(long double);
# 446 "/usr/include/architecture/i386/math.h" 3
extern "C" long double sinhl(long double);
# 447 "/usr/include/architecture/i386/math.h" 3
extern "C" long double tanhl(long double);
# 448 "/usr/include/architecture/i386/math.h" 3
extern "C" long double expl(long double);
# 449 "/usr/include/architecture/i386/math.h" 3
extern "C" long double exp2l(long double);
# 450 "/usr/include/architecture/i386/math.h" 3
extern "C" long double expm1l(long double);
# 451 "/usr/include/architecture/i386/math.h" 3
extern "C" long double logl(long double);
# 452 "/usr/include/architecture/i386/math.h" 3
extern "C" long double log10l(long double);
# 453 "/usr/include/architecture/i386/math.h" 3
extern "C" long double log2l(long double);
# 454 "/usr/include/architecture/i386/math.h" 3
extern "C" long double log1pl(long double);
# 455 "/usr/include/architecture/i386/math.h" 3
extern "C" long double logbl(long double);
# 456 "/usr/include/architecture/i386/math.h" 3
extern "C" long double modfl(long double, long double *);
# 457 "/usr/include/architecture/i386/math.h" 3
extern "C" long double ldexpl(long double, int);
# 458 "/usr/include/architecture/i386/math.h" 3
extern "C" long double frexpl(long double, int *);
# 459 "/usr/include/architecture/i386/math.h" 3
extern "C" int ilogbl(long double);
# 460 "/usr/include/architecture/i386/math.h" 3
extern "C" long double scalbnl(long double, int);
# 461 "/usr/include/architecture/i386/math.h" 3
extern "C" long double scalblnl(long double, long);
# 462 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fabsl(long double);
# 463 "/usr/include/architecture/i386/math.h" 3
extern "C" long double cbrtl(long double);
# 464 "/usr/include/architecture/i386/math.h" 3
extern "C" long double hypotl(long double, long double);
# 465 "/usr/include/architecture/i386/math.h" 3
extern "C" long double powl(long double, long double);
# 466 "/usr/include/architecture/i386/math.h" 3
extern "C" long double sqrtl(long double);
# 467 "/usr/include/architecture/i386/math.h" 3
extern "C" long double erfl(long double);
# 468 "/usr/include/architecture/i386/math.h" 3
extern "C" long double erfcl(long double);
# 469 "/usr/include/architecture/i386/math.h" 3
extern "C" long double lgammal(long double);
# 470 "/usr/include/architecture/i386/math.h" 3
extern "C" long double tgammal(long double);
# 471 "/usr/include/architecture/i386/math.h" 3
extern "C" long double ceill(long double);
# 472 "/usr/include/architecture/i386/math.h" 3
extern "C" long double floorl(long double);
# 473 "/usr/include/architecture/i386/math.h" 3
extern "C" long double nearbyintl(long double);
# 474 "/usr/include/architecture/i386/math.h" 3
extern "C" long double rintl(long double);
# 475 "/usr/include/architecture/i386/math.h" 3
extern "C" long lrintl(long double);
# 476 "/usr/include/architecture/i386/math.h" 3
extern "C" long double roundl(long double);
# 477 "/usr/include/architecture/i386/math.h" 3
extern "C" long lroundl(long double);
# 481 "/usr/include/architecture/i386/math.h" 3
extern "C" long long llrintl(long double);
# 482 "/usr/include/architecture/i386/math.h" 3
extern "C" long long llroundl(long double);
# 485 "/usr/include/architecture/i386/math.h" 3
extern "C" long double truncl(long double);
# 486 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fmodl(long double, long double);
# 487 "/usr/include/architecture/i386/math.h" 3
extern "C" long double remainderl(long double, long double);
# 488 "/usr/include/architecture/i386/math.h" 3
extern "C" long double remquol(long double, long double, int *);
# 489 "/usr/include/architecture/i386/math.h" 3
extern "C" long double copysignl(long double, long double);
# 490 "/usr/include/architecture/i386/math.h" 3
extern "C" long double nanl(const char *);
# 491 "/usr/include/architecture/i386/math.h" 3
extern "C" long double nextafterl(long double, long double);
# 492 "/usr/include/architecture/i386/math.h" 3
extern "C" double nexttoward(double, long double);
# 493 "/usr/include/architecture/i386/math.h" 3
extern "C" float nexttowardf(float, long double);
# 494 "/usr/include/architecture/i386/math.h" 3
extern "C" long double nexttowardl(long double, long double);
# 495 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fdiml(long double, long double);
# 496 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fmaxl(long double, long double);
# 497 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fminl(long double, long double);
# 498 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fmal(long double, long double, long double);
# 507 "/usr/include/architecture/i386/math.h" 3
extern "C" double __inf();
# 508 "/usr/include/architecture/i386/math.h" 3
extern "C" float __inff();
# 509 "/usr/include/architecture/i386/math.h" 3
extern "C" long double __infl();
# 510 "/usr/include/architecture/i386/math.h" 3
extern "C" float __nan();
# 513 "/usr/include/architecture/i386/math.h" 3
extern "C" double j0(double);
# 515 "/usr/include/architecture/i386/math.h" 3
extern "C" double j1(double);
# 517 "/usr/include/architecture/i386/math.h" 3
extern "C" double jn(int, double);
# 519 "/usr/include/architecture/i386/math.h" 3
extern "C" double y0(double);
# 521 "/usr/include/architecture/i386/math.h" 3
extern "C" double y1(double);
# 523 "/usr/include/architecture/i386/math.h" 3
extern "C" double yn(int, double);
# 525 "/usr/include/architecture/i386/math.h" 3
extern "C" double scalb(double, double);
# 543 "/usr/include/architecture/i386/math.h" 3
extern "C" { extern int signgam; }
# 557 "/usr/include/architecture/i386/math.h" 3
extern "C" long rinttol(double);
# 559 "/usr/include/architecture/i386/math.h" 3
extern "C" long roundtol(double);
# 597 "/usr/include/architecture/i386/math.h" 3
extern "C" int finite(double);
# 599 "/usr/include/architecture/i386/math.h" 3
extern "C" double gamma(double);
# 610 "/usr/include/architecture/i386/math.h" 3
extern "C" double significand(double);
# 615 "/usr/include/architecture/i386/math.h" 3
extern "C" double drem(double, double);
# 83 "/usr/include/sys/wait.h" 3
typedef
# 79 "/usr/include/sys/wait.h" 3
enum {
# 80 "/usr/include/sys/wait.h" 3
P_ALL,
# 81 "/usr/include/sys/wait.h" 3
P_PID,
# 82 "/usr/include/sys/wait.h" 3
P_PGID
# 83 "/usr/include/sys/wait.h" 3
} idtype_t;
# 90 "/usr/include/sys/wait.h" 3
typedef __darwin_pid_t pid_t;
# 95 "/usr/include/sys/wait.h" 3
typedef __darwin_id_t id_t;
# 39 "/usr/include/i386/signal.h" 3
typedef int sig_atomic_t;
# 43 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_i386_thread_state {
# 45 "/usr/include/mach/i386/_structs.h" 3
unsigned __eax;
# 46 "/usr/include/mach/i386/_structs.h" 3
unsigned __ebx;
# 47 "/usr/include/mach/i386/_structs.h" 3
unsigned __ecx;
# 48 "/usr/include/mach/i386/_structs.h" 3
unsigned __edx;
# 49 "/usr/include/mach/i386/_structs.h" 3
unsigned __edi;
# 50 "/usr/include/mach/i386/_structs.h" 3
unsigned __esi;
# 51 "/usr/include/mach/i386/_structs.h" 3
unsigned __ebp;
# 52 "/usr/include/mach/i386/_structs.h" 3
unsigned __esp;
# 53 "/usr/include/mach/i386/_structs.h" 3
unsigned __ss;
# 54 "/usr/include/mach/i386/_structs.h" 3
unsigned __eflags;
# 55 "/usr/include/mach/i386/_structs.h" 3
unsigned __eip;
# 56 "/usr/include/mach/i386/_structs.h" 3
unsigned __cs;
# 57 "/usr/include/mach/i386/_structs.h" 3
unsigned __ds;
# 58 "/usr/include/mach/i386/_structs.h" 3
unsigned __es;
# 59 "/usr/include/mach/i386/_structs.h" 3
unsigned __fs;
# 60 "/usr/include/mach/i386/_structs.h" 3
unsigned __gs;
# 61 "/usr/include/mach/i386/_structs.h" 3
};
# 89 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_fp_control {
# 91 "/usr/include/mach/i386/_structs.h" 3
unsigned short __invalid:1;
# 92 "/usr/include/mach/i386/_structs.h" 3
unsigned short __denorm:1;
# 93 "/usr/include/mach/i386/_structs.h" 3
unsigned short __zdiv:1;
# 94 "/usr/include/mach/i386/_structs.h" 3
unsigned short __ovrfl:1;
# 95 "/usr/include/mach/i386/_structs.h" 3
unsigned short __undfl:1;
# 96 "/usr/include/mach/i386/_structs.h" 3
unsigned short __precis:1;
# 97 "/usr/include/mach/i386/_structs.h" 3
unsigned short:2;
# 98 "/usr/include/mach/i386/_structs.h" 3
unsigned short __pc:2;
# 104 "/usr/include/mach/i386/_structs.h" 3
unsigned short __rc:2;
# 111 "/usr/include/mach/i386/_structs.h" 3
unsigned short:1;
# 112 "/usr/include/mach/i386/_structs.h" 3
unsigned short:3;
# 113 "/usr/include/mach/i386/_structs.h" 3
};
# 114 "/usr/include/mach/i386/_structs.h" 3
typedef __darwin_fp_control __darwin_fp_control_t;
# 147 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_fp_status {
# 149 "/usr/include/mach/i386/_structs.h" 3
unsigned short __invalid:1;
# 150 "/usr/include/mach/i386/_structs.h" 3
unsigned short __denorm:1;
# 151 "/usr/include/mach/i386/_structs.h" 3
unsigned short __zdiv:1;
# 152 "/usr/include/mach/i386/_structs.h" 3
unsigned short __ovrfl:1;
# 153 "/usr/include/mach/i386/_structs.h" 3
unsigned short __undfl:1;
# 154 "/usr/include/mach/i386/_structs.h" 3
unsigned short __precis:1;
# 155 "/usr/include/mach/i386/_structs.h" 3
unsigned short __stkflt:1;
# 156 "/usr/include/mach/i386/_structs.h" 3
unsigned short __errsumm:1;
# 157 "/usr/include/mach/i386/_structs.h" 3
unsigned short __c0:1;
# 158 "/usr/include/mach/i386/_structs.h" 3
unsigned short __c1:1;
# 159 "/usr/include/mach/i386/_structs.h" 3
unsigned short __c2:1;
# 160 "/usr/include/mach/i386/_structs.h" 3
unsigned short __tos:3;
# 161 "/usr/include/mach/i386/_structs.h" 3
unsigned short __c3:1;
# 162 "/usr/include/mach/i386/_structs.h" 3
unsigned short __busy:1;
# 163 "/usr/include/mach/i386/_structs.h" 3
};
# 164 "/usr/include/mach/i386/_structs.h" 3
typedef __darwin_fp_status __darwin_fp_status_t;
# 191 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_mmst_reg {
# 193 "/usr/include/mach/i386/_structs.h" 3
char __mmst_reg[10];
# 194 "/usr/include/mach/i386/_structs.h" 3
char __mmst_rsrv[6];
# 195 "/usr/include/mach/i386/_structs.h" 3
};
# 210 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_xmm_reg {
# 212 "/usr/include/mach/i386/_structs.h" 3
char __xmm_reg[16];
# 213 "/usr/include/mach/i386/_structs.h" 3
};
# 232 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_i386_float_state {
# 234 "/usr/include/mach/i386/_structs.h" 3
int __fpu_reserved[2];
# 235 "/usr/include/mach/i386/_structs.h" 3
__darwin_fp_control __fpu_fcw;
# 236 "/usr/include/mach/i386/_structs.h" 3
__darwin_fp_status __fpu_fsw;
# 237 "/usr/include/mach/i386/_structs.h" 3
__uint8_t __fpu_ftw;
# 238 "/usr/include/mach/i386/_structs.h" 3
__uint8_t __fpu_rsrv1;
# 239 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_fop;
# 240 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_ip;
# 241 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_cs;
# 242 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_rsrv2;
# 243 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_dp;
# 244 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_ds;
# 245 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_rsrv3;
# 246 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_mxcsr;
# 247 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_mxcsrmask;
# 248 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm0;
# 249 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm1;
# 250 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm2;
# 251 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm3;
# 252 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm4;
# 253 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm5;
# 254 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm6;
# 255 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm7;
# 256 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm0;
# 257 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm1;
# 258 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm2;
# 259 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm3;
# 260 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm4;
# 261 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm5;
# 262 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm6;
# 263 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm7;
# 264 "/usr/include/mach/i386/_structs.h" 3
char __fpu_rsrv4[(14 * 16)];
# 265 "/usr/include/mach/i386/_structs.h" 3
int __fpu_reserved1;
# 266 "/usr/include/mach/i386/_structs.h" 3
};
# 308 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_i386_exception_state {
# 310 "/usr/include/mach/i386/_structs.h" 3
unsigned __trapno;
# 311 "/usr/include/mach/i386/_structs.h" 3
unsigned __err;
# 312 "/usr/include/mach/i386/_structs.h" 3
unsigned __faultvaddr;
# 313 "/usr/include/mach/i386/_structs.h" 3
};
# 326 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_debug_state32 {
# 328 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr0;
# 329 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr1;
# 330 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr2;
# 331 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr3;
# 332 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr4;
# 333 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr5;
# 334 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr6;
# 335 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr7;
# 336 "/usr/include/mach/i386/_structs.h" 3
};
# 358 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_thread_state64 {
# 360 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rax;
# 361 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rbx;
# 362 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rcx;
# 363 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rdx;
# 364 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rdi;
# 365 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rsi;
# 366 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rbp;
# 367 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rsp;
# 368 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r8;
# 369 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r9;
# 370 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r10;
# 371 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r11;
# 372 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r12;
# 373 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r13;
# 374 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r14;
# 375 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r15;
# 376 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rip;
# 377 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rflags;
# 378 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __cs;
# 379 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __fs;
# 380 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __gs;
# 381 "/usr/include/mach/i386/_structs.h" 3
};
# 413 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_float_state64 {
# 415 "/usr/include/mach/i386/_structs.h" 3
int __fpu_reserved[2];
# 416 "/usr/include/mach/i386/_structs.h" 3
__darwin_fp_control __fpu_fcw;
# 417 "/usr/include/mach/i386/_structs.h" 3
__darwin_fp_status __fpu_fsw;
# 418 "/usr/include/mach/i386/_structs.h" 3
__uint8_t __fpu_ftw;
# 419 "/usr/include/mach/i386/_structs.h" 3
__uint8_t __fpu_rsrv1;
# 420 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_fop;
# 423 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_ip;
# 424 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_cs;
# 426 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_rsrv2;
# 429 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_dp;
# 430 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_ds;
# 432 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_rsrv3;
# 433 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_mxcsr;
# 434 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_mxcsrmask;
# 435 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm0;
# 436 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm1;
# 437 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm2;
# 438 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm3;
# 439 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm4;
# 440 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm5;
# 441 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm6;
# 442 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm7;
# 443 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm0;
# 444 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm1;
# 445 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm2;
# 446 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm3;
# 447 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm4;
# 448 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm5;
# 449 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm6;
# 450 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm7;
# 451 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm8;
# 452 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm9;
# 453 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm10;
# 454 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm11;
# 455 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm12;
# 456 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm13;
# 457 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm14;
# 458 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm15;
# 459 "/usr/include/mach/i386/_structs.h" 3
char __fpu_rsrv4[(6 * 16)];
# 460 "/usr/include/mach/i386/_structs.h" 3
int __fpu_reserved1;
# 461 "/usr/include/mach/i386/_structs.h" 3
};
# 517 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_exception_state64 {
# 519 "/usr/include/mach/i386/_structs.h" 3
unsigned __trapno;
# 520 "/usr/include/mach/i386/_structs.h" 3
unsigned __err;
# 521 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __faultvaddr;
# 522 "/usr/include/mach/i386/_structs.h" 3
};
# 535 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_debug_state64 {
# 537 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr0;
# 538 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr1;
# 539 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr2;
# 540 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr3;
# 541 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr4;
# 542 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr5;
# 543 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr6;
# 544 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr7;
# 545 "/usr/include/mach/i386/_structs.h" 3
};
# 48 "/usr/include/i386/_structs.h" 3
struct __darwin_mcontext32 {
# 50 "/usr/include/i386/_structs.h" 3
__darwin_i386_exception_state __es;
# 51 "/usr/include/i386/_structs.h" 3
__darwin_i386_thread_state __ss;
# 52 "/usr/include/i386/_structs.h" 3
__darwin_i386_float_state __fs;
# 53 "/usr/include/i386/_structs.h" 3
};
# 68 "/usr/include/i386/_structs.h" 3
struct __darwin_mcontext64 {
# 70 "/usr/include/i386/_structs.h" 3
__darwin_x86_exception_state64 __es;
# 71 "/usr/include/i386/_structs.h" 3
__darwin_x86_thread_state64 __ss;
# 72 "/usr/include/i386/_structs.h" 3
__darwin_x86_float_state64 __fs;
# 73 "/usr/include/i386/_structs.h" 3
};
# 94 "/usr/include/i386/_structs.h" 3
typedef __darwin_mcontext32 *mcontext_t;
# 75 "/usr/include/sys/_structs.h" 3
struct __darwin_sigaltstack {
# 77 "/usr/include/sys/_structs.h" 3
void *ss_sp;
# 78 "/usr/include/sys/_structs.h" 3
__darwin_size_t ss_size;
# 79 "/usr/include/sys/_structs.h" 3
int ss_flags;
# 80 "/usr/include/sys/_structs.h" 3
};
# 128 "/usr/include/sys/_structs.h" 3
struct __darwin_ucontext {
# 130 "/usr/include/sys/_structs.h" 3
int uc_onstack;
# 131 "/usr/include/sys/_structs.h" 3
__darwin_sigset_t uc_sigmask;
# 132 "/usr/include/sys/_structs.h" 3
__darwin_sigaltstack uc_stack;
# 133 "/usr/include/sys/_structs.h" 3
__darwin_ucontext *uc_link;
# 134 "/usr/include/sys/_structs.h" 3
__darwin_size_t uc_mcsize;
# 135 "/usr/include/sys/_structs.h" 3
__darwin_mcontext32 *uc_mcontext;
# 139 "/usr/include/sys/_structs.h" 3
};
# 218 "/usr/include/sys/_structs.h" 3
typedef __darwin_sigaltstack stack_t;
# 227 "/usr/include/sys/_structs.h" 3
typedef __darwin_ucontext ucontext_t;
# 163 "/usr/include/sys/signal.h" 3
typedef __darwin_pthread_attr_t pthread_attr_t;
# 168 "/usr/include/sys/signal.h" 3
typedef __darwin_sigset_t sigset_t;
# 178 "/usr/include/sys/signal.h" 3
typedef __darwin_uid_t uid_t;
# 181 "/usr/include/sys/signal.h" 3
union sigval {
# 183 "/usr/include/sys/signal.h" 3
int sival_int;
# 184 "/usr/include/sys/signal.h" 3
void *sival_ptr;
# 185 "/usr/include/sys/signal.h" 3
};
# 191 "/usr/include/sys/signal.h" 3
struct sigevent {
# 192 "/usr/include/sys/signal.h" 3
int sigev_notify;
# 193 "/usr/include/sys/signal.h" 3
int sigev_signo;
# 194 "/usr/include/sys/signal.h" 3
sigval sigev_value;
# 195 "/usr/include/sys/signal.h" 3
void (*sigev_notify_function)(sigval);
# 196 "/usr/include/sys/signal.h" 3
pthread_attr_t *sigev_notify_attributes;
# 197 "/usr/include/sys/signal.h" 3
};
# 211 "/usr/include/sys/signal.h" 3
typedef
# 200 "/usr/include/sys/signal.h" 3
struct __siginfo {
# 201 "/usr/include/sys/signal.h" 3
int si_signo;
# 202 "/usr/include/sys/signal.h" 3
int si_errno;
# 203 "/usr/include/sys/signal.h" 3
int si_code;
# 204 "/usr/include/sys/signal.h" 3
pid_t si_pid;
# 205 "/usr/include/sys/signal.h" 3
uid_t si_uid;
# 206 "/usr/include/sys/signal.h" 3
int si_status;
# 207 "/usr/include/sys/signal.h" 3
void *si_addr;
# 208 "/usr/include/sys/signal.h" 3
sigval si_value;
# 209 "/usr/include/sys/signal.h" 3
long si_band;
# 210 "/usr/include/sys/signal.h" 3
unsigned long __pad[7];
# 211 "/usr/include/sys/signal.h" 3
} siginfo_t;
# 292 "/usr/include/sys/signal.h" 3
union __sigaction_u {
# 293 "/usr/include/sys/signal.h" 3
void (*__sa_handler)(int);
# 294 "/usr/include/sys/signal.h" 3
void (*__sa_sigaction)(int, __siginfo *, void *);
# 296 "/usr/include/sys/signal.h" 3
};
# 299 "/usr/include/sys/signal.h" 3
struct __sigaction {
# 300 "/usr/include/sys/signal.h" 3
::__sigaction_u __sigaction_u;
# 301 "/usr/include/sys/signal.h" 3
void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
# 302 "/usr/include/sys/signal.h" 3
sigset_t sa_mask;
# 303 "/usr/include/sys/signal.h" 3
int sa_flags;
# 304 "/usr/include/sys/signal.h" 3
};
# 309 "/usr/include/sys/signal.h" 3
struct sigaction {
# 310 "/usr/include/sys/signal.h" 3
::__sigaction_u __sigaction_u;
# 311 "/usr/include/sys/signal.h" 3
sigset_t sa_mask;
# 312 "/usr/include/sys/signal.h" 3
int sa_flags;
# 313 "/usr/include/sys/signal.h" 3
};
# 354 "/usr/include/sys/signal.h" 3
typedef void (*sig_t)(int);
# 371 "/usr/include/sys/signal.h" 3
struct sigvec {
# 372 "/usr/include/sys/signal.h" 3
void (*sv_handler)(int);
# 373 "/usr/include/sys/signal.h" 3
int sv_mask;
# 374 "/usr/include/sys/signal.h" 3
int sv_flags;
# 375 "/usr/include/sys/signal.h" 3
};
# 390 "/usr/include/sys/signal.h" 3
struct sigstack {
# 391 "/usr/include/sys/signal.h" 3
char *ss_sp;
# 392 "/usr/include/sys/signal.h" 3
int ss_onstack;
# 393 "/usr/include/sys/signal.h" 3
};
# 413 "/usr/include/sys/signal.h" 3
extern "C" void (*signal(int, void (*)(int)))(int);
# 100 "/usr/include/sys/_structs.h" 3
struct timeval {
# 102 "/usr/include/sys/_structs.h" 3
__darwin_time_t tv_sec;
# 103 "/usr/include/sys/_structs.h" 3
__darwin_suseconds_t tv_usec;
# 104 "/usr/include/sys/_structs.h" 3
};
# 88 "/usr/include/sys/resource.h" 3
typedef __uint64_t rlim_t;
# 142 "/usr/include/sys/resource.h" 3
struct rusage {
# 143 "/usr/include/sys/resource.h" 3
timeval ru_utime;
# 144 "/usr/include/sys/resource.h" 3
timeval ru_stime;
# 153 "/usr/include/sys/resource.h" 3
long ru_maxrss;
# 155 "/usr/include/sys/resource.h" 3
long ru_ixrss;
# 156 "/usr/include/sys/resource.h" 3
long ru_idrss;
# 157 "/usr/include/sys/resource.h" 3
long ru_isrss;
# 158 "/usr/include/sys/resource.h" 3
long ru_minflt;
# 159 "/usr/include/sys/resource.h" 3
long ru_majflt;
# 160 "/usr/include/sys/resource.h" 3
long ru_nswap;
# 161 "/usr/include/sys/resource.h" 3
long ru_inblock;
# 162 "/usr/include/sys/resource.h" 3
long ru_oublock;
# 163 "/usr/include/sys/resource.h" 3
long ru_msgsnd;
# 164 "/usr/include/sys/resource.h" 3
long ru_msgrcv;
# 165 "/usr/include/sys/resource.h" 3
long ru_nsignals;
# 166 "/usr/include/sys/resource.h" 3
long ru_nvcsw;
# 167 "/usr/include/sys/resource.h" 3
long ru_nivcsw;
# 170 "/usr/include/sys/resource.h" 3
};
# 213 "/usr/include/sys/resource.h" 3
struct rlimit {
# 214 "/usr/include/sys/resource.h" 3
rlim_t rlim_cur;
# 215 "/usr/include/sys/resource.h" 3
rlim_t rlim_max;
# 216 "/usr/include/sys/resource.h" 3
};
# 236 "/usr/include/sys/resource.h" 3
extern "C" int getpriority(int, id_t);
# 238 "/usr/include/sys/resource.h" 3
extern "C" int getiopolicy_np(int, int);
# 240 "/usr/include/sys/resource.h" 3
extern "C" int getrlimit(int, rlimit *) __asm__("_getrlimit$UNIX2003");
# 241 "/usr/include/sys/resource.h" 3
extern "C" int getrusage(int, rusage *);
# 242 "/usr/include/sys/resource.h" 3
extern "C" int setpriority(int, id_t, int);
# 244 "/usr/include/sys/resource.h" 3
extern "C" int setiopolicy_np(int, int, int);
# 246 "/usr/include/sys/resource.h" 3
extern "C" int setrlimit(int, const rlimit *) __asm__("_setrlimit$UNIX2003");
# 46 "/usr/include/libkern/i386/_OSByteOrder.h" 3
static inline __uint16_t _OSSwapInt16(__uint16_t
# 47 "/usr/include/libkern/i386/_OSByteOrder.h" 3
_data)
# 49 "/usr/include/libkern/i386/_OSByteOrder.h" 3
{
# 50 "/usr/include/libkern/i386/_OSByteOrder.h" 3
return (_data << 8) | (_data >> 8);
# 51 "/usr/include/libkern/i386/_OSByteOrder.h" 3
}
# 55 "/usr/include/libkern/i386/_OSByteOrder.h" 3
static inline __uint32_t _OSSwapInt32(__uint32_t
# 56 "/usr/include/libkern/i386/_OSByteOrder.h" 3
_data)
# 58 "/usr/include/libkern/i386/_OSByteOrder.h" 3
{
# 59 "/usr/include/libkern/i386/_OSByteOrder.h" 3
__asm__("bswap   %0" : "+r" (_data));
# 60 "/usr/include/libkern/i386/_OSByteOrder.h" 3
return _data;
# 61 "/usr/include/libkern/i386/_OSByteOrder.h" 3
}
# 66 "/usr/include/libkern/i386/_OSByteOrder.h" 3
static inline __uint64_t _OSSwapInt64(__uint64_t
# 67 "/usr/include/libkern/i386/_OSByteOrder.h" 3
_data)
# 69 "/usr/include/libkern/i386/_OSByteOrder.h" 3
{
# 70 "/usr/include/libkern/i386/_OSByteOrder.h" 3
__asm__("bswap   %%eax\n\tbswap   %%edx\n\txchgl   %%eax, %%edx" : "+A" (_data));
# 74 "/usr/include/libkern/i386/_OSByteOrder.h" 3
return _data;
# 75 "/usr/include/libkern/i386/_OSByteOrder.h" 3
}
# 201 "/usr/include/sys/wait.h" 3
union wait {
# 202 "/usr/include/sys/wait.h" 3
int w_status;
# 206 "/usr/include/sys/wait.h" 3
struct {
# 208 "/usr/include/sys/wait.h" 3
unsigned w_Termsig:7;
# 209 "/usr/include/sys/wait.h" 3
unsigned w_Coredump:1;
# 210 "/usr/include/sys/wait.h" 3
unsigned w_Retcode:8;
# 211 "/usr/include/sys/wait.h" 3
unsigned w_Filler:16;
# 219 "/usr/include/sys/wait.h" 3
} w_T;
# 225 "/usr/include/sys/wait.h" 3
struct {
# 227 "/usr/include/sys/wait.h" 3
unsigned w_Stopval:8;
# 228 "/usr/include/sys/wait.h" 3
unsigned w_Stopsig:8;
# 229 "/usr/include/sys/wait.h" 3
unsigned w_Filler:16;
# 236 "/usr/include/sys/wait.h" 3
} w_S;
# 237 "/usr/include/sys/wait.h" 3
};
# 255 "/usr/include/sys/wait.h" 3
extern "C" pid_t wait(int *) __asm__("_wait$UNIX2003");
# 256 "/usr/include/sys/wait.h" 3
extern "C" pid_t waitpid(pid_t, int *, int) __asm__("_waitpid$UNIX2003");
# 258 "/usr/include/sys/wait.h" 3
extern "C" int waitid(idtype_t, id_t, siginfo_t *, int) __asm__("_waitid$UNIX2003");
# 261 "/usr/include/sys/wait.h" 3
extern "C" pid_t wait3(int *, int, rusage *);
# 262 "/usr/include/sys/wait.h" 3
extern "C" pid_t wait4(pid_t, int *, int, rusage *);
# 36 "/usr/include/alloca.h" 3
extern "C" void *alloca(size_t);
# 81 "/usr/include/stdlib.h" 3
typedef __darwin_ct_rune_t ct_rune_t;
# 86 "/usr/include/stdlib.h" 3
typedef __darwin_rune_t rune_t;
# 100 "/usr/include/stdlib.h" 3
typedef
# 97 "/usr/include/stdlib.h" 3
struct div_t {
# 98 "/usr/include/stdlib.h" 3
int quot;
# 99 "/usr/include/stdlib.h" 3
int rem;
# 100 "/usr/include/stdlib.h" 3
} div_t;
# 105 "/usr/include/stdlib.h" 3
typedef
# 102 "/usr/include/stdlib.h" 3
struct ldiv_t {
# 103 "/usr/include/stdlib.h" 3
long quot;
# 104 "/usr/include/stdlib.h" 3
long rem;
# 105 "/usr/include/stdlib.h" 3
} ldiv_t;
# 111 "/usr/include/stdlib.h" 3
typedef
# 108 "/usr/include/stdlib.h" 3
struct lldiv_t {
# 109 "/usr/include/stdlib.h" 3
long long quot;
# 110 "/usr/include/stdlib.h" 3
long long rem;
# 111 "/usr/include/stdlib.h" 3
} lldiv_t;
# 134 "/usr/include/stdlib.h" 3
extern int __mb_cur_max;
# 145 "/usr/include/stdlib.h" 3
extern "C" void abort() __attribute__((__noreturn__));
# 146 "/usr/include/stdlib.h" 3
extern "C" __attribute__((__weak__)) int abs(int) __attribute__((__const__));
# 147 "/usr/include/stdlib.h" 3
extern "C" int atexit(void (*)(void));
# 148 "/usr/include/stdlib.h" 3
extern "C" double atof(const char *);
# 149 "/usr/include/stdlib.h" 3
extern "C" int atoi(const char *);
# 150 "/usr/include/stdlib.h" 3
extern "C" long atol(const char *);
# 153 "/usr/include/stdlib.h" 3
extern "C" long long atoll(const char *);
# 155 "/usr/include/stdlib.h" 3
extern "C" void *bsearch(const void *, const void *, size_t, size_t, int (*)(const void *, const void *));
# 157 "/usr/include/stdlib.h" 3
extern "C" void *calloc(size_t, size_t);
# 158 "/usr/include/stdlib.h" 3
extern "C" div_t div(int, int) __attribute__((__const__));
# 159 "/usr/include/stdlib.h" 3
extern "C" void exit(int) __attribute__((__noreturn__));
# 160 "/usr/include/stdlib.h" 3
extern "C" void free(void *);
# 161 "/usr/include/stdlib.h" 3
extern "C" char *getenv(const char *);
# 162 "/usr/include/stdlib.h" 3
extern "C" __attribute__((__weak__)) long labs(long) __attribute__((__const__));
# 163 "/usr/include/stdlib.h" 3
extern "C" ldiv_t ldiv(long, long) __attribute__((__const__));
# 166 "/usr/include/stdlib.h" 3
extern "C" __attribute__((__weak__)) long long llabs(long long);
# 167 "/usr/include/stdlib.h" 3
extern "C" lldiv_t lldiv(long long, long long);
# 169 "/usr/include/stdlib.h" 3
extern "C" void *malloc(size_t);
# 170 "/usr/include/stdlib.h" 3
extern "C" int mblen(const char *, size_t);
# 171 "/usr/include/stdlib.h" 3
extern "C" size_t mbstowcs(wchar_t *, const char *, size_t);
# 172 "/usr/include/stdlib.h" 3
extern "C" int mbtowc(wchar_t *, const char *, size_t);
# 173 "/usr/include/stdlib.h" 3
extern "C" void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
# 175 "/usr/include/stdlib.h" 3
extern "C" int rand();
# 176 "/usr/include/stdlib.h" 3
extern "C" void *realloc(void *, size_t);
# 177 "/usr/include/stdlib.h" 3
extern "C" void srand(unsigned);
# 178 "/usr/include/stdlib.h" 3
extern "C" double strtod(const char *, char **) __asm__("_strtod$UNIX2003");
# 179 "/usr/include/stdlib.h" 3
extern "C" float strtof(const char *, char **) __asm__("_strtof$UNIX2003");
# 180 "/usr/include/stdlib.h" 3
extern "C" long strtol(const char *, char **, int);
# 182 "/usr/include/stdlib.h" 3
extern "C" long double strtold(const char *, char **);
# 185 "/usr/include/stdlib.h" 3
extern "C" long long strtoll(const char *, char **, int);
# 188 "/usr/include/stdlib.h" 3
extern "C" unsigned long strtoul(const char *, char **, int);
# 191 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtoull(const char *, char **, int);
# 193 "/usr/include/stdlib.h" 3
extern "C" int system(const char *) __asm__("_system$UNIX2003");
# 194 "/usr/include/stdlib.h" 3
extern "C" size_t wcstombs(char *, const wchar_t *, size_t);
# 195 "/usr/include/stdlib.h" 3
extern "C" int wctomb(char *, wchar_t);
# 198 "/usr/include/stdlib.h" 3
extern "C" void _Exit(int) __attribute__((__noreturn__));
# 199 "/usr/include/stdlib.h" 3
extern "C" long a64l(const char *);
# 200 "/usr/include/stdlib.h" 3
extern "C" double drand48();
# 201 "/usr/include/stdlib.h" 3
extern "C" char *ecvt(double, int, int *, int *);
# 202 "/usr/include/stdlib.h" 3
extern "C" double erand48(unsigned short [3]);
# 203 "/usr/include/stdlib.h" 3
extern "C" char *fcvt(double, int, int *, int *);
# 204 "/usr/include/stdlib.h" 3
extern "C" char *gcvt(double, int, char *);
# 205 "/usr/include/stdlib.h" 3
extern "C" int getsubopt(char **, char *const *, char **);
# 206 "/usr/include/stdlib.h" 3
extern "C" int grantpt(int);
# 208 "/usr/include/stdlib.h" 3
extern "C" char *initstate(unsigned, char *, size_t);
# 212 "/usr/include/stdlib.h" 3
extern "C" long jrand48(unsigned short [3]);
# 213 "/usr/include/stdlib.h" 3
extern "C" char *l64a(long);
# 214 "/usr/include/stdlib.h" 3
extern "C" void lcong48(unsigned short [7]);
# 215 "/usr/include/stdlib.h" 3
extern "C" long lrand48();
# 216 "/usr/include/stdlib.h" 3
extern "C" char *mktemp(char *);
# 217 "/usr/include/stdlib.h" 3
extern "C" int mkstemp(char *);
# 218 "/usr/include/stdlib.h" 3
extern "C" long mrand48();
# 219 "/usr/include/stdlib.h" 3
extern "C" long nrand48(unsigned short [3]);
# 220 "/usr/include/stdlib.h" 3
extern "C" int posix_openpt(int);
# 221 "/usr/include/stdlib.h" 3
extern "C" char *ptsname(int);
# 222 "/usr/include/stdlib.h" 3
extern "C" int putenv(char *) __asm__("_putenv$UNIX2003");
# 223 "/usr/include/stdlib.h" 3
extern "C" long random();
# 224 "/usr/include/stdlib.h" 3
extern "C" int rand_r(unsigned *);
# 226 "/usr/include/stdlib.h" 3
extern "C" char *realpath(const char *, char *) __asm__("_realpath$DARWIN_EXTSN");
# 231 "/usr/include/stdlib.h" 3
extern "C" unsigned short *seed48(unsigned short [3]);
# 232 "/usr/include/stdlib.h" 3
extern "C" int setenv(const char *, const char *, int) __asm__("_setenv$UNIX2003");
# 234 "/usr/include/stdlib.h" 3
extern "C" void setkey(const char *) __asm__("_setkey$UNIX2003");
# 238 "/usr/include/stdlib.h" 3
extern "C" char *setstate(const char *);
# 239 "/usr/include/stdlib.h" 3
extern "C" void srand48(long);
# 241 "/usr/include/stdlib.h" 3
extern "C" void srandom(unsigned);
# 245 "/usr/include/stdlib.h" 3
extern "C" int unlockpt(int);
# 247 "/usr/include/stdlib.h" 3
extern "C" int unsetenv(const char *) __asm__("_unsetenv$UNIX2003");
# 78 "/usr/include/i386/types.h" 3
extern "C" { typedef signed char int8_t; }
# 80 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned char u_int8_t; }
# 83 "/usr/include/i386/types.h" 3
extern "C" { typedef short int16_t; }
# 85 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned short u_int16_t; }
# 88 "/usr/include/i386/types.h" 3
extern "C" { typedef int int32_t; }
# 90 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned u_int32_t; }
# 93 "/usr/include/i386/types.h" 3
extern "C" { typedef long long int64_t; }
# 95 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned long long u_int64_t; }
# 100 "/usr/include/i386/types.h" 3
extern "C" { typedef int32_t register_t; }
# 105 "/usr/include/i386/types.h" 3
extern "C" { typedef __darwin_intptr_t intptr_t; }
# 109 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned long uintptr_t; }
# 114 "/usr/include/i386/types.h" 3
extern "C" { typedef u_int64_t user_addr_t; }
# 115 "/usr/include/i386/types.h" 3
extern "C" { typedef u_int64_t user_size_t; }
# 116 "/usr/include/i386/types.h" 3
extern "C" { typedef int64_t user_ssize_t; }
# 117 "/usr/include/i386/types.h" 3
extern "C" { typedef int64_t user_long_t; }
# 118 "/usr/include/i386/types.h" 3
extern "C" { typedef u_int64_t user_ulong_t; }
# 119 "/usr/include/i386/types.h" 3
extern "C" { typedef int64_t user_time_t; }
# 125 "/usr/include/i386/types.h" 3
extern "C" { typedef u_int64_t syscall_arg_t; }
# 257 "/usr/include/stdlib.h" 3
extern "C" { typedef __darwin_dev_t dev_t; }
# 262 "/usr/include/stdlib.h" 3
extern "C" { typedef __darwin_mode_t mode_t; }
# 267 "/usr/include/stdlib.h" 3
extern "C" u_int32_t arc4random();
# 268 "/usr/include/stdlib.h" 3
extern "C" void arc4random_addrandom(unsigned char *, int);
# 269 "/usr/include/stdlib.h" 3
extern "C" void arc4random_stir();
# 272 "/usr/include/stdlib.h" 3
extern "C" char *cgetcap(char *, const char *, int);
# 273 "/usr/include/stdlib.h" 3
extern "C" int cgetclose();
# 274 "/usr/include/stdlib.h" 3
extern "C" int cgetent(char **, char **, const char *);
# 275 "/usr/include/stdlib.h" 3
extern "C" int cgetfirst(char **, char **);
# 276 "/usr/include/stdlib.h" 3
extern "C" int cgetmatch(const char *, const char *);
# 277 "/usr/include/stdlib.h" 3
extern "C" int cgetnext(char **, char **);
# 278 "/usr/include/stdlib.h" 3
extern "C" int cgetnum(char *, const char *, long *);
# 279 "/usr/include/stdlib.h" 3
extern "C" int cgetset(const char *);
# 280 "/usr/include/stdlib.h" 3
extern "C" int cgetstr(char *, const char *, char **);
# 281 "/usr/include/stdlib.h" 3
extern "C" int cgetustr(char *, const char *, char **);
# 283 "/usr/include/stdlib.h" 3
extern "C" int daemon(int, int) __asm__("_daemon$1050") __attribute__((__deprecated__));
# 284 "/usr/include/stdlib.h" 3
extern "C" char *devname(dev_t, mode_t);
# 285 "/usr/include/stdlib.h" 3
extern "C" char *devname_r(dev_t, mode_t, char *, int);
# 286 "/usr/include/stdlib.h" 3
extern "C" char *getbsize(int *, long *);
# 287 "/usr/include/stdlib.h" 3
extern "C" int getloadavg(double [], int);
# 289 "/usr/include/stdlib.h" 3
extern "C" const char *getprogname();
# 291 "/usr/include/stdlib.h" 3
extern "C" int heapsort(void *, size_t, size_t, int (*)(const void *, const void *));
# 293 "/usr/include/stdlib.h" 3
extern "C" int mergesort(void *, size_t, size_t, int (*)(const void *, const void *));
# 295 "/usr/include/stdlib.h" 3
extern "C" void qsort_r(void *, size_t, size_t, void *, int (*)(void *, const void *, const void *));
# 297 "/usr/include/stdlib.h" 3
extern "C" int radixsort(const unsigned char **, int, const unsigned char *, unsigned);
# 299 "/usr/include/stdlib.h" 3
extern "C" void setprogname(const char *);
# 300 "/usr/include/stdlib.h" 3
extern "C" int sradixsort(const unsigned char **, int, const unsigned char *, unsigned);
# 302 "/usr/include/stdlib.h" 3
extern "C" void sranddev();
# 303 "/usr/include/stdlib.h" 3
extern "C" void srandomdev();
# 304 "/usr/include/stdlib.h" 3
extern "C" void *reallocf(void *, size_t);
# 307 "/usr/include/stdlib.h" 3
extern "C" long long strtoq(const char *, char **, int);
# 309 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtouq(const char *, char **, int);
# 311 "/usr/include/stdlib.h" 3
extern "C" { extern char *suboptarg; }
# 312 "/usr/include/stdlib.h" 3
extern "C" void *valloc(size_t);
# 64 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++config.h" 3
namespace __gnu_debug_def { }
# 66 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++config.h" 3
namespace __gnu_debug {
# 68 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++config.h" 3
using namespace __gnu_debug_def;
# 69 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++config.h" 3
}
# 75 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
namespace __gnu_internal {
# 77 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef char __one;
# 78 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef char __two[2];
# 80 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp> extern __one __test_type(int _Tp::*);
# 82 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp> extern __two &__test_type(...);
# 84 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
}
# 87 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
namespace __gnu_cxx {
# 89 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Iterator, class _Container> class __normal_iterator;
# 91 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
}
# 93 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __true_type { };
# 94 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __false_type { };
# 96 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
namespace std {
# 98 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<bool >
# 99 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __truth_type {
# 100 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __false_type __type; };
# 103 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __truth_type< true> {
# 104 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type; };
# 108 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Sp, class _Tp>
# 109 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __traitor {
# 111 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = (((bool)_Sp::__value) || ((bool)_Tp::__value))};
# 112 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef typename __truth_type< (((bool)_Sp::__value) || ((bool)_Tp::__value))> ::__type __type;
# 113 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 116 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class , class >
# 117 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __are_same {
# 119 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value};
# 120 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 121 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 123 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 124 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __are_same< _Tp, _Tp> {
# 126 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 127 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 128 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 131 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class , bool >
# 132 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __enable_if {
# 134 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 136 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 137 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __enable_if< _Tp, true> {
# 139 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef _Tp __type;
# 140 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 143 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 144 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_void {
# 146 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value};
# 147 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 148 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 151 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_void< void> {
# 153 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 154 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 155 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 160 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 161 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_integer {
# 163 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value};
# 164 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 165 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 171 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< bool> {
# 173 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 174 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 175 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 178 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char> {
# 180 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 181 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 182 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 185 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< signed char> {
# 187 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 188 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 189 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 192 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned char> {
# 194 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 195 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 196 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 200 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< wchar_t> {
# 202 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 203 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 204 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 208 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< short> {
# 210 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 211 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 212 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 215 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned short> {
# 217 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 218 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 219 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 222 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< int> {
# 224 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 225 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 226 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 229 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned> {
# 231 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 232 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 233 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 236 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long> {
# 238 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 239 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 240 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 243 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long> {
# 245 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 246 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 247 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 250 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long long> {
# 252 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 253 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 254 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 257 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long long> {
# 259 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 260 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 261 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 266 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 267 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_floating {
# 269 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value};
# 270 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 271 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 275 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_floating< float> {
# 277 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 278 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 279 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 282 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_floating< double> {
# 284 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 285 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 286 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 289 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<> struct __is_floating< long double> {
# 291 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 292 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 293 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 298 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 299 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_pointer {
# 301 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value};
# 302 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 303 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 305 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 306 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_pointer< _Tp *> {
# 308 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 309 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 310 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 315 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 316 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_normal_iterator {
# 318 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value};
# 319 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 320 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 322 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Iterator, class _Container>
# 323 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> > {
# 326 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value { __value = 1};
# 327 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 328 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 333 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 334 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> > {
# 336 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 341 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 342 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_fundamental : public __traitor< __is_void< _Tp> , __is_arithmetic< _Tp> > {
# 344 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 349 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 350 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> > {
# 352 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 357 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
template<class _Tp>
# 358 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
struct __is_pod {
# 361 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
enum __cuda___value {
# 362 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
__value = (sizeof((__gnu_internal::__test_type< _Tp> (0))) != sizeof(__gnu_internal::__one))
# 364 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 365 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
};
# 367 "/usr/include/c++/4.0.0/bits/cpp_type_traits.h" 3
}
# 81 "/usr/include/c++/4.0.0/cmath" 3
namespace std {
# 85 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> extern inline _Tp __cmath_power(_Tp, unsigned);
# 88 "/usr/include/c++/4.0.0/cmath" 3
inline double abs(double __x)
# 89 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_fabs(__x); }
# 92 "/usr/include/c++/4.0.0/cmath" 3
inline float abs(float __x)
# 93 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_fabsf(__x); }
# 96 "/usr/include/c++/4.0.0/cmath" 3
inline long double abs(long double __x)
# 97 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_fabsl(__x); }
# 99 "/usr/include/c++/4.0.0/cmath" 3
using ::acos;
# 102 "/usr/include/c++/4.0.0/cmath" 3
inline float acos(float __x)
# 103 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_acosf(__x); }
# 106 "/usr/include/c++/4.0.0/cmath" 3
inline long double acos(long double __x)
# 107 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_acosl(__x); }
# 109 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 111 "/usr/include/c++/4.0.0/cmath" 3
acos(_Tp __x)
# 112 "/usr/include/c++/4.0.0/cmath" 3
{
# 113 "/usr/include/c++/4.0.0/cmath" 3
return __builtin_acos(__x);
# 114 "/usr/include/c++/4.0.0/cmath" 3
}
# 116 "/usr/include/c++/4.0.0/cmath" 3
using ::asin;
# 119 "/usr/include/c++/4.0.0/cmath" 3
inline float asin(float __x)
# 120 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_asinf(__x); }
# 123 "/usr/include/c++/4.0.0/cmath" 3
inline long double asin(long double __x)
# 124 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_asinl(__x); }
# 126 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 128 "/usr/include/c++/4.0.0/cmath" 3
asin(_Tp __x)
# 129 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_asin(__x); }
# 131 "/usr/include/c++/4.0.0/cmath" 3
using ::atan;
# 134 "/usr/include/c++/4.0.0/cmath" 3
inline float atan(float __x)
# 135 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_atanf(__x); }
# 138 "/usr/include/c++/4.0.0/cmath" 3
inline long double atan(long double __x)
# 139 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_atanl(__x); }
# 141 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 143 "/usr/include/c++/4.0.0/cmath" 3
atan(_Tp __x)
# 144 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_atan(__x); }
# 146 "/usr/include/c++/4.0.0/cmath" 3
using ::atan2;
# 149 "/usr/include/c++/4.0.0/cmath" 3
inline float atan2(float __y, float __x)
# 150 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_atan2f(__y, __x); }
# 153 "/usr/include/c++/4.0.0/cmath" 3
inline long double atan2(long double __y, long double __x)
# 154 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_atan2l(__y, __x); }
# 156 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp, class _Up> inline typename __enable_if< double, (__is_integer< _Tp> ::__value && __is_integer< _Up> ::__value)> ::__type
# 159 "/usr/include/c++/4.0.0/cmath" 3
atan2(_Tp __y, _Up __x)
# 160 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_atan2(__y, __x); }
# 162 "/usr/include/c++/4.0.0/cmath" 3
using ::ceil;
# 165 "/usr/include/c++/4.0.0/cmath" 3
inline float ceil(float __x)
# 166 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_ceilf(__x); }
# 169 "/usr/include/c++/4.0.0/cmath" 3
inline long double ceil(long double __x)
# 170 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_ceill(__x); }
# 172 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 174 "/usr/include/c++/4.0.0/cmath" 3
ceil(_Tp __x)
# 175 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_ceil(__x); }
# 177 "/usr/include/c++/4.0.0/cmath" 3
using ::cos;
# 180 "/usr/include/c++/4.0.0/cmath" 3
inline float cos(float __x)
# 181 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_cosf(__x); }
# 184 "/usr/include/c++/4.0.0/cmath" 3
inline long double cos(long double __x)
# 185 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_cosl(__x); }
# 187 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 189 "/usr/include/c++/4.0.0/cmath" 3
cos(_Tp __x)
# 190 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_cos(__x); }
# 192 "/usr/include/c++/4.0.0/cmath" 3
using ::cosh;
# 195 "/usr/include/c++/4.0.0/cmath" 3
inline float cosh(float __x)
# 196 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_coshf(__x); }
# 199 "/usr/include/c++/4.0.0/cmath" 3
inline long double cosh(long double __x)
# 200 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_coshl(__x); }
# 202 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 204 "/usr/include/c++/4.0.0/cmath" 3
cosh(_Tp __x)
# 205 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_cosh(__x); }
# 207 "/usr/include/c++/4.0.0/cmath" 3
using ::exp;
# 210 "/usr/include/c++/4.0.0/cmath" 3
inline float exp(float __x)
# 211 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_expf(__x); }
# 214 "/usr/include/c++/4.0.0/cmath" 3
inline long double exp(long double __x)
# 215 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_expl(__x); }
# 217 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 219 "/usr/include/c++/4.0.0/cmath" 3
exp(_Tp __x)
# 220 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_exp(__x); }
# 222 "/usr/include/c++/4.0.0/cmath" 3
using ::fabs;
# 225 "/usr/include/c++/4.0.0/cmath" 3
inline float fabs(float __x)
# 226 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_fabsf(__x); }
# 229 "/usr/include/c++/4.0.0/cmath" 3
inline long double fabs(long double __x)
# 230 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_fabsl(__x); }
# 232 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 234 "/usr/include/c++/4.0.0/cmath" 3
fabs(_Tp __x)
# 235 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_fabs(__x); }
# 237 "/usr/include/c++/4.0.0/cmath" 3
using ::floor;
# 240 "/usr/include/c++/4.0.0/cmath" 3
inline float floor(float __x)
# 241 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_floorf(__x); }
# 244 "/usr/include/c++/4.0.0/cmath" 3
inline long double floor(long double __x)
# 245 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_floorl(__x); }
# 247 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 249 "/usr/include/c++/4.0.0/cmath" 3
floor(_Tp __x)
# 250 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_floor(__x); }
# 252 "/usr/include/c++/4.0.0/cmath" 3
using ::fmod;
# 255 "/usr/include/c++/4.0.0/cmath" 3
inline float fmod(float __x, float __y)
# 256 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_fmodf(__x, __y); }
# 259 "/usr/include/c++/4.0.0/cmath" 3
inline long double fmod(long double __x, long double __y)
# 260 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_fmodl(__x, __y); }
# 262 "/usr/include/c++/4.0.0/cmath" 3
using ::frexp;
# 265 "/usr/include/c++/4.0.0/cmath" 3
inline float frexp(float __x, int *__exp)
# 266 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_frexpf(__x, __exp); }
# 269 "/usr/include/c++/4.0.0/cmath" 3
inline long double frexp(long double __x, int *__exp)
# 270 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_frexpl(__x, __exp); }
# 272 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 274 "/usr/include/c++/4.0.0/cmath" 3
frexp(_Tp __x, int *__exp)
# 275 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_frexp(__x, __exp); }
# 277 "/usr/include/c++/4.0.0/cmath" 3
using ::ldexp;
# 280 "/usr/include/c++/4.0.0/cmath" 3
inline float ldexp(float __x, int __exp)
# 281 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_ldexpf(__x, __exp); }
# 284 "/usr/include/c++/4.0.0/cmath" 3
inline long double ldexp(long double __x, int __exp)
# 285 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_ldexpl(__x, __exp); }
# 287 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 289 "/usr/include/c++/4.0.0/cmath" 3
ldexp(_Tp __x, int __exp)
# 290 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_ldexp(__x, __exp); }
# 292 "/usr/include/c++/4.0.0/cmath" 3
using ::log;
# 295 "/usr/include/c++/4.0.0/cmath" 3
inline float log(float __x)
# 296 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_logf(__x); }
# 299 "/usr/include/c++/4.0.0/cmath" 3
inline long double log(long double __x)
# 300 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_logl(__x); }
# 302 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 304 "/usr/include/c++/4.0.0/cmath" 3
log(_Tp __x)
# 305 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_log(__x); }
# 307 "/usr/include/c++/4.0.0/cmath" 3
using ::log10;
# 310 "/usr/include/c++/4.0.0/cmath" 3
inline float log10(float __x)
# 311 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_log10f(__x); }
# 314 "/usr/include/c++/4.0.0/cmath" 3
inline long double log10(long double __x)
# 315 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_log10l(__x); }
# 317 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 319 "/usr/include/c++/4.0.0/cmath" 3
log10(_Tp __x)
# 320 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_log10(__x); }
# 322 "/usr/include/c++/4.0.0/cmath" 3
using ::modf;
# 325 "/usr/include/c++/4.0.0/cmath" 3
inline float modf(float __x, float *__iptr)
# 326 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_modff(__x, __iptr); }
# 329 "/usr/include/c++/4.0.0/cmath" 3
inline long double modf(long double __x, long double *__iptr)
# 330 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_modfl(__x, __iptr); }
# 332 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline _Tp
# 334 "/usr/include/c++/4.0.0/cmath" 3
__pow_helper(_Tp __x, int __n)
# 335 "/usr/include/c++/4.0.0/cmath" 3
{
# 336 "/usr/include/c++/4.0.0/cmath" 3
return (__n < 0) ? (((_Tp)(1)) / __cmath_power(__x, -__n)) : (__cmath_power(__x, __n));
# 339 "/usr/include/c++/4.0.0/cmath" 3
}
# 341 "/usr/include/c++/4.0.0/cmath" 3
using ::pow;
# 344 "/usr/include/c++/4.0.0/cmath" 3
inline float pow(float __x, float __y)
# 345 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_powf(__x, __y); }
# 348 "/usr/include/c++/4.0.0/cmath" 3
inline long double pow(long double __x, long double __y)
# 349 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_powl(__x, __y); }
# 352 "/usr/include/c++/4.0.0/cmath" 3
inline double pow(double __x, int __i)
# 353 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_powi(__x, __i); }
# 356 "/usr/include/c++/4.0.0/cmath" 3
inline float pow(float __x, int __n)
# 357 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_powif(__x, __n); }
# 360 "/usr/include/c++/4.0.0/cmath" 3
inline long double pow(long double __x, int __n)
# 361 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_powil(__x, __n); }
# 363 "/usr/include/c++/4.0.0/cmath" 3
using ::sin;
# 366 "/usr/include/c++/4.0.0/cmath" 3
inline float sin(float __x)
# 367 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_sinf(__x); }
# 370 "/usr/include/c++/4.0.0/cmath" 3
inline long double sin(long double __x)
# 371 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_sinl(__x); }
# 373 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 375 "/usr/include/c++/4.0.0/cmath" 3
sin(_Tp __x)
# 376 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_sin(__x); }
# 378 "/usr/include/c++/4.0.0/cmath" 3
using ::sinh;
# 381 "/usr/include/c++/4.0.0/cmath" 3
inline float sinh(float __x)
# 382 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_sinhf(__x); }
# 385 "/usr/include/c++/4.0.0/cmath" 3
inline long double sinh(long double __x)
# 386 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_sinhl(__x); }
# 388 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 390 "/usr/include/c++/4.0.0/cmath" 3
sinh(_Tp __x)
# 391 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_sinh(__x); }
# 393 "/usr/include/c++/4.0.0/cmath" 3
using ::sqrt;
# 396 "/usr/include/c++/4.0.0/cmath" 3
inline float sqrt(float __x)
# 397 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_sqrtf(__x); }
# 400 "/usr/include/c++/4.0.0/cmath" 3
inline long double sqrt(long double __x)
# 401 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_sqrtl(__x); }
# 403 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 405 "/usr/include/c++/4.0.0/cmath" 3
sqrt(_Tp __x)
# 406 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_sqrt(__x); }
# 408 "/usr/include/c++/4.0.0/cmath" 3
using ::tan;
# 411 "/usr/include/c++/4.0.0/cmath" 3
inline float tan(float __x)
# 412 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_tanf(__x); }
# 415 "/usr/include/c++/4.0.0/cmath" 3
inline long double tan(long double __x)
# 416 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_tanl(__x); }
# 418 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 420 "/usr/include/c++/4.0.0/cmath" 3
tan(_Tp __x)
# 421 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_tan(__x); }
# 423 "/usr/include/c++/4.0.0/cmath" 3
using ::tanh;
# 426 "/usr/include/c++/4.0.0/cmath" 3
inline float tanh(float __x)
# 427 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_tanhf(__x); }
# 430 "/usr/include/c++/4.0.0/cmath" 3
inline long double tanh(long double __x)
# 431 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_tanhl(__x); }
# 433 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> inline typename __enable_if< double, (__is_integer< _Tp> ::__value)> ::__type
# 435 "/usr/include/c++/4.0.0/cmath" 3
tanh(_Tp __x)
# 436 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_tanh(__x); }
# 437 "/usr/include/c++/4.0.0/cmath" 3
}
# 444 "/usr/include/c++/4.0.0/cmath" 3
namespace __gnu_cxx {
# 446 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 448 "/usr/include/c++/4.0.0/cmath" 3
__capture_fpclassify(_Tp __f) { return (sizeof(__f) == sizeof(float)) ? __fpclassifyf((float)__f) : ((sizeof(__f) == sizeof(double)) ? __fpclassifyd((double)__f) : __fpclassify((long double)__f)); }
# 450 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 452 "/usr/include/c++/4.0.0/cmath" 3
__capture_isfinite(_Tp __f) { return (sizeof(__f) == sizeof(float)) ? __inline_isfinitef((float)__f) : ((sizeof(__f) == sizeof(double)) ? __inline_isfinited((double)__f) : __inline_isfinite((long double)__f)); }
# 454 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 456 "/usr/include/c++/4.0.0/cmath" 3
__capture_isinf(_Tp __f) { return (sizeof(__f) == sizeof(float)) ? __inline_isinff((float)__f) : ((sizeof(__f) == sizeof(double)) ? __inline_isinfd((double)__f) : __inline_isinf((long double)__f)); }
# 458 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 460 "/usr/include/c++/4.0.0/cmath" 3
__capture_isnan(_Tp __f) { return (sizeof(__f) == sizeof(float)) ? __inline_isnanf((float)__f) : ((sizeof(__f) == sizeof(double)) ? __inline_isnand((double)__f) : __inline_isnan((long double)__f)); }
# 462 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 464 "/usr/include/c++/4.0.0/cmath" 3
__capture_isnormal(_Tp __f) { return (sizeof(__f) == sizeof(float)) ? __inline_isnormalf((float)__f) : ((sizeof(__f) == sizeof(double)) ? __inline_isnormald((double)__f) : __inline_isnormal((long double)__f)); }
# 466 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 468 "/usr/include/c++/4.0.0/cmath" 3
__capture_signbit(_Tp __f) { return (sizeof(__f) == sizeof(float)) ? __inline_signbitf((float)__f) : ((sizeof(__f) == sizeof(double)) ? __inline_signbitd((double)__f) : __inline_signbit((long double)__f)); }
# 470 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 472 "/usr/include/c++/4.0.0/cmath" 3
__capture_isgreater(_Tp __f1, _Tp __f2)
# 473 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_isgreater(__f1, __f2); }
# 475 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 477 "/usr/include/c++/4.0.0/cmath" 3
__capture_isgreaterequal(_Tp __f1, _Tp __f2)
# 478 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_isgreaterequal(__f1, __f2); }
# 480 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 482 "/usr/include/c++/4.0.0/cmath" 3
__capture_isless(_Tp __f1, _Tp __f2) { return __builtin_isless(__f1, __f2); }
# 484 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 486 "/usr/include/c++/4.0.0/cmath" 3
__capture_islessequal(_Tp __f1, _Tp __f2)
# 487 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_islessequal(__f1, __f2); }
# 489 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 491 "/usr/include/c++/4.0.0/cmath" 3
__capture_islessgreater(_Tp __f1, _Tp __f2)
# 492 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_islessgreater(__f1, __f2); }
# 494 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 496 "/usr/include/c++/4.0.0/cmath" 3
__capture_isunordered(_Tp __f1, _Tp __f2)
# 497 "/usr/include/c++/4.0.0/cmath" 3
{ return __builtin_isunordered(__f1, __f2); }
# 498 "/usr/include/c++/4.0.0/cmath" 3
}
# 514 "/usr/include/c++/4.0.0/cmath" 3
namespace std {
# 516 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 518 "/usr/include/c++/4.0.0/cmath" 3
fpclassify(_Tp __f) { return __gnu_cxx::__capture_fpclassify(__f); }
# 520 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 522 "/usr/include/c++/4.0.0/cmath" 3
isfinite(_Tp __f) { return __gnu_cxx::__capture_isfinite(__f); }
# 524 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 526 "/usr/include/c++/4.0.0/cmath" 3
isinf(_Tp __f) { return __gnu_cxx::__capture_isinf(__f); }
# 528 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 530 "/usr/include/c++/4.0.0/cmath" 3
isnan(_Tp __f) { return __gnu_cxx::__capture_isnan(__f); }
# 532 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 534 "/usr/include/c++/4.0.0/cmath" 3
isnormal(_Tp __f) { return __gnu_cxx::__capture_isnormal(__f); }
# 536 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 538 "/usr/include/c++/4.0.0/cmath" 3
signbit(_Tp __f) { return __gnu_cxx::__capture_signbit(__f); }
# 540 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 542 "/usr/include/c++/4.0.0/cmath" 3
isgreater(_Tp __f1, _Tp __f2)
# 543 "/usr/include/c++/4.0.0/cmath" 3
{ return __gnu_cxx::__capture_isgreater(__f1, __f2); }
# 545 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 547 "/usr/include/c++/4.0.0/cmath" 3
isgreaterequal(_Tp __f1, _Tp __f2)
# 548 "/usr/include/c++/4.0.0/cmath" 3
{ return __gnu_cxx::__capture_isgreaterequal(__f1, __f2); }
# 550 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 552 "/usr/include/c++/4.0.0/cmath" 3
isless(_Tp __f1, _Tp __f2)
# 553 "/usr/include/c++/4.0.0/cmath" 3
{ return __gnu_cxx::__capture_isless(__f1, __f2); }
# 555 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 557 "/usr/include/c++/4.0.0/cmath" 3
islessequal(_Tp __f1, _Tp __f2)
# 558 "/usr/include/c++/4.0.0/cmath" 3
{ return __gnu_cxx::__capture_islessequal(__f1, __f2); }
# 560 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 562 "/usr/include/c++/4.0.0/cmath" 3
islessgreater(_Tp __f1, _Tp __f2)
# 563 "/usr/include/c++/4.0.0/cmath" 3
{ return __gnu_cxx::__capture_islessgreater(__f1, __f2); }
# 565 "/usr/include/c++/4.0.0/cmath" 3
template<class _Tp> int
# 567 "/usr/include/c++/4.0.0/cmath" 3
isunordered(_Tp __f1, _Tp __f2)
# 568 "/usr/include/c++/4.0.0/cmath" 3
{ return __gnu_cxx::__capture_isunordered(__f1, __f2); }
# 569 "/usr/include/c++/4.0.0/cmath" 3
}
# 35 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
namespace std {
# 37 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
template<class _Tp> inline _Tp
# 39 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
__cmath_power(_Tp __x, unsigned __n)
# 40 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
{
# 41 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
auto _Tp __y = ((__n % (2)) ? __x : 1);
# 43 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
while (__n >>= 1)
# 44 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
{
# 45 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
__x = __x * __x;
# 46 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
if (__n % (2)) {
# 47 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
__y = __y * __x; }
# 48 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
}
# 50 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
return __y;
# 51 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
}
# 52 "/usr/include/c++/4.0.0/bits/cmath.tcc" 3
}
# 50 "/usr/include/c++/4.0.0/cstddef" 3
namespace std {
# 52 "/usr/include/c++/4.0.0/cstddef" 3
using ::ptrdiff_t;
# 53 "/usr/include/c++/4.0.0/cstddef" 3
using ::size_t;
# 54 "/usr/include/c++/4.0.0/cstddef" 3
}
# 90 "/usr/include/c++/4.0.0/cstdlib" 3
namespace std {
# 93 "/usr/include/c++/4.0.0/cstdlib" 3
using ::div_t;
# 94 "/usr/include/c++/4.0.0/cstdlib" 3
using ::ldiv_t;
# 96 "/usr/include/c++/4.0.0/cstdlib" 3
using ::abort;
# 97 "/usr/include/c++/4.0.0/cstdlib" 3
using ::abs;
# 98 "/usr/include/c++/4.0.0/cstdlib" 3
using ::atexit;
# 99 "/usr/include/c++/4.0.0/cstdlib" 3
using ::atof;
# 100 "/usr/include/c++/4.0.0/cstdlib" 3
using ::atoi;
# 101 "/usr/include/c++/4.0.0/cstdlib" 3
using ::atol;
# 102 "/usr/include/c++/4.0.0/cstdlib" 3
using ::bsearch;
# 103 "/usr/include/c++/4.0.0/cstdlib" 3
using ::calloc;
# 104 "/usr/include/c++/4.0.0/cstdlib" 3
using ::div;
# 105 "/usr/include/c++/4.0.0/cstdlib" 3
using ::exit;
# 106 "/usr/include/c++/4.0.0/cstdlib" 3
using ::free;
# 107 "/usr/include/c++/4.0.0/cstdlib" 3
using ::getenv;
# 108 "/usr/include/c++/4.0.0/cstdlib" 3
using ::labs;
# 109 "/usr/include/c++/4.0.0/cstdlib" 3
using ::ldiv;
# 110 "/usr/include/c++/4.0.0/cstdlib" 3
using ::malloc;
# 112 "/usr/include/c++/4.0.0/cstdlib" 3
using ::mblen;
# 113 "/usr/include/c++/4.0.0/cstdlib" 3
using ::mbstowcs;
# 114 "/usr/include/c++/4.0.0/cstdlib" 3
using ::mbtowc;
# 116 "/usr/include/c++/4.0.0/cstdlib" 3
using ::qsort;
# 117 "/usr/include/c++/4.0.0/cstdlib" 3
using ::rand;
# 118 "/usr/include/c++/4.0.0/cstdlib" 3
using ::realloc;
# 119 "/usr/include/c++/4.0.0/cstdlib" 3
using ::srand;
# 120 "/usr/include/c++/4.0.0/cstdlib" 3
using ::strtod;
# 121 "/usr/include/c++/4.0.0/cstdlib" 3
using ::strtol;
# 122 "/usr/include/c++/4.0.0/cstdlib" 3
using ::strtoul;
# 123 "/usr/include/c++/4.0.0/cstdlib" 3
using ::system;
# 125 "/usr/include/c++/4.0.0/cstdlib" 3
using ::wcstombs;
# 126 "/usr/include/c++/4.0.0/cstdlib" 3
using ::wctomb;
# 130 "/usr/include/c++/4.0.0/cstdlib" 3
inline long abs(long __i) { return labs(__i); }
# 133 "/usr/include/c++/4.0.0/cstdlib" 3
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); }
# 143 "/usr/include/c++/4.0.0/cstdlib" 3
}
# 156 "/usr/include/c++/4.0.0/cstdlib" 3
namespace __gnu_cxx {
# 159 "/usr/include/c++/4.0.0/cstdlib" 3
using ::lldiv_t;
# 165 "/usr/include/c++/4.0.0/cstdlib" 3
using ::_Exit;
# 169 "/usr/include/c++/4.0.0/cstdlib" 3
inline long long abs(long long __x) { return (__x >= (0)) ? __x : (-__x); }
# 172 "/usr/include/c++/4.0.0/cstdlib" 3
inline long long llabs(long long __x) { return (__x >= (0)) ? __x : (-__x); }
# 176 "/usr/include/c++/4.0.0/cstdlib" 3
inline lldiv_t div(long long __n, long long __d)
# 177 "/usr/include/c++/4.0.0/cstdlib" 3
{ auto lldiv_t __q; (__q.quot) = __n / __d; (__q.rem) = __n % __d; return __q; }
# 180 "/usr/include/c++/4.0.0/cstdlib" 3
inline lldiv_t lldiv(long long __n, long long __d)
# 181 "/usr/include/c++/4.0.0/cstdlib" 3
{ auto lldiv_t __q; (__q.quot) = __n / __d; (__q.rem) = __n % __d; return __q; }
# 192 "/usr/include/c++/4.0.0/cstdlib" 3
using ::atoll;
# 193 "/usr/include/c++/4.0.0/cstdlib" 3
using ::strtoll;
# 194 "/usr/include/c++/4.0.0/cstdlib" 3
using ::strtoull;
# 196 "/usr/include/c++/4.0.0/cstdlib" 3
using ::strtof;
# 197 "/usr/include/c++/4.0.0/cstdlib" 3
using ::strtold;
# 198 "/usr/include/c++/4.0.0/cstdlib" 3
}
# 200 "/usr/include/c++/4.0.0/cstdlib" 3
namespace std {
# 203 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::lldiv_t;
# 205 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::_Exit;
# 206 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::abs;
# 207 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::llabs;
# 209 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::div;
# 210 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::lldiv;
# 212 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::atoll;
# 213 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::strtof;
# 214 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::strtoll;
# 215 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::strtoull;
# 216 "/usr/include/c++/4.0.0/cstdlib" 3
using __gnu_cxx::strtold;
# 217 "/usr/include/c++/4.0.0/cstdlib" 3
}
# 413 "/usr/local/cuda/bin/../include/math_functions.h"
using namespace std;
# 432 "/usr/local/cuda/bin/../include/math_functions.h"
extern __attribute__((__weak__)) int __signbitl(long double);
# 434 "/usr/local/cuda/bin/../include/math_functions.h"
extern __attribute__((__weak__)) int __isinfl(long double);
# 436 "/usr/local/cuda/bin/../include/math_functions.h"
extern __attribute__((__weak__)) int __isnanl(long double);
# 441 "/usr/local/cuda/bin/../include/math_functions.h"
extern __attribute__((__weak__)) int __isfinite(long double);
# 471 "/usr/local/cuda/bin/../include/math_functions.h"
namespace __gnu_cxx {
# 473 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline long long abs(long long);
# 474 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 476 "/usr/local/cuda/bin/../include/math_functions.h"
namespace std {
# 478 "/usr/local/cuda/bin/../include/math_functions.h"
template<class T> extern inline T __pow_helper(T, int);
# 479 "/usr/local/cuda/bin/../include/math_functions.h"
template<class T> extern inline T __cmath_power(T, unsigned);
# 480 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 536 "/usr/local/cuda/bin/../include/math_functions.h"
namespace std {
# 538 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline long abs(long);
# 539 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float abs(float);
# 540 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline double abs(double);
# 541 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float fabs(float);
# 542 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float ceil(float);
# 543 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float floor(float);
# 544 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float sqrt(float);
# 545 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float pow(float, float);
# 546 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float pow(float, int);
# 547 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline double pow(double, int);
# 548 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float log(float);
# 549 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float log10(float);
# 550 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float fmod(float, float);
# 551 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float modf(float, float *);
# 552 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float exp(float);
# 553 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float frexp(float, int *);
# 554 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float ldexp(float, int);
# 555 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float asin(float);
# 556 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float sin(float);
# 557 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float sinh(float);
# 558 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float acos(float);
# 559 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float cos(float);
# 560 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float cosh(float);
# 561 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float atan(float);
# 562 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float atan2(float, float);
# 563 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float tan(float);
# 564 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float tanh(float);
# 566 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 568 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float logb(float a)
# 569 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 570 "/usr/local/cuda/bin/../include/math_functions.h"
return logbf(a);
# 571 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 573 "/usr/local/cuda/bin/../include/math_functions.h"
static inline int ilogb(float a)
# 574 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 575 "/usr/local/cuda/bin/../include/math_functions.h"
return ilogbf(a);
# 576 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 578 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float scalbn(float a, int b)
# 579 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 580 "/usr/local/cuda/bin/../include/math_functions.h"
return scalbnf(a, b);
# 581 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 583 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float scalbln(float a, long b)
# 584 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 585 "/usr/local/cuda/bin/../include/math_functions.h"
return scalblnf(a, b);
# 586 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 588 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float exp2(float a)
# 589 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 590 "/usr/local/cuda/bin/../include/math_functions.h"
return exp2f(a);
# 591 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 593 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float exp10(float a)
# 594 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 595 "/usr/local/cuda/bin/../include/math_functions.h"
return exp10f(a);
# 596 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 598 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float expm1(float a)
# 599 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 600 "/usr/local/cuda/bin/../include/math_functions.h"
return expm1f(a);
# 601 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 603 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float log2(float a)
# 604 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 605 "/usr/local/cuda/bin/../include/math_functions.h"
return log2f(a);
# 606 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 608 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float log1p(float a)
# 609 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 610 "/usr/local/cuda/bin/../include/math_functions.h"
return log1pf(a);
# 611 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 613 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float rsqrt(float a)
# 614 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 615 "/usr/local/cuda/bin/../include/math_functions.h"
return rsqrtf(a);
# 616 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 618 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float acosh(float a)
# 619 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 620 "/usr/local/cuda/bin/../include/math_functions.h"
return acoshf(a);
# 621 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 623 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float asinh(float a)
# 624 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 625 "/usr/local/cuda/bin/../include/math_functions.h"
return asinhf(a);
# 626 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 628 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float atanh(float a)
# 629 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 630 "/usr/local/cuda/bin/../include/math_functions.h"
return atanhf(a);
# 631 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 633 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float hypot(float a, float b)
# 634 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 635 "/usr/local/cuda/bin/../include/math_functions.h"
return hypotf(a, b);
# 636 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 638 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float cbrt(float a)
# 639 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 640 "/usr/local/cuda/bin/../include/math_functions.h"
return cbrtf(a);
# 641 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 643 "/usr/local/cuda/bin/../include/math_functions.h"
static inline void sincos(float a, float *sptr, float *cptr)
# 644 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 645 "/usr/local/cuda/bin/../include/math_functions.h"
sincosf(a, sptr, cptr);
# 646 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 648 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erf(float a)
# 649 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 650 "/usr/local/cuda/bin/../include/math_functions.h"
return erff(a);
# 651 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 653 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erfc(float a)
# 654 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 655 "/usr/local/cuda/bin/../include/math_functions.h"
return erfcf(a);
# 656 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 658 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float lgamma(float a)
# 659 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 660 "/usr/local/cuda/bin/../include/math_functions.h"
return lgammaf(a);
# 661 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 663 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float tgamma(float a)
# 664 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 665 "/usr/local/cuda/bin/../include/math_functions.h"
return tgammaf(a);
# 666 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 668 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float copysign(float a, float b)
# 669 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 670 "/usr/local/cuda/bin/../include/math_functions.h"
return copysignf(a, b);
# 671 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 673 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double copysign(double a, float b)
# 674 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 675 "/usr/local/cuda/bin/../include/math_functions.h"
return copysign(a, (double)b);
# 676 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 678 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float copysign(float a, double b)
# 679 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 680 "/usr/local/cuda/bin/../include/math_functions.h"
return copysignf(a, (float)b);
# 681 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 683 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float nextafter(float a, float b)
# 684 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 685 "/usr/local/cuda/bin/../include/math_functions.h"
return nextafterf(a, b);
# 686 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 688 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float remainder(float a, float b)
# 689 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 690 "/usr/local/cuda/bin/../include/math_functions.h"
return remainderf(a, b);
# 691 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 693 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float remquo(float a, float b, int *quo)
# 694 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 695 "/usr/local/cuda/bin/../include/math_functions.h"
return remquof(a, b, quo);
# 696 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 698 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float round(float a)
# 699 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 700 "/usr/local/cuda/bin/../include/math_functions.h"
return roundf(a);
# 701 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 703 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long lround(float a)
# 704 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 705 "/usr/local/cuda/bin/../include/math_functions.h"
return lroundf(a);
# 706 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 708 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long llround(float a)
# 709 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 710 "/usr/local/cuda/bin/../include/math_functions.h"
return llroundf(a);
# 711 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 713 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float trunc(float a)
# 714 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 715 "/usr/local/cuda/bin/../include/math_functions.h"
return truncf(a);
# 716 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 718 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float rint(float a)
# 719 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 720 "/usr/local/cuda/bin/../include/math_functions.h"
return rintf(a);
# 721 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 723 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long lrint(float a)
# 724 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 725 "/usr/local/cuda/bin/../include/math_functions.h"
return lrintf(a);
# 726 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 728 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long llrint(float a)
# 729 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 730 "/usr/local/cuda/bin/../include/math_functions.h"
return llrintf(a);
# 731 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 733 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float nearbyint(float a)
# 734 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 735 "/usr/local/cuda/bin/../include/math_functions.h"
return nearbyintf(a);
# 736 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 738 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fdim(float a, float b)
# 739 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 740 "/usr/local/cuda/bin/../include/math_functions.h"
return fdimf(a, b);
# 741 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 743 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fma(float a, float b, float c)
# 744 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 745 "/usr/local/cuda/bin/../include/math_functions.h"
return fmaf(a, b, c);
# 746 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 748 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned min(unsigned a, unsigned b)
# 749 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 750 "/usr/local/cuda/bin/../include/math_functions.h"
return umin(a, b);
# 751 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 753 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned min(int a, unsigned b)
# 754 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 755 "/usr/local/cuda/bin/../include/math_functions.h"
return umin((unsigned)a, b);
# 756 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 758 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned min(unsigned a, int b)
# 759 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 760 "/usr/local/cuda/bin/../include/math_functions.h"
return umin(a, (unsigned)b);
# 761 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 763 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float min(float a, float b)
# 764 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 765 "/usr/local/cuda/bin/../include/math_functions.h"
return fminf(a, b);
# 766 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 768 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double min(double a, double b)
# 769 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 770 "/usr/local/cuda/bin/../include/math_functions.h"
return fmin(a, b);
# 771 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 773 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double min(float a, double b)
# 774 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 775 "/usr/local/cuda/bin/../include/math_functions.h"
return fmin((double)a, b);
# 776 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 778 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double min(double a, float b)
# 779 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 780 "/usr/local/cuda/bin/../include/math_functions.h"
return fmin(a, (double)b);
# 781 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 783 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned max(unsigned a, unsigned b)
# 784 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 785 "/usr/local/cuda/bin/../include/math_functions.h"
return umax(a, b);
# 786 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 788 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned max(int a, unsigned b)
# 789 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 790 "/usr/local/cuda/bin/../include/math_functions.h"
return umax((unsigned)a, b);
# 791 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 793 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned max(unsigned a, int b)
# 794 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 795 "/usr/local/cuda/bin/../include/math_functions.h"
return umax(a, (unsigned)b);
# 796 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 798 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float max(float a, float b)
# 799 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 800 "/usr/local/cuda/bin/../include/math_functions.h"
return fmaxf(a, b);
# 801 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 803 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double max(double a, double b)
# 804 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 805 "/usr/local/cuda/bin/../include/math_functions.h"
return fmax(a, b);
# 806 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 808 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double max(float a, double b)
# 809 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 810 "/usr/local/cuda/bin/../include/math_functions.h"
return fmax((double)a, b);
# 811 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 813 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double max(double a, float b)
# 814 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 815 "/usr/local/cuda/bin/../include/math_functions.h"
return fmax(a, (double)b);
# 816 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 76 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 77 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaSetupArgument(T
# 78 "/usr/local/cuda/bin/../include/cuda_runtime.h"
arg, size_t
# 79 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset)
# 81 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 82 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaSetupArgument((const void *)(&arg), sizeof(T), offset);
# 83 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 93 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyToSymbol(char *
# 94 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 95 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 96 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 97 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 98 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice)
# 100 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 101 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbol((const char *)symbol, src, count, offset, kind);
# 102 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 104 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 105 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyToSymbol(const T &
# 106 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 107 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 108 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 109 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 110 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice)
# 112 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 113 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbol((const char *)(&symbol), src, count, offset, kind);
# 114 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 116 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyToSymbolAsync(char *
# 117 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 118 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 119 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 120 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, cudaMemcpyKind
# 121 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind, cudaStream_t
# 122 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream)
# 124 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 125 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbolAsync((const char *)symbol, src, count, offset, kind, stream);
# 126 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 128 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 129 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
# 130 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 131 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 132 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 133 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, cudaMemcpyKind
# 134 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind, cudaStream_t
# 135 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream)
# 137 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 138 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbolAsync((const char *)(&symbol), src, count, offset, kind, stream);
# 139 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 147 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyFromSymbol(void *
# 148 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, char *
# 149 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 150 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 151 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 152 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost)
# 154 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 155 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbol(dst, (const char *)symbol, count, offset, kind);
# 156 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 158 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 159 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyFromSymbol(void *
# 160 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, const T &
# 161 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 162 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 163 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 164 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost)
# 166 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 167 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbol(dst, (const char *)(&symbol), count, offset, kind);
# 168 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 170 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyFromSymbolAsync(void *
# 171 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, char *
# 172 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 173 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 174 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, cudaMemcpyKind
# 175 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind, cudaStream_t
# 176 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream)
# 178 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 179 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbolAsync(dst, (const char *)symbol, count, offset, kind, stream);
# 180 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 182 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 183 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
# 184 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, const T &
# 185 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 186 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 187 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, cudaMemcpyKind
# 188 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind, cudaStream_t
# 189 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream)
# 191 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 192 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbolAsync(dst, (const char *)(&symbol), count, offset, kind, stream);
# 193 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 195 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaGetSymbolAddress(void **
# 196 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, char *
# 197 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 199 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 200 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolAddress(devPtr, (const char *)symbol);
# 201 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 203 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 204 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaGetSymbolAddress(void **
# 205 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, const T &
# 206 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 208 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 209 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolAddress(devPtr, (const char *)(&symbol));
# 210 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 218 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaGetSymbolSize(size_t *
# 219 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, char *
# 220 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 222 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 223 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolSize(size, (const char *)symbol);
# 224 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 226 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 227 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaGetSymbolSize(size_t *
# 228 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, const T &
# 229 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 231 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 232 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolSize(size, (const char *)(&symbol));
# 233 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 241 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 242 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture(size_t *
# 243 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 244 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 245 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, const cudaChannelFormatDesc &
# 246 "/usr/local/cuda/bin/../include/cuda_runtime.h"
desc, size_t
# 247 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size = (((2147483647) * 2U) + 1U))
# 249 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 250 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture(offset, &tex, devPtr, (&desc), size);
# 251 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 253 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 254 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture(size_t *
# 255 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 256 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 257 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t
# 258 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size = (((2147483647) * 2U) + 1U))
# 260 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 261 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size);
# 262 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 264 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 265 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 266 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const cudaArray *
# 267 "/usr/local/cuda/bin/../include/cuda_runtime.h"
array, const cudaChannelFormatDesc &
# 268 "/usr/local/cuda/bin/../include/cuda_runtime.h"
desc)
# 270 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 271 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTextureToArray(&tex, array, (&desc));
# 272 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 274 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 275 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 276 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const cudaArray *
# 277 "/usr/local/cuda/bin/../include/cuda_runtime.h"
array)
# 279 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 280 "/usr/local/cuda/bin/../include/cuda_runtime.h"
auto cudaChannelFormatDesc desc;
# 281 "/usr/local/cuda/bin/../include/cuda_runtime.h"
auto cudaError_t err = cudaGetChannelDesc(&desc, array);
# 283 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return (err == (cudaSuccess)) ? (cudaBindTextureToArray(tex, array, desc)) : err;
# 284 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 292 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 293 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaUnbindTexture(const texture< T, dim, readMode> &
# 294 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex)
# 296 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 297 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaUnbindTexture(&tex);
# 298 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 306 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 307 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaGetTextureAlignmentOffset(size_t *
# 308 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 309 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex)
# 311 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 312 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetTextureAlignmentOffset(offset, &tex);
# 313 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 321 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 322 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaLaunch(T *
# 323 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 325 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 326 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaLaunch((const char *)symbol);
# 327 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 53 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef unsigned CUdeviceptr; }
# 55 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef int CUdevice; }
# 56 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUctx_st *CUcontext; }
# 57 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUmod_st *CUmodule; }
# 58 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUfunc_st *CUfunction; }
# 59 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUarray_st *CUarray; }
# 60 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUtexref_st *CUtexref; }
# 61 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUevent_st *CUevent; }
# 62 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUstream_st *CUstream; }
# 79 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 73 "/usr/local/cuda/bin/../include/cuda.h"
enum CUctx_flags_enum {
# 74 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_AUTO,
# 75 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_SPIN,
# 76 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_YIELD,
# 77 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_MASK,
# 78 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_FLAGS_MASK = 3
# 79 "/usr/local/cuda/bin/../include/cuda.h"
} CUctx_flags; }
# 93 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 84 "/usr/local/cuda/bin/../include/cuda.h"
enum CUarray_format_enum {
# 85 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT8 = 1,
# 86 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT16,
# 87 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT32,
# 88 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_SIGNED_INT8 = 8,
# 89 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_SIGNED_INT16,
# 90 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_SIGNED_INT32,
# 91 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_HALF = 16,
# 92 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_FLOAT = 32
# 93 "/usr/local/cuda/bin/../include/cuda.h"
} CUarray_format; }
# 102 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 98 "/usr/local/cuda/bin/../include/cuda.h"
enum CUaddress_mode_enum {
# 99 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_WRAP,
# 100 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_CLAMP,
# 101 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_MIRROR
# 102 "/usr/local/cuda/bin/../include/cuda.h"
} CUaddress_mode; }
# 110 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 107 "/usr/local/cuda/bin/../include/cuda.h"
enum CUfilter_mode_enum {
# 108 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_FILTER_MODE_POINT,
# 109 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_FILTER_MODE_LINEAR
# 110 "/usr/local/cuda/bin/../include/cuda.h"
} CUfilter_mode; }
# 135 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 115 "/usr/local/cuda/bin/../include/cuda.h"
enum CUdevice_attribute_enum {
# 116 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
# 117 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X,
# 118 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y,
# 119 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z,
# 120 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X,
# 121 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y,
# 122 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z,
# 123 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK,
# 124 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
# 125 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY,
# 126 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_WARP_SIZE,
# 127 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_PITCH,
# 128 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK,
# 129 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
# 130 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_CLOCK_RATE,
# 131 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT,
# 133 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP,
# 134 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT
# 135 "/usr/local/cuda/bin/../include/cuda.h"
} CUdevice_attribute; }
# 151 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 140 "/usr/local/cuda/bin/../include/cuda.h"
struct CUdevprop_st {
# 141 "/usr/local/cuda/bin/../include/cuda.h"
int maxThreadsPerBlock;
# 142 "/usr/local/cuda/bin/../include/cuda.h"
int maxThreadsDim[3];
# 143 "/usr/local/cuda/bin/../include/cuda.h"
int maxGridSize[3];
# 144 "/usr/local/cuda/bin/../include/cuda.h"
int sharedMemPerBlock;
# 145 "/usr/local/cuda/bin/../include/cuda.h"
int totalConstantMemory;
# 146 "/usr/local/cuda/bin/../include/cuda.h"
int SIMDWidth;
# 147 "/usr/local/cuda/bin/../include/cuda.h"
int memPitch;
# 148 "/usr/local/cuda/bin/../include/cuda.h"
int regsPerBlock;
# 149 "/usr/local/cuda/bin/../include/cuda.h"
int clockRate;
# 150 "/usr/local/cuda/bin/../include/cuda.h"
int textureAlign;
# 151 "/usr/local/cuda/bin/../include/cuda.h"
} CUdevprop; }
# 160 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 156 "/usr/local/cuda/bin/../include/cuda.h"
enum CUmemorytype_enum {
# 157 "/usr/local/cuda/bin/../include/cuda.h"
CU_MEMORYTYPE_HOST = 1,
# 158 "/usr/local/cuda/bin/../include/cuda.h"
CU_MEMORYTYPE_DEVICE,
# 159 "/usr/local/cuda/bin/../include/cuda.h"
CU_MEMORYTYPE_ARRAY
# 160 "/usr/local/cuda/bin/../include/cuda.h"
} CUmemorytype; }
# 206 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 169 "/usr/local/cuda/bin/../include/cuda.h"
enum cudaError_enum {
# 171 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_SUCCESS,
# 172 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_VALUE,
# 173 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_OUT_OF_MEMORY,
# 174 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_INITIALIZED,
# 175 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_DEINITIALIZED,
# 177 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NO_DEVICE = 100,
# 178 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_DEVICE,
# 180 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_IMAGE = 200,
# 181 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_CONTEXT,
# 182 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_CURRENT,
# 183 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_MAP_FAILED = 205,
# 184 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_UNMAP_FAILED,
# 185 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_ARRAY_IS_MAPPED,
# 186 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_ALREADY_MAPPED,
# 187 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NO_BINARY_FOR_GPU,
# 188 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_ALREADY_ACQUIRED,
# 189 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_MAPPED,
# 191 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_SOURCE = 300,
# 192 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_FILE_NOT_FOUND,
# 194 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_HANDLE = 400,
# 196 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_FOUND = 500,
# 198 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_READY = 600,
# 200 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_FAILED = 700,
# 201 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES,
# 202 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_TIMEOUT,
# 203 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING,
# 205 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_UNKNOWN = 999
# 206 "/usr/local/cuda/bin/../include/cuda.h"
} CUresult; }
# 217 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuInit(unsigned);
# 225 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGet(CUdevice *, int);
# 226 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetCount(int *);
# 227 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetName(char *, int, CUdevice);
# 228 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceComputeCapability(int *, int *, CUdevice);
# 229 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceTotalMem(unsigned *, CUdevice);
# 230 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetProperties(CUdevprop *, CUdevice);
# 231 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetAttribute(int *, CUdevice_attribute, CUdevice);
# 239 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxCreate(CUcontext *, unsigned, CUdevice);
# 240 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxDestroy(CUcontext);
# 241 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxAttach(CUcontext *, unsigned);
# 242 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxDetach(CUcontext);
# 243 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxPushCurrent(CUcontext);
# 244 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxPopCurrent(CUcontext *);
# 245 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxGetDevice(CUdevice *);
# 246 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxSynchronize();
# 255 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoad(CUmodule *, const char *);
# 256 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoadData(CUmodule *, const void *);
# 257 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoadFatBinary(CUmodule *, const void *);
# 258 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleUnload(CUmodule);
# 259 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetFunction(CUfunction *, CUmodule, const char *);
# 260 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetGlobal(CUdeviceptr *, unsigned *, CUmodule, const char *);
# 261 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetTexRef(CUtexref *, CUmodule, const char *);
# 269 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemGetInfo(unsigned *, unsigned *);
# 271 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemAlloc(CUdeviceptr *, unsigned);
# 272 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemAllocPitch(CUdeviceptr *, unsigned *, unsigned, unsigned, unsigned);
# 280 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemFree(CUdeviceptr);
# 281 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemGetAddressRange(CUdeviceptr *, unsigned *, CUdeviceptr);
# 283 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemAllocHost(void **, unsigned);
# 284 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemFreeHost(void *);
# 297 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoD(CUdeviceptr, const void *, unsigned);
# 298 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoH(void *, CUdeviceptr, unsigned);
# 301 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoD(CUdeviceptr, CUdeviceptr, unsigned);
# 304 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoA(CUarray, unsigned, CUdeviceptr, unsigned);
# 305 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoD(CUdeviceptr, CUarray, unsigned, unsigned);
# 308 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoA(CUarray, unsigned, const void *, unsigned);
# 309 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoH(void *, CUarray, unsigned, unsigned);
# 312 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoA(CUarray, unsigned, CUarray, unsigned, unsigned);
# 334 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 316 "/usr/local/cuda/bin/../include/cuda.h"
struct CUDA_MEMCPY2D_st {
# 318 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcXInBytes; unsigned srcY;
# 319 "/usr/local/cuda/bin/../include/cuda.h"
CUmemorytype srcMemoryType;
# 320 "/usr/local/cuda/bin/../include/cuda.h"
const void *srcHost;
# 321 "/usr/local/cuda/bin/../include/cuda.h"
CUdeviceptr srcDevice;
# 322 "/usr/local/cuda/bin/../include/cuda.h"
CUarray srcArray;
# 323 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcPitch;
# 325 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstXInBytes; unsigned dstY;
# 326 "/usr/local/cuda/bin/../include/cuda.h"
CUmemorytype dstMemoryType;
# 327 "/usr/local/cuda/bin/../include/cuda.h"
void *dstHost;
# 328 "/usr/local/cuda/bin/../include/cuda.h"
CUdeviceptr dstDevice;
# 329 "/usr/local/cuda/bin/../include/cuda.h"
CUarray dstArray;
# 330 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstPitch;
# 332 "/usr/local/cuda/bin/../include/cuda.h"
unsigned WidthInBytes;
# 333 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Height;
# 334 "/usr/local/cuda/bin/../include/cuda.h"
} CUDA_MEMCPY2D; }
# 335 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy2D(const CUDA_MEMCPY2D *);
# 336 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy2DUnaligned(const CUDA_MEMCPY2D *);
# 365 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 340 "/usr/local/cuda/bin/../include/cuda.h"
struct CUDA_MEMCPY3D_st {
# 342 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcXInBytes; unsigned srcY; unsigned srcZ;
# 343 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcLOD;
# 344 "/usr/local/cuda/bin/../include/cuda.h"
CUmemorytype srcMemoryType;
# 345 "/usr/local/cuda/bin/../include/cuda.h"
const void *srcHost;
# 346 "/usr/local/cuda/bin/../include/cuda.h"
CUdeviceptr srcDevice;
# 347 "/usr/local/cuda/bin/../include/cuda.h"
CUarray srcArray;
# 348 "/usr/local/cuda/bin/../include/cuda.h"
void *reserved0;
# 349 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcPitch;
# 350 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcHeight;
# 352 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstXInBytes; unsigned dstY; unsigned dstZ;
# 353 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstLOD;
# 354 "/usr/local/cuda/bin/../include/cuda.h"
CUmemorytype dstMemoryType;
# 355 "/usr/local/cuda/bin/../include/cuda.h"
void *dstHost;
# 356 "/usr/local/cuda/bin/../include/cuda.h"
CUdeviceptr dstDevice;
# 357 "/usr/local/cuda/bin/../include/cuda.h"
CUarray dstArray;
# 358 "/usr/local/cuda/bin/../include/cuda.h"
void *reserved1;
# 359 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstPitch;
# 360 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstHeight;
# 362 "/usr/local/cuda/bin/../include/cuda.h"
unsigned WidthInBytes;
# 363 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Height;
# 364 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Depth;
# 365 "/usr/local/cuda/bin/../include/cuda.h"
} CUDA_MEMCPY3D; }
# 366 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy3D(const CUDA_MEMCPY3D *);
# 381 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoDAsync(CUdeviceptr, const void *, unsigned, CUstream);
# 383 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoHAsync(void *, CUdeviceptr, unsigned, CUstream);
# 387 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoAAsync(CUarray, unsigned, const void *, unsigned, CUstream);
# 389 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoHAsync(void *, CUarray, unsigned, unsigned, CUstream);
# 393 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy2DAsync(const CUDA_MEMCPY2D *, CUstream);
# 396 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy3DAsync(const CUDA_MEMCPY3D *, CUstream);
# 403 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD8(CUdeviceptr, unsigned char, unsigned);
# 404 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD16(CUdeviceptr, unsigned short, unsigned);
# 405 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD32(CUdeviceptr, unsigned, unsigned);
# 407 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D8(CUdeviceptr, unsigned, unsigned char, unsigned, unsigned);
# 408 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D16(CUdeviceptr, unsigned, unsigned short, unsigned, unsigned);
# 409 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D32(CUdeviceptr, unsigned, unsigned, unsigned, unsigned);
# 418 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncSetBlockShape(CUfunction, int, int, int);
# 419 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncSetSharedSize(CUfunction, unsigned);
# 442 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 428 "/usr/local/cuda/bin/../include/cuda.h"
struct CUDA_ARRAY_DESCRIPTOR {
# 432 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Width;
# 433 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Height;
# 438 "/usr/local/cuda/bin/../include/cuda.h"
CUarray_format Format;
# 441 "/usr/local/cuda/bin/../include/cuda.h"
unsigned NumChannels;
# 442 "/usr/local/cuda/bin/../include/cuda.h"
} CUDA_ARRAY_DESCRIPTOR; }
# 444 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArrayCreate(CUarray *, const CUDA_ARRAY_DESCRIPTOR *);
# 445 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArrayGetDescriptor(CUDA_ARRAY_DESCRIPTOR *, CUarray);
# 446 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArrayDestroy(CUarray);
# 468 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 449 "/usr/local/cuda/bin/../include/cuda.h"
struct CUDA_ARRAY3D_DESCRIPTOR {
# 453 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Width;
# 454 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Height;
# 455 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Depth;
# 459 "/usr/local/cuda/bin/../include/cuda.h"
CUarray_format Format;
# 462 "/usr/local/cuda/bin/../include/cuda.h"
unsigned NumChannels;
# 466 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Flags;
# 468 "/usr/local/cuda/bin/../include/cuda.h"
} CUDA_ARRAY3D_DESCRIPTOR; }
# 469 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArray3DCreate(CUarray *, const CUDA_ARRAY3D_DESCRIPTOR *);
# 470 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArray3DGetDescriptor(CUDA_ARRAY3D_DESCRIPTOR *, CUarray);
# 477 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefCreate(CUtexref *);
# 478 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefDestroy(CUtexref);
# 480 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetArray(CUtexref, CUarray, unsigned);
# 483 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetAddress(unsigned *, CUtexref, CUdeviceptr, unsigned);
# 484 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetFormat(CUtexref, CUarray_format, int);
# 486 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetAddressMode(CUtexref, int, CUaddress_mode);
# 487 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetFilterMode(CUtexref, CUfilter_mode);
# 488 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetFlags(CUtexref, unsigned);
# 496 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetAddress(CUdeviceptr *, CUtexref);
# 497 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetArray(CUarray *, CUtexref);
# 498 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetAddressMode(CUaddress_mode *, CUtexref, int);
# 499 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetFilterMode(CUfilter_mode *, CUtexref);
# 500 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetFormat(CUarray_format *, int *, CUtexref);
# 501 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetFlags(unsigned *, CUtexref);
# 509 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetSize(CUfunction, unsigned);
# 510 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSeti(CUfunction, int, unsigned);
# 511 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetf(CUfunction, int, float);
# 512 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetv(CUfunction, int, void *, unsigned);
# 513 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetTexRef(CUfunction, int, CUtexref);
# 524 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuLaunch(CUfunction);
# 525 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuLaunchGrid(CUfunction, int, int);
# 526 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuLaunchGridAsync(CUfunction, int, int, CUstream);
# 533 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventCreate(CUevent *, unsigned);
# 534 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventRecord(CUevent, CUstream);
# 535 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventQuery(CUevent);
# 536 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventSynchronize(CUevent);
# 537 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventDestroy(CUevent);
# 538 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventElapsedTime(float *, CUevent, CUevent);
# 545 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamCreate(CUstream *, unsigned);
# 546 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamQuery(CUstream);
# 547 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamSynchronize(CUstream);
# 548 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamDestroy(CUstream);
# 43 "/usr/include/_locale.h" 3
struct lconv {
# 44 "/usr/include/_locale.h" 3
char *decimal_point;
# 45 "/usr/include/_locale.h" 3
char *thousands_sep;
# 46 "/usr/include/_locale.h" 3
char *grouping;
# 47 "/usr/include/_locale.h" 3
char *int_curr_symbol;
# 48 "/usr/include/_locale.h" 3
char *currency_symbol;
# 49 "/usr/include/_locale.h" 3
char *mon_decimal_point;
# 50 "/usr/include/_locale.h" 3
char *mon_thousands_sep;
# 51 "/usr/include/_locale.h" 3
char *mon_grouping;
# 52 "/usr/include/_locale.h" 3
char *positive_sign;
# 53 "/usr/include/_locale.h" 3
char *negative_sign;
# 54 "/usr/include/_locale.h" 3
char int_frac_digits;
# 55 "/usr/include/_locale.h" 3
char frac_digits;
# 56 "/usr/include/_locale.h" 3
char p_cs_precedes;
# 57 "/usr/include/_locale.h" 3
char p_sep_by_space;
# 58 "/usr/include/_locale.h" 3
char n_cs_precedes;
# 59 "/usr/include/_locale.h" 3
char n_sep_by_space;
# 60 "/usr/include/_locale.h" 3
char p_sign_posn;
# 61 "/usr/include/_locale.h" 3
char n_sign_posn;
# 62 "/usr/include/_locale.h" 3
char int_p_cs_precedes;
# 63 "/usr/include/_locale.h" 3
char int_n_cs_precedes;
# 64 "/usr/include/_locale.h" 3
char int_p_sep_by_space;
# 65 "/usr/include/_locale.h" 3
char int_n_sep_by_space;
# 66 "/usr/include/_locale.h" 3
char int_p_sign_posn;
# 67 "/usr/include/_locale.h" 3
char int_n_sign_posn;
# 68 "/usr/include/_locale.h" 3
};
# 75 "/usr/include/_locale.h" 3
extern "C" lconv *localeconv();
# 53 "/usr/include/locale.h" 3
extern "C" char *setlocale(int, const char *);
# 55 "/usr/include/c++/4.0.0/clocale" 3
namespace std {
# 57 "/usr/include/c++/4.0.0/clocale" 3
using ::lconv;
# 58 "/usr/include/c++/4.0.0/clocale" 3
using ::setlocale;
# 59 "/usr/include/c++/4.0.0/clocale" 3
using ::localeconv;
# 60 "/usr/include/c++/4.0.0/clocale" 3
}
# 77 "/usr/include/c++/4.0.0/cstring" 3
namespace std {
# 79 "/usr/include/c++/4.0.0/cstring" 3
using ::memcpy;
# 80 "/usr/include/c++/4.0.0/cstring" 3
using ::memmove;
# 81 "/usr/include/c++/4.0.0/cstring" 3
using ::strcpy;
# 82 "/usr/include/c++/4.0.0/cstring" 3
using ::strncpy;
# 83 "/usr/include/c++/4.0.0/cstring" 3
using ::strcat;
# 84 "/usr/include/c++/4.0.0/cstring" 3
using ::strncat;
# 85 "/usr/include/c++/4.0.0/cstring" 3
using ::memcmp;
# 86 "/usr/include/c++/4.0.0/cstring" 3
using ::strcmp;
# 87 "/usr/include/c++/4.0.0/cstring" 3
using ::strcoll;
# 88 "/usr/include/c++/4.0.0/cstring" 3
using ::strncmp;
# 89 "/usr/include/c++/4.0.0/cstring" 3
using ::strxfrm;
# 90 "/usr/include/c++/4.0.0/cstring" 3
using ::strcspn;
# 91 "/usr/include/c++/4.0.0/cstring" 3
using ::strspn;
# 92 "/usr/include/c++/4.0.0/cstring" 3
using ::strtok;
# 93 "/usr/include/c++/4.0.0/cstring" 3
using ::memset;
# 94 "/usr/include/c++/4.0.0/cstring" 3
using ::strerror;
# 95 "/usr/include/c++/4.0.0/cstring" 3
using ::strlen;
# 97 "/usr/include/c++/4.0.0/cstring" 3
using ::memchr;
# 100 "/usr/include/c++/4.0.0/cstring" 3
inline void *memchr(void *__p, int __c, size_t __n)
# 101 "/usr/include/c++/4.0.0/cstring" 3
{ return memchr((const void *)__p, __c, __n); }
# 103 "/usr/include/c++/4.0.0/cstring" 3
using ::strchr;
# 106 "/usr/include/c++/4.0.0/cstring" 3
inline char *strchr(char *__s1, int __n)
# 107 "/usr/include/c++/4.0.0/cstring" 3
{ return __builtin_strchr((const char *)__s1, __n); }
# 109 "/usr/include/c++/4.0.0/cstring" 3
using ::strpbrk;
# 112 "/usr/include/c++/4.0.0/cstring" 3
inline char *strpbrk(char *__s1, const char *__s2)
# 113 "/usr/include/c++/4.0.0/cstring" 3
{ return __builtin_strpbrk((const char *)__s1, __s2); }
# 115 "/usr/include/c++/4.0.0/cstring" 3
using ::strrchr;
# 118 "/usr/include/c++/4.0.0/cstring" 3
inline char *strrchr(char *__s1, int __n)
# 119 "/usr/include/c++/4.0.0/cstring" 3
{ return __builtin_strrchr((const char *)__s1, __n); }
# 121 "/usr/include/c++/4.0.0/cstring" 3
using ::strstr;
# 124 "/usr/include/c++/4.0.0/cstring" 3
inline char *strstr(char *__s1, const char *__s2)
# 125 "/usr/include/c++/4.0.0/cstring" 3
{ return __builtin_strstr((const char *)__s1, __s2); }
# 126 "/usr/include/c++/4.0.0/cstring" 3
}
# 70 "/usr/include/stdio.h" 3
typedef __darwin_va_list va_list;
# 75 "/usr/include/stdio.h" 3
typedef __darwin_off_t off_t;
# 87 "/usr/include/stdio.h" 3
typedef __darwin_off_t fpos_t;
# 98 "/usr/include/stdio.h" 3
struct __sbuf {
# 99 "/usr/include/stdio.h" 3
unsigned char *_base;
# 100 "/usr/include/stdio.h" 3
int _size;
# 101 "/usr/include/stdio.h" 3
};
# 104 "/usr/include/stdio.h" 3
struct __sFILEX;
# 163 "/usr/include/stdio.h" 3
typedef
# 132 "/usr/include/stdio.h" 3
struct __sFILE {
# 133 "/usr/include/stdio.h" 3
unsigned char *_p;
# 134 "/usr/include/stdio.h" 3
int _r;
# 135 "/usr/include/stdio.h" 3
int _w;
# 136 "/usr/include/stdio.h" 3
short _flags;
# 137 "/usr/include/stdio.h" 3
short _file;
# 138 "/usr/include/stdio.h" 3
__sbuf _bf;
# 139 "/usr/include/stdio.h" 3
int _lbfsize;
# 142 "/usr/include/stdio.h" 3
void *_cookie;
# 143 "/usr/include/stdio.h" 3
int (*_close)(void *);
# 144 "/usr/include/stdio.h" 3
int (*_read)(void *, char *, int);
# 145 "/usr/include/stdio.h" 3
fpos_t (*_seek)(void *, fpos_t, int);
# 146 "/usr/include/stdio.h" 3
int (*_write)(void *, const char *, int);
# 149 "/usr/include/stdio.h" 3
__sbuf _ub;
# 150 "/usr/include/stdio.h" 3
__sFILEX *_extra;
# 151 "/usr/include/stdio.h" 3
int _ur;
# 154 "/usr/include/stdio.h" 3
unsigned char _ubuf[3];
# 155 "/usr/include/stdio.h" 3
unsigned char _nbuf[1];
# 158 "/usr/include/stdio.h" 3
__sbuf _lb;
# 161 "/usr/include/stdio.h" 3
int _blksize;
# 162 "/usr/include/stdio.h" 3
fpos_t _offset;
# 163 "/usr/include/stdio.h" 3
} FILE;
# 167 "/usr/include/stdio.h" 3
extern "C" { extern FILE *__stdinp; }
# 168 "/usr/include/stdio.h" 3
extern "C" { extern FILE *__stdoutp; }
# 169 "/usr/include/stdio.h" 3
extern "C" { extern FILE *__stderrp; }
# 249 "/usr/include/stdio.h" 3
extern "C" void clearerr(FILE *);
# 250 "/usr/include/stdio.h" 3
extern "C" int fclose(FILE *);
# 251 "/usr/include/stdio.h" 3
extern "C" int feof(FILE *);
# 252 "/usr/include/stdio.h" 3
extern "C" int ferror(FILE *);
# 253 "/usr/include/stdio.h" 3
extern "C" int fflush(FILE *);
# 254 "/usr/include/stdio.h" 3
extern "C" int fgetc(FILE *);
# 255 "/usr/include/stdio.h" 3
extern "C" int fgetpos(FILE *, fpos_t *);
# 256 "/usr/include/stdio.h" 3
extern "C" char *fgets(char *, int, FILE *);
# 257 "/usr/include/stdio.h" 3
extern "C" FILE *fopen(const char *, const char *);
# 258 "/usr/include/stdio.h" 3
extern "C" int fprintf(FILE *, const char *, ...);
# 259 "/usr/include/stdio.h" 3
extern "C" int fputc(int, FILE *);
# 260 "/usr/include/stdio.h" 3
extern "C" int fputs(const char *, FILE *) __asm__("_fputs$UNIX2003");
# 261 "/usr/include/stdio.h" 3
extern "C" size_t fread(void *, size_t, size_t, FILE *);
# 262 "/usr/include/stdio.h" 3
extern "C" FILE *freopen(const char *, const char *, FILE *) __asm__("_freopen$UNIX2003");
# 264 "/usr/include/stdio.h" 3
extern "C" int fscanf(FILE *, const char *, ...);
# 265 "/usr/include/stdio.h" 3
extern "C" int fseek(FILE *, long, int);
# 266 "/usr/include/stdio.h" 3
extern "C" int fsetpos(FILE *, const fpos_t *);
# 267 "/usr/include/stdio.h" 3
extern "C" long ftell(FILE *);
# 268 "/usr/include/stdio.h" 3
extern "C" size_t fwrite(const void *, size_t, size_t, FILE *) __asm__("_fwrite$UNIX2003");
# 269 "/usr/include/stdio.h" 3
extern "C" int getc(FILE *);
# 270 "/usr/include/stdio.h" 3
extern "C" int getchar();
# 271 "/usr/include/stdio.h" 3
extern "C" char *gets(char *);
# 273 "/usr/include/stdio.h" 3
extern "C" { extern const int sys_nerr; }
# 274 "/usr/include/stdio.h" 3
extern "C" { extern const char *const sys_errlist[]; }
# 276 "/usr/include/stdio.h" 3
extern "C" void perror(const char *);
# 277 "/usr/include/stdio.h" 3
extern "C" int printf(const char *, ...);
# 278 "/usr/include/stdio.h" 3
extern "C" int putc(int, FILE *);
# 279 "/usr/include/stdio.h" 3
extern "C" int putchar(int);
# 280 "/usr/include/stdio.h" 3
extern "C" int puts(const char *);
# 281 "/usr/include/stdio.h" 3
extern "C" int remove(const char *);
# 282 "/usr/include/stdio.h" 3
extern "C" int rename(const char *, const char *);
# 283 "/usr/include/stdio.h" 3
extern "C" void rewind(FILE *);
# 284 "/usr/include/stdio.h" 3
extern "C" int scanf(const char *, ...);
# 285 "/usr/include/stdio.h" 3
extern "C" void setbuf(FILE *, char *);
# 286 "/usr/include/stdio.h" 3
extern "C" int setvbuf(FILE *, char *, int, size_t);
# 287 "/usr/include/stdio.h" 3
extern "C" int sprintf(char *, const char *, ...);
# 288 "/usr/include/stdio.h" 3
extern "C" int sscanf(const char *, const char *, ...);
# 289 "/usr/include/stdio.h" 3
extern "C" FILE *tmpfile();
# 290 "/usr/include/stdio.h" 3
extern "C" char *tmpnam(char *);
# 291 "/usr/include/stdio.h" 3
extern "C" int ungetc(int, FILE *);
# 292 "/usr/include/stdio.h" 3
extern "C" int vfprintf(FILE *, const char *, va_list);
# 293 "/usr/include/stdio.h" 3
extern "C" int vprintf(const char *, va_list);
# 294 "/usr/include/stdio.h" 3
extern "C" int vsprintf(char *, const char *, va_list);
# 296 "/usr/include/stdio.h" 3
extern "C" int asprintf(char **, const char *, ...);
# 297 "/usr/include/stdio.h" 3
extern "C" int vasprintf(char **, const char *, va_list);
# 308 "/usr/include/stdio.h" 3
extern "C" char *ctermid(char *);
# 310 "/usr/include/stdio.h" 3
extern "C" char *ctermid_r(char *);
# 312 "/usr/include/stdio.h" 3
extern "C" FILE *fdopen(int, const char *);
# 314 "/usr/include/stdio.h" 3
extern "C" char *fgetln(FILE *, size_t *);
# 316 "/usr/include/stdio.h" 3
extern "C" int fileno(FILE *);
# 317 "/usr/include/stdio.h" 3
extern "C" void flockfile(FILE *);
# 320 "/usr/include/stdio.h" 3
extern "C" const char *fmtcheck(const char *, const char *);
# 321 "/usr/include/stdio.h" 3
extern "C" int fpurge(FILE *);
# 323 "/usr/include/stdio.h" 3
extern "C" int fseeko(FILE *, off_t, int);
# 324 "/usr/include/stdio.h" 3
extern "C" off_t ftello(FILE *);
# 325 "/usr/include/stdio.h" 3
extern "C" int ftrylockfile(FILE *);
# 326 "/usr/include/stdio.h" 3
extern "C" void funlockfile(FILE *);
# 327 "/usr/include/stdio.h" 3
extern "C" int getc_unlocked(FILE *);
# 328 "/usr/include/stdio.h" 3
extern "C" int getchar_unlocked();
# 330 "/usr/include/stdio.h" 3
extern "C" int getw(FILE *);
# 332 "/usr/include/stdio.h" 3
extern "C" int pclose(FILE *);
# 333 "/usr/include/stdio.h" 3
extern "C" FILE *popen(const char *, const char *);
# 334 "/usr/include/stdio.h" 3
extern "C" int putc_unlocked(int, FILE *);
# 335 "/usr/include/stdio.h" 3
extern "C" int putchar_unlocked(int);
# 337 "/usr/include/stdio.h" 3
extern "C" int putw(int, FILE *);
# 338 "/usr/include/stdio.h" 3
extern "C" void setbuffer(FILE *, char *, int);
# 339 "/usr/include/stdio.h" 3
extern "C" int setlinebuf(FILE *);
# 341 "/usr/include/stdio.h" 3
extern "C" int snprintf(char *, size_t, const char *, ...);
# 342 "/usr/include/stdio.h" 3
extern "C" char *tempnam(const char *, const char *) __asm__("_tempnam$UNIX2003");
# 343 "/usr/include/stdio.h" 3
extern "C" int vfscanf(FILE *, const char *, va_list);
# 344 "/usr/include/stdio.h" 3
extern "C" int vscanf(const char *, va_list);
# 345 "/usr/include/stdio.h" 3
extern "C" int vsnprintf(char *, size_t, const char *, va_list);
# 346 "/usr/include/stdio.h" 3
extern "C" int vsscanf(const char *, const char *, va_list);
# 348 "/usr/include/stdio.h" 3
extern "C" FILE *zopen(const char *, const char *, int);
# 357 "/usr/include/stdio.h" 3
extern "C" FILE *funopen(const void *, int (*)(void *, char *, int), int (*)(void *, const char *, int), fpos_t (*)(void *, fpos_t, int), int (*)(void *));
# 372 "/usr/include/stdio.h" 3
extern "C" int __srget(FILE *);
# 373 "/usr/include/stdio.h" 3
extern "C" int __svfscanf(FILE *, const char *, va_list);
# 374 "/usr/include/stdio.h" 3
extern "C" int __swbuf(int, FILE *);
# 383 "/usr/include/stdio.h" 3
static inline int __sputc(int _c, FILE *_p) {
# 384 "/usr/include/stdio.h" 3
if ((--(_p->_w) >= 0) || ((_p->_w >= _p->_lbfsize) && ((char)_c != ('\n')))) {
# 385 "/usr/include/stdio.h" 3
return (*((_p->_p)++)) = _c; } else {
# 387 "/usr/include/stdio.h" 3
return __swbuf(_c, _p); }
# 388 "/usr/include/stdio.h" 3
}
# 97 "/usr/include/c++/4.0.0/cstdio" 3
namespace std {
# 99 "/usr/include/c++/4.0.0/cstdio" 3
using ::FILE;
# 100 "/usr/include/c++/4.0.0/cstdio" 3
using ::fpos_t;
# 102 "/usr/include/c++/4.0.0/cstdio" 3
using ::clearerr;
# 103 "/usr/include/c++/4.0.0/cstdio" 3
using ::fclose;
# 104 "/usr/include/c++/4.0.0/cstdio" 3
using ::feof;
# 105 "/usr/include/c++/4.0.0/cstdio" 3
using ::ferror;
# 106 "/usr/include/c++/4.0.0/cstdio" 3
using ::fflush;
# 107 "/usr/include/c++/4.0.0/cstdio" 3
using ::fgetc;
# 108 "/usr/include/c++/4.0.0/cstdio" 3
using ::fgetpos;
# 109 "/usr/include/c++/4.0.0/cstdio" 3
using ::fgets;
# 110 "/usr/include/c++/4.0.0/cstdio" 3
using ::fopen;
# 111 "/usr/include/c++/4.0.0/cstdio" 3
using ::fprintf;
# 112 "/usr/include/c++/4.0.0/cstdio" 3
using ::fputc;
# 113 "/usr/include/c++/4.0.0/cstdio" 3
using ::fputs;
# 114 "/usr/include/c++/4.0.0/cstdio" 3
using ::fread;
# 115 "/usr/include/c++/4.0.0/cstdio" 3
using ::freopen;
# 116 "/usr/include/c++/4.0.0/cstdio" 3
using ::fscanf;
# 117 "/usr/include/c++/4.0.0/cstdio" 3
using ::fseek;
# 118 "/usr/include/c++/4.0.0/cstdio" 3
using ::fsetpos;
# 119 "/usr/include/c++/4.0.0/cstdio" 3
using ::ftell;
# 120 "/usr/include/c++/4.0.0/cstdio" 3
using ::fwrite;
# 121 "/usr/include/c++/4.0.0/cstdio" 3
using ::getc;
# 122 "/usr/include/c++/4.0.0/cstdio" 3
using ::getchar;
# 123 "/usr/include/c++/4.0.0/cstdio" 3
using ::gets;
# 124 "/usr/include/c++/4.0.0/cstdio" 3
using ::perror;
# 125 "/usr/include/c++/4.0.0/cstdio" 3
using ::printf;
# 126 "/usr/include/c++/4.0.0/cstdio" 3
using ::putc;
# 127 "/usr/include/c++/4.0.0/cstdio" 3
using ::putchar;
# 128 "/usr/include/c++/4.0.0/cstdio" 3
using ::puts;
# 129 "/usr/include/c++/4.0.0/cstdio" 3
using ::remove;
# 130 "/usr/include/c++/4.0.0/cstdio" 3
using ::rename;
# 131 "/usr/include/c++/4.0.0/cstdio" 3
using ::rewind;
# 132 "/usr/include/c++/4.0.0/cstdio" 3
using ::scanf;
# 133 "/usr/include/c++/4.0.0/cstdio" 3
using ::setbuf;
# 134 "/usr/include/c++/4.0.0/cstdio" 3
using ::setvbuf;
# 135 "/usr/include/c++/4.0.0/cstdio" 3
using ::sprintf;
# 136 "/usr/include/c++/4.0.0/cstdio" 3
using ::sscanf;
# 137 "/usr/include/c++/4.0.0/cstdio" 3
using ::tmpfile;
# 138 "/usr/include/c++/4.0.0/cstdio" 3
using ::tmpnam;
# 139 "/usr/include/c++/4.0.0/cstdio" 3
using ::ungetc;
# 140 "/usr/include/c++/4.0.0/cstdio" 3
using ::vfprintf;
# 141 "/usr/include/c++/4.0.0/cstdio" 3
using ::vprintf;
# 142 "/usr/include/c++/4.0.0/cstdio" 3
using ::vsprintf;
# 143 "/usr/include/c++/4.0.0/cstdio" 3
}
# 153 "/usr/include/c++/4.0.0/cstdio" 3
namespace __gnu_cxx {
# 167 "/usr/include/c++/4.0.0/cstdio" 3
using ::snprintf;
# 168 "/usr/include/c++/4.0.0/cstdio" 3
using ::vfscanf;
# 169 "/usr/include/c++/4.0.0/cstdio" 3
using ::vscanf;
# 170 "/usr/include/c++/4.0.0/cstdio" 3
using ::vsnprintf;
# 171 "/usr/include/c++/4.0.0/cstdio" 3
using ::vsscanf;
# 173 "/usr/include/c++/4.0.0/cstdio" 3
}
# 175 "/usr/include/c++/4.0.0/cstdio" 3
namespace std {
# 177 "/usr/include/c++/4.0.0/cstdio" 3
using __gnu_cxx::snprintf;
# 178 "/usr/include/c++/4.0.0/cstdio" 3
using __gnu_cxx::vfscanf;
# 179 "/usr/include/c++/4.0.0/cstdio" 3
using __gnu_cxx::vscanf;
# 180 "/usr/include/c++/4.0.0/cstdio" 3
using __gnu_cxx::vsnprintf;
# 181 "/usr/include/c++/4.0.0/cstdio" 3
using __gnu_cxx::vsscanf;
# 182 "/usr/include/c++/4.0.0/cstdio" 3
}
# 47 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
namespace std {
# 49 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
typedef int *__c_locale;
# 55 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
template<class _Tv> int
# 57 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
__convert_from_v(char *__out, const int
# 58 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
__size __attribute__((__unused__)), const char *
# 59 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
__fmt, _Tv
# 60 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
__v, const __c_locale &, int __prec)
# 61 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
{
# 62 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
auto char *__old = std::setlocale(4, __null);
# 63 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
auto char *__sav = (__null);
# 64 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
if (std::strcmp(__old, "C"))
# 65 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
{
# 66 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
__sav = (new char [std::strlen(__old) + (1)]);
# 67 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
std::strcpy(__sav, __old);
# 68 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
std::setlocale(4, "C");
# 69 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
}
# 72 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
auto const int __ret = (std::snprintf(__out, __size, __fmt, __prec, __v));
# 77 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
if (__sav)
# 78 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
{
# 79 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
std::setlocale(4, __sav);
# 80 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
delete [] __sav;
# 81 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
}
# 82 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
return __ret;
# 83 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
}
# 84 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++locale.h" 3
}
# 33 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 35 "/usr/include/sched.h" 3
extern "C" { struct sched_param { int sched_priority; char __opaque[4]; }; }
# 38 "/usr/include/sched.h" 3
extern "C" int sched_yield();
# 39 "/usr/include/sched.h" 3
extern "C" int sched_get_priority_min(int);
# 40 "/usr/include/sched.h" 3
extern "C" int sched_get_priority_max(int);
# 69 "/usr/include/pthread.h" 3
typedef __darwin_pthread_cond_t pthread_cond_t;
# 74 "/usr/include/pthread.h" 3
typedef __darwin_pthread_condattr_t pthread_condattr_t;
# 79 "/usr/include/pthread.h" 3
typedef __darwin_pthread_key_t pthread_key_t;
# 84 "/usr/include/pthread.h" 3
typedef __darwin_pthread_mutex_t pthread_mutex_t;
# 89 "/usr/include/pthread.h" 3
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
# 94 "/usr/include/pthread.h" 3
typedef __darwin_pthread_once_t pthread_once_t;
# 99 "/usr/include/pthread.h" 3
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
# 104 "/usr/include/pthread.h" 3
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
# 109 "/usr/include/pthread.h" 3
typedef __darwin_pthread_t pthread_t;
# 116 "/usr/include/pthread.h" 3
typedef __darwin_mach_port_t mach_port_t;
# 244 "/usr/include/pthread.h" 3
extern "C" int pthread_atfork(void (*)(void), void (*)(void), void (*)(void));
# 246 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_destroy(pthread_attr_t *);
# 247 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getdetachstate(const pthread_attr_t *, int *);
# 249 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getguardsize(const pthread_attr_t *, size_t *);
# 251 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getinheritsched(const pthread_attr_t *, int *);
# 253 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getschedparam(const pthread_attr_t *, sched_param *);
# 255 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getschedpolicy(const pthread_attr_t *, int *);
# 257 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getscope(const pthread_attr_t *, int *);
# 258 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstack(const pthread_attr_t *, void **, size_t *);
# 260 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstackaddr(const pthread_attr_t *, void **);
# 262 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstacksize(const pthread_attr_t *, size_t *);
# 264 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_init(pthread_attr_t *);
# 265 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setdetachstate(pthread_attr_t *, int);
# 267 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setguardsize(pthread_attr_t *, size_t);
# 268 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setinheritsched(pthread_attr_t *, int);
# 270 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setschedparam(pthread_attr_t *, const sched_param *);
# 272 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setschedpolicy(pthread_attr_t *, int);
# 274 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setscope(pthread_attr_t *, int);
# 275 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstack(pthread_attr_t *, void *, size_t);
# 277 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstackaddr(pthread_attr_t *, void *);
# 279 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstacksize(pthread_attr_t *, size_t);
# 280 "/usr/include/pthread.h" 3
extern "C" int pthread_cancel(pthread_t) __asm__("_pthread_cancel$UNIX2003");
# 282 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_broadcast(pthread_cond_t *);
# 283 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_destroy(pthread_cond_t *);
# 284 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *) __asm__("_pthread_cond_init$UNIX2003");
# 286 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_signal(pthread_cond_t *);
# 287 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *, const timespec *) __asm__("_pthread_cond_timedwait$UNIX2003");
# 290 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *) __asm__("_pthread_cond_wait$UNIX2003");
# 292 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_destroy(pthread_condattr_t *);
# 293 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_init(pthread_condattr_t *);
# 294 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_getpshared(const pthread_condattr_t *, int *);
# 296 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_setpshared(pthread_condattr_t *, int);
# 298 "/usr/include/pthread.h" 3
extern "C" int pthread_create(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *);
# 302 "/usr/include/pthread.h" 3
extern "C" int pthread_detach(pthread_t);
# 303 "/usr/include/pthread.h" 3
extern "C" int pthread_equal(pthread_t, pthread_t);
# 305 "/usr/include/pthread.h" 3
extern "C" void pthread_exit(void *) __attribute__((__noreturn__));
# 306 "/usr/include/pthread.h" 3
extern "C" int pthread_getconcurrency();
# 307 "/usr/include/pthread.h" 3
extern "C" int pthread_getschedparam(pthread_t, int *, sched_param *);
# 308 "/usr/include/pthread.h" 3
extern "C" void *pthread_getspecific(pthread_key_t);
# 309 "/usr/include/pthread.h" 3
extern "C" int pthread_join(pthread_t, void **) __asm__("_pthread_join$UNIX2003");
# 310 "/usr/include/pthread.h" 3
extern "C" int pthread_key_create(pthread_key_t *, void (*)(void *));
# 311 "/usr/include/pthread.h" 3
extern "C" int pthread_key_delete(pthread_key_t);
# 312 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_destroy(pthread_mutex_t *);
# 313 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_getprioceiling(const pthread_mutex_t *, int *);
# 314 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
# 315 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_lock(pthread_mutex_t *);
# 316 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_setprioceiling(pthread_mutex_t *, int, int *);
# 317 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_trylock(pthread_mutex_t *);
# 318 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_unlock(pthread_mutex_t *);
# 319 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_destroy(pthread_mutexattr_t *) __asm__("_pthread_mutexattr_destroy$UNIX2003");
# 320 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *, int *);
# 321 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *, int *);
# 322 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getpshared(const pthread_mutexattr_t *, int *);
# 323 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_gettype(const pthread_mutexattr_t *, int *);
# 324 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_init(pthread_mutexattr_t *);
# 325 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int);
# 326 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int);
# 327 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int);
# 328 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_settype(pthread_mutexattr_t *, int);
# 329 "/usr/include/pthread.h" 3
extern "C" int pthread_once(pthread_once_t *, void (*)(void));
# 330 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_destroy(pthread_rwlock_t *) __asm__("_pthread_rwlock_destroy$UNIX2003");
# 331 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_init(pthread_rwlock_t *, const pthread_rwlockattr_t *) __asm__("_pthread_rwlock_init$UNIX2003");
# 332 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_rdlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_rdlock$UNIX2003");
# 333 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_tryrdlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_tryrdlock$UNIX2003");
# 334 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_trywrlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_trywrlock$UNIX2003");
# 335 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_wrlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_wrlock$UNIX2003");
# 336 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_unlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_unlock$UNIX2003");
# 337 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_destroy(pthread_rwlockattr_t *);
# 338 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *, int *);
# 340 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_init(pthread_rwlockattr_t *);
# 341 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int);
# 343 "/usr/include/pthread.h" 3
extern "C" pthread_t pthread_self();
# 345 "/usr/include/pthread.h" 3
extern "C" int pthread_setcancelstate(int, int *) __asm__("_pthread_setcancelstate$UNIX2003");
# 346 "/usr/include/pthread.h" 3
extern "C" int pthread_setcanceltype(int, int *) __asm__("_pthread_setcanceltype$UNIX2003");
# 347 "/usr/include/pthread.h" 3
extern "C" int pthread_setconcurrency(int);
# 348 "/usr/include/pthread.h" 3
extern "C" int pthread_setschedparam(pthread_t, int, const sched_param *);
# 351 "/usr/include/pthread.h" 3
extern "C" int pthread_setspecific(pthread_key_t, const void *);
# 353 "/usr/include/pthread.h" 3
extern "C" void pthread_testcancel() __asm__("_pthread_testcancel$UNIX2003");
# 357 "/usr/include/pthread.h" 3
extern "C" int pthread_is_threaded_np();
# 360 "/usr/include/pthread.h" 3
extern "C" int pthread_main_np();
# 363 "/usr/include/pthread.h" 3
extern "C" mach_port_t pthread_mach_thread_np(pthread_t);
# 364 "/usr/include/pthread.h" 3
extern "C" size_t pthread_get_stacksize_np(pthread_t);
# 365 "/usr/include/pthread.h" 3
extern "C" void *pthread_get_stackaddr_np(pthread_t);
# 368 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t);
# 371 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *, const timespec *);
# 376 "/usr/include/pthread.h" 3
extern "C" int pthread_create_suspended_np(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *);
# 380 "/usr/include/pthread.h" 3
extern "C" int pthread_kill(pthread_t, int);
# 382 "/usr/include/pthread.h" 3
extern "C" pthread_t pthread_from_mach_thread_np(mach_port_t);
# 384 "/usr/include/pthread.h" 3
extern "C" int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm__("_pthread_sigmask$UNIX2003");
# 385 "/usr/include/pthread.h" 3
extern "C" void pthread_yield_np();
# 138 "/usr/include/sys/unistd.h" 3
struct accessx_descriptor {
# 139 "/usr/include/sys/unistd.h" 3
unsigned ad_name_offset;
# 140 "/usr/include/sys/unistd.h" 3
int ad_flags;
# 141 "/usr/include/sys/unistd.h" 3
int ad_pad[2];
# 142 "/usr/include/sys/unistd.h" 3
};
# 83 "/usr/include/unistd.h" 3
typedef __darwin_gid_t gid_t;
# 127 "/usr/include/unistd.h" 3
typedef __darwin_useconds_t useconds_t;
# 133 "/usr/include/unistd.h" 3
typedef __darwin_uuid_t uuid_t;
# 416 "/usr/include/unistd.h" 3
extern "C" void _exit(int) __attribute__((__noreturn__));
# 417 "/usr/include/unistd.h" 3
extern "C" int access(const char *, int);
# 419 "/usr/include/unistd.h" 3
extern "C" unsigned alarm(unsigned);
# 420 "/usr/include/unistd.h" 3
extern "C" int chdir(const char *);
# 421 "/usr/include/unistd.h" 3
extern "C" int chown(const char *, uid_t, gid_t);
# 422 "/usr/include/unistd.h" 3
extern "C" int close(int) __asm__("_close$UNIX2003");
# 423 "/usr/include/unistd.h" 3
extern "C" size_t confstr(int, char *, size_t) __asm__("_confstr$UNIX2003");
# 424 "/usr/include/unistd.h" 3
extern "C" char *crypt(const char *, const char *);
# 425 "/usr/include/unistd.h" 3
extern "C" char *ctermid(char *);
# 426 "/usr/include/unistd.h" 3
extern "C" int dup(int);
# 427 "/usr/include/unistd.h" 3
extern "C" int dup2(int, int);
# 429 "/usr/include/unistd.h" 3
extern "C" void encrypt(char *, int) __asm__("_encrypt$UNIX2003");
# 433 "/usr/include/unistd.h" 3
extern "C" int execl(const char *, const char *, ...);
# 434 "/usr/include/unistd.h" 3
extern "C" int execle(const char *, const char *, ...);
# 435 "/usr/include/unistd.h" 3
extern "C" int execlp(const char *, const char *, ...);
# 436 "/usr/include/unistd.h" 3
extern "C" int execv(const char *, char *const *);
# 437 "/usr/include/unistd.h" 3
extern "C" int execve(const char *, char *const *, char *const *);
# 438 "/usr/include/unistd.h" 3
extern "C" int execvp(const char *, char *const *);
# 439 "/usr/include/unistd.h" 3
extern "C" int fchown(int, uid_t, gid_t);
# 440 "/usr/include/unistd.h" 3
extern "C" int fchdir(int);
# 441 "/usr/include/unistd.h" 3
extern "C" pid_t fork();
# 442 "/usr/include/unistd.h" 3
extern "C" long fpathconf(int, int);
# 443 "/usr/include/unistd.h" 3
extern "C" int fsync(int) __asm__("_fsync$UNIX2003");
# 444 "/usr/include/unistd.h" 3
extern "C" int ftruncate(int, off_t);
# 445 "/usr/include/unistd.h" 3
extern "C" char *getcwd(char *, size_t);
# 446 "/usr/include/unistd.h" 3
extern "C" gid_t getegid();
# 447 "/usr/include/unistd.h" 3
extern "C" uid_t geteuid();
# 448 "/usr/include/unistd.h" 3
extern "C" gid_t getgid();
# 449 "/usr/include/unistd.h" 3
extern "C" int getgroups(int, gid_t []);
# 450 "/usr/include/unistd.h" 3
extern "C" long gethostid();
# 451 "/usr/include/unistd.h" 3
extern "C" int gethostname(char *, size_t);
# 452 "/usr/include/unistd.h" 3
extern "C" char *getlogin();
# 453 "/usr/include/unistd.h" 3
extern "C" int getlogin_r(char *, size_t);
# 454 "/usr/include/unistd.h" 3
extern "C" int getopt(int, char *const [], const char *) __asm__("_getopt$UNIX2003");
# 455 "/usr/include/unistd.h" 3
extern "C" pid_t getpgid(pid_t);
# 456 "/usr/include/unistd.h" 3
extern "C" pid_t getpgrp();
# 457 "/usr/include/unistd.h" 3
extern "C" pid_t getpid();
# 458 "/usr/include/unistd.h" 3
extern "C" pid_t getppid();
# 459 "/usr/include/unistd.h" 3
extern "C" pid_t getsid(pid_t);
# 460 "/usr/include/unistd.h" 3
extern "C" uid_t getuid();
# 461 "/usr/include/unistd.h" 3
extern "C" char *getwd(char *);
# 462 "/usr/include/unistd.h" 3
extern "C" int isatty(int);
# 463 "/usr/include/unistd.h" 3
extern "C" int lchown(const char *, uid_t, gid_t) __asm__("_lchown$UNIX2003");
# 464 "/usr/include/unistd.h" 3
extern "C" int link(const char *, const char *);
# 465 "/usr/include/unistd.h" 3
extern "C" int lockf(int, int, off_t) __asm__("_lockf$UNIX2003");
# 466 "/usr/include/unistd.h" 3
extern "C" off_t lseek(int, off_t, int);
# 467 "/usr/include/unistd.h" 3
extern "C" int nice(int) __asm__("_nice$UNIX2003");
# 468 "/usr/include/unistd.h" 3
extern "C" long pathconf(const char *, int);
# 469 "/usr/include/unistd.h" 3
extern "C" int pause() __asm__("_pause$UNIX2003");
# 470 "/usr/include/unistd.h" 3
extern "C" int pipe(int [2]);
# 471 "/usr/include/unistd.h" 3
extern "C" ssize_t pread(int, void *, size_t, off_t) __asm__("_pread$UNIX2003");
# 472 "/usr/include/unistd.h" 3
extern "C" ssize_t pwrite(int, const void *, size_t, off_t) __asm__("_pwrite$UNIX2003");
# 473 "/usr/include/unistd.h" 3
extern "C" ssize_t read(int, void *, size_t) __asm__("_read$UNIX2003");
# 474 "/usr/include/unistd.h" 3
extern "C" ssize_t readlink(const char *, char *, size_t);
# 475 "/usr/include/unistd.h" 3
extern "C" int rmdir(const char *);
# 476 "/usr/include/unistd.h" 3
extern "C" int setegid(gid_t);
# 477 "/usr/include/unistd.h" 3
extern "C" int seteuid(uid_t);
# 478 "/usr/include/unistd.h" 3
extern "C" int setgid(gid_t);
# 479 "/usr/include/unistd.h" 3
extern "C" int setpgid(pid_t, pid_t);
# 481 "/usr/include/unistd.h" 3
extern "C" pid_t setpgrp() __asm__("_setpgrp$UNIX2003");
# 485 "/usr/include/unistd.h" 3
extern "C" int setregid(gid_t, gid_t) __asm__("_setregid$UNIX2003");
# 486 "/usr/include/unistd.h" 3
extern "C" int setreuid(uid_t, uid_t) __asm__("_setreuid$UNIX2003");
# 487 "/usr/include/unistd.h" 3
extern "C" pid_t setsid();
# 488 "/usr/include/unistd.h" 3
extern "C" int setuid(uid_t);
# 490 "/usr/include/unistd.h" 3
extern "C" unsigned sleep(unsigned) __asm__("_sleep$UNIX2003");
# 491 "/usr/include/unistd.h" 3
extern "C" void swab(const void *, void *, ssize_t);
# 492 "/usr/include/unistd.h" 3
extern "C" int symlink(const char *, const char *);
# 493 "/usr/include/unistd.h" 3
extern "C" void sync();
# 494 "/usr/include/unistd.h" 3
extern "C" long sysconf(int);
# 495 "/usr/include/unistd.h" 3
extern "C" pid_t tcgetpgrp(int);
# 496 "/usr/include/unistd.h" 3
extern "C" int tcsetpgrp(int, pid_t);
# 497 "/usr/include/unistd.h" 3
extern "C" int truncate(const char *, off_t);
# 498 "/usr/include/unistd.h" 3
extern "C" char *ttyname(int);
# 500 "/usr/include/unistd.h" 3
extern "C" int ttyname_r(int, char *, size_t) __asm__("_ttyname_r$UNIX2003");
# 505 "/usr/include/unistd.h" 3
extern "C" useconds_t ualarm(useconds_t, useconds_t);
# 506 "/usr/include/unistd.h" 3
extern "C" int unlink(const char *);
# 507 "/usr/include/unistd.h" 3
extern "C" int usleep(useconds_t) __asm__("_usleep$UNIX2003");
# 508 "/usr/include/unistd.h" 3
extern "C" pid_t vfork();
# 509 "/usr/include/unistd.h" 3
extern "C" ssize_t write(int, const void *, size_t) __asm__("_write$UNIX2003");
# 511 "/usr/include/unistd.h" 3
extern "C" { extern char *optarg; }
# 512 "/usr/include/unistd.h" 3
extern "C" { extern int optind; } extern "C" { extern int opterr; } extern "C" { extern int optopt; }
# 186 "/usr/include/sys/_structs.h" 3
extern "C" { typedef
# 184 "/usr/include/sys/_structs.h" 3
struct fd_set {
# 185 "/usr/include/sys/_structs.h" 3
__int32_t fds_bits[(((1024) + ((sizeof(__int32_t) * (8)) - (1))) / (sizeof(__int32_t) * (8)))];
# 186 "/usr/include/sys/_structs.h" 3
} fd_set; }
# 191 "/usr/include/sys/_structs.h" 3
extern "C" { static inline int __darwin_fd_isset(int _n, fd_set *_p)
# 192 "/usr/include/sys/_structs.h" 3
{
# 193 "/usr/include/sys/_structs.h" 3
return ((_p->fds_bits)[_n / (sizeof(__int32_t) * (8))]) & (1 << (_n % (sizeof(__int32_t) * (8))));
# 194 "/usr/include/sys/_structs.h" 3
} }
# 92 "/usr/include/sys/select.h" 3
extern "C" { typedef __darwin_suseconds_t suseconds_t; }
# 137 "/usr/include/sys/select.h" 3
extern "C" int pselect(int, fd_set *, fd_set *, fd_set *, const timespec *, const sigset_t *) __asm__("_pselect$UNIX2003");
# 39 "/usr/include/sys/_select.h" 3
extern "C" int select(int, fd_set *, fd_set *, fd_set *, timeval *) __asm__("_select$UNIX2003");
# 517 "/usr/include/unistd.h" 3
extern "C" void _Exit(int) __attribute__((__noreturn__));
# 518 "/usr/include/unistd.h" 3
extern "C" int accessx_np(const accessx_descriptor *, size_t, int *, uid_t);
# 519 "/usr/include/unistd.h" 3
extern "C" int acct(const char *);
# 520 "/usr/include/unistd.h" 3
extern "C" int add_profil(char *, size_t, unsigned long, unsigned);
# 521 "/usr/include/unistd.h" 3
extern "C" void *brk(const void *);
# 522 "/usr/include/unistd.h" 3
extern "C" int chroot(const char *);
# 523 "/usr/include/unistd.h" 3
extern "C" void endusershell();
# 524 "/usr/include/unistd.h" 3
extern "C" int execvP(const char *, const char *, char *const *);
# 525 "/usr/include/unistd.h" 3
extern "C" char *fflagstostr(unsigned long);
# 526 "/usr/include/unistd.h" 3
extern "C" int getdtablesize();
# 527 "/usr/include/unistd.h" 3
extern "C" int getdomainname(char *, int);
# 528 "/usr/include/unistd.h" 3
extern "C" int getgrouplist(const char *, int, int *, int *);
# 529 "/usr/include/unistd.h" 3
extern "C" mode_t getmode(const void *, mode_t);
# 530 "/usr/include/unistd.h" 3
extern "C" int getpagesize() __attribute__((__const__));
# 531 "/usr/include/unistd.h" 3
extern "C" char *getpass(const char *);
# 532 "/usr/include/unistd.h" 3
extern "C" int getpeereid(int, uid_t *, gid_t *);
# 533 "/usr/include/unistd.h" 3
extern "C" int getpgid(pid_t);
# 534 "/usr/include/unistd.h" 3
extern "C" int getsgroups_np(int *, uuid_t);
# 535 "/usr/include/unistd.h" 3
extern "C" int getsid(pid_t);
# 536 "/usr/include/unistd.h" 3
extern "C" char *getusershell();
# 537 "/usr/include/unistd.h" 3
extern "C" int getwgroups_np(int *, uuid_t);
# 538 "/usr/include/unistd.h" 3
extern "C" int initgroups(const char *, int);
# 539 "/usr/include/unistd.h" 3
extern "C" int iruserok(unsigned long, int, const char *, const char *);
# 540 "/usr/include/unistd.h" 3
extern "C" int iruserok_sa(const void *, int, int, const char *, const char *);
# 541 "/usr/include/unistd.h" 3
extern "C" int issetugid();
# 542 "/usr/include/unistd.h" 3
extern "C" char *mkdtemp(char *);
# 543 "/usr/include/unistd.h" 3
extern "C" int mknod(const char *, mode_t, dev_t);
# 544 "/usr/include/unistd.h" 3
extern "C" int mkstemp(char *);
# 545 "/usr/include/unistd.h" 3
extern "C" int mkstemps(char *, int);
# 546 "/usr/include/unistd.h" 3
extern "C" char *mktemp(char *);
# 547 "/usr/include/unistd.h" 3
extern "C" int nfssvc(int, void *);
# 548 "/usr/include/unistd.h" 3
extern "C" int profil(char *, size_t, unsigned long, unsigned);
# 549 "/usr/include/unistd.h" 3
extern "C" int pthread_setugid_np(uid_t, gid_t);
# 550 "/usr/include/unistd.h" 3
extern "C" int pthread_getugid_np(uid_t *, gid_t *);
# 551 "/usr/include/unistd.h" 3
extern "C" int rcmd(char **, int, const char *, const char *, const char *, int *);
# 552 "/usr/include/unistd.h" 3
extern "C" int rcmd_af(char **, int, const char *, const char *, const char *, int *, int);
# 554 "/usr/include/unistd.h" 3
extern "C" int reboot(int);
# 555 "/usr/include/unistd.h" 3
extern "C" int revoke(const char *);
# 556 "/usr/include/unistd.h" 3
extern "C" int rresvport(int *);
# 557 "/usr/include/unistd.h" 3
extern "C" int rresvport_af(int *, int);
# 558 "/usr/include/unistd.h" 3
extern "C" int ruserok(const char *, int, const char *, const char *);
# 559 "/usr/include/unistd.h" 3
extern "C" void *sbrk(int);
# 560 "/usr/include/unistd.h" 3
extern "C" int setdomainname(const char *, int);
# 561 "/usr/include/unistd.h" 3
extern "C" int setgroups(int, const gid_t *);
# 562 "/usr/include/unistd.h" 3
extern "C" void sethostid(long);
# 563 "/usr/include/unistd.h" 3
extern "C" int sethostname(const char *, int);
# 565 "/usr/include/unistd.h" 3
extern "C" void setkey(const char *) __asm__("_setkey$UNIX2003");
# 569 "/usr/include/unistd.h" 3
extern "C" int setlogin(const char *);
# 570 "/usr/include/unistd.h" 3
extern "C" void *setmode(const char *);
# 571 "/usr/include/unistd.h" 3
extern "C" int setrgid(gid_t);
# 572 "/usr/include/unistd.h" 3
extern "C" int setruid(uid_t);
# 573 "/usr/include/unistd.h" 3
extern "C" int setsgroups_np(int, const uuid_t);
# 574 "/usr/include/unistd.h" 3
extern "C" void setusershell();
# 575 "/usr/include/unistd.h" 3
extern "C" int setwgroups_np(int, const uuid_t);
# 576 "/usr/include/unistd.h" 3
extern "C" int strtofflags(char **, unsigned long *, unsigned long *);
# 577 "/usr/include/unistd.h" 3
extern "C" int swapon(const char *);
# 578 "/usr/include/unistd.h" 3
extern "C" int syscall(int, ...);
# 579 "/usr/include/unistd.h" 3
extern "C" int ttyslot();
# 580 "/usr/include/unistd.h" 3
extern "C" int undelete(const char *);
# 581 "/usr/include/unistd.h" 3
extern "C" int unwhiteout(const char *);
# 582 "/usr/include/unistd.h" 3
extern "C" void *valloc(size_t);
# 584 "/usr/include/unistd.h" 3
extern "C" { extern char *suboptarg; }
# 585 "/usr/include/unistd.h" 3
extern "C" int getsubopt(char **, char *const *, char **);
# 597 "/usr/include/unistd.h" 3
extern "C" int getattrlist(const char *, void *, void *, size_t, unsigned long) __asm__("_getattrlist$UNIX2003");
# 598 "/usr/include/unistd.h" 3
extern "C" int setattrlist(const char *, void *, void *, size_t, unsigned long) __asm__("_setattrlist$UNIX2003");
# 599 "/usr/include/unistd.h" 3
extern "C" int exchangedata(const char *, const char *, unsigned long);
# 600 "/usr/include/unistd.h" 3
extern "C" int getdirentriesattr(int, void *, void *, size_t, unsigned long *, unsigned long *, unsigned long *, unsigned long);
# 601 "/usr/include/unistd.h" 3
extern "C" int searchfs(const char *, void *, void *, unsigned long, unsigned long, void *);
# 603 "/usr/include/unistd.h" 3
extern "C" int fsctl(const char *, unsigned long, void *, unsigned long);
# 606 "/usr/include/unistd.h" 3
extern "C" { extern int optreset; }
# 46 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
typedef pthread_key_t __gthread_key_t;
# 47 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
typedef pthread_once_t __gthread_once_t;
# 48 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
typedef pthread_mutex_t __gthread_mutex_t;
# 49 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
typedef pthread_mutex_t __gthread_recursive_mutex_t;
# 117 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_active_p()
# 118 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 119 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return 1;
# 120 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 474 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_once(__gthread_once_t *once, void (*func)(void))
# 475 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 476 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 477 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return pthread_once(once, func); } else {
# 479 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return -1; }
# 480 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 483 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_key_create(__gthread_key_t *key, void (*dtor)(void *))
# 484 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 485 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return pthread_key_create(key, dtor);
# 486 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 489 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_key_delete(__gthread_key_t key)
# 490 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 491 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return pthread_key_delete(key);
# 492 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 495 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline void *__gthread_getspecific(__gthread_key_t key)
# 496 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 497 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return pthread_getspecific(key);
# 498 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 501 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_setspecific(__gthread_key_t key, const void *ptr)
# 502 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 503 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return pthread_setspecific(key, ptr);
# 504 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 507 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_mutex_lock(__gthread_mutex_t *mutex)
# 508 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 509 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 510 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return pthread_mutex_lock(mutex); } else {
# 512 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return 0; }
# 513 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 516 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_mutex_trylock(__gthread_mutex_t *mutex)
# 517 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 518 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 519 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return pthread_mutex_trylock(mutex); } else {
# 521 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return 0; }
# 522 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 525 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_mutex_unlock(__gthread_mutex_t *mutex)
# 526 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 527 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 528 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return pthread_mutex_unlock(mutex); } else {
# 530 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return 0; }
# 531 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 535 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_init_function(__gthread_recursive_mutex_t *mutex)
# 536 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 537 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
if (__gthread_active_p())
# 538 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 539 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
auto pthread_mutexattr_t attr;
# 540 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
auto int r;
# 542 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
r = pthread_mutexattr_init(&attr);
# 543 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
if (!(r)) {
# 544 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
r = pthread_mutexattr_settype(&attr, 2); }
# 545 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
if (!(r)) {
# 546 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
r = pthread_mutex_init(mutex, &attr); }
# 547 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
if (!(r)) {
# 548 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
r = pthread_mutexattr_destroy(&attr); }
# 549 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return r;
# 550 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 551 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 555 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *mutex)
# 556 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 557 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return __gthread_mutex_lock(mutex);
# 558 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 561 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *mutex)
# 562 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 563 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return __gthread_mutex_trylock(mutex);
# 564 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 567 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *mutex)
# 568 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
{
# 569 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
return __gthread_mutex_unlock(mutex);
# 570 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr-default.h" 3
}
# 122 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/gthr.h" 3
#pragma GCC visibility pop
# 39 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
namespace std {
# 41 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
typedef __gthread_mutex_t __c_lock;
# 44 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
typedef FILE __c_file;
# 48 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
struct __ios_flags {
# 50 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
typedef short __int_type;
# 52 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_boolalpha = (1);
# 53 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_dec = (2);
# 54 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_fixed = (4);
# 55 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_hex = (8);
# 56 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_internal = (16);
# 57 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_left = (32);
# 58 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_oct = (64);
# 59 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_right = (128);
# 60 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_scientific = (256);
# 61 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_showbase = (512);
# 62 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_showpoint = (1024);
# 63 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_showpos = (2048);
# 64 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_skipws = (4096);
# 65 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_unitbuf = (8192);
# 66 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_uppercase = (16384);
# 67 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_adjustfield = ((32 | 128) | 16);
# 68 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_basefield = ((2 | 64) | 8);
# 69 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_floatfield = (256 | 4);
# 72 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_badbit = (1);
# 73 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_eofbit = (2);
# 74 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_failbit = (4);
# 77 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_app = (1);
# 78 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_ate = (2);
# 79 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_bin = (4);
# 80 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_in = (8);
# 81 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_out = (16);
# 82 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
static const __int_type _S_trunc = (32);
# 83 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
};
# 84 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/c++io.h" 3
}
# 70 "/usr/include/runetype.h" 3
typedef __darwin_wint_t wint_t;
# 86 "/usr/include/runetype.h" 3
typedef
# 81 "/usr/include/runetype.h" 3
struct _RuneEntry {
# 82 "/usr/include/runetype.h" 3
__darwin_rune_t __min;
# 83 "/usr/include/runetype.h" 3
__darwin_rune_t __max;
# 84 "/usr/include/runetype.h" 3
__darwin_rune_t __map;
# 85 "/usr/include/runetype.h" 3
__uint32_t *__types;
# 86 "/usr/include/runetype.h" 3
} _RuneEntry;
# 91 "/usr/include/runetype.h" 3
typedef
# 88 "/usr/include/runetype.h" 3
struct _RuneRange {
# 89 "/usr/include/runetype.h" 3
int __nranges;
# 90 "/usr/include/runetype.h" 3
_RuneEntry *__ranges;
# 91 "/usr/include/runetype.h" 3
} _RuneRange;
# 96 "/usr/include/runetype.h" 3
typedef
# 93 "/usr/include/runetype.h" 3
struct _RuneCharClass {
# 94 "/usr/include/runetype.h" 3
char __name[14];
# 95 "/usr/include/runetype.h" 3
__uint32_t __mask;
# 96 "/usr/include/runetype.h" 3
} _RuneCharClass;
# 127 "/usr/include/runetype.h" 3
typedef
# 98 "/usr/include/runetype.h" 3
struct _RuneLocale {
# 99 "/usr/include/runetype.h" 3
char __magic[8];
# 100 "/usr/include/runetype.h" 3
char __encoding[32];
# 102 "/usr/include/runetype.h" 3
__darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, const char **);
# 103 "/usr/include/runetype.h" 3
int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
# 104 "/usr/include/runetype.h" 3
__darwin_rune_t __invalid_rune;
# 106 "/usr/include/runetype.h" 3
__uint32_t __runetype[(1 << 8)];
# 107 "/usr/include/runetype.h" 3
__darwin_rune_t __maplower[(1 << 8)];
# 108 "/usr/include/runetype.h" 3
__darwin_rune_t __mapupper[(1 << 8)];
# 115 "/usr/include/runetype.h" 3
_RuneRange __runetype_ext;
# 116 "/usr/include/runetype.h" 3
_RuneRange __maplower_ext;
# 117 "/usr/include/runetype.h" 3
_RuneRange __mapupper_ext;
# 119 "/usr/include/runetype.h" 3
void *__variable;
# 120 "/usr/include/runetype.h" 3
int __variable_len;
# 125 "/usr/include/runetype.h" 3
int __ncharclasses;
# 126 "/usr/include/runetype.h" 3
_RuneCharClass *__charclasses;
# 127 "/usr/include/runetype.h" 3
} _RuneLocale;
# 132 "/usr/include/runetype.h" 3
extern "C" { extern _RuneLocale _DefaultRuneLocale; }
# 133 "/usr/include/runetype.h" 3
extern "C" { extern _RuneLocale *_CurrentRuneLocale; }
# 146 "/usr/include/ctype.h" 3
extern "C" unsigned long ___runetype(__darwin_ct_rune_t);
# 147 "/usr/include/ctype.h" 3
extern "C" __darwin_ct_rune_t ___tolower(__darwin_ct_rune_t);
# 148 "/usr/include/ctype.h" 3
extern "C" __darwin_ct_rune_t ___toupper(__darwin_ct_rune_t);
# 152 "/usr/include/ctype.h" 3
static inline int isascii(int _c)
# 153 "/usr/include/ctype.h" 3
{
# 154 "/usr/include/ctype.h" 3
return (_c & (~127)) == 0;
# 155 "/usr/include/ctype.h" 3
}
# 165 "/usr/include/ctype.h" 3
extern "C" int __maskrune(__darwin_ct_rune_t, unsigned long);
# 170 "/usr/include/ctype.h" 3
static inline int __istype(__darwin_ct_rune_t _c, unsigned long _f)
# 171 "/usr/include/ctype.h" 3
{
# 175 "/usr/include/ctype.h" 3
return (isascii(_c)) ? (!(!(((_DefaultRuneLocale.__runetype)[_c]) & _f))) : (!(!(__maskrune(_c, _f))));
# 178 "/usr/include/ctype.h" 3
}
# 181 "/usr/include/ctype.h" 3
static inline __darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c, unsigned long _f)
# 182 "/usr/include/ctype.h" 3
{
# 186 "/usr/include/ctype.h" 3
return ((_c < 0) || (_c >= (1 << 8))) ? 0 : (!(!(((_DefaultRuneLocale.__runetype)[_c]) & _f)));
# 189 "/usr/include/ctype.h" 3
}
# 205 "/usr/include/ctype.h" 3
extern "C" __darwin_ct_rune_t __toupper(__darwin_ct_rune_t);
# 206 "/usr/include/ctype.h" 3
extern "C" __darwin_ct_rune_t __tolower(__darwin_ct_rune_t);
# 211 "/usr/include/ctype.h" 3
static inline int __wcwidth(__darwin_ct_rune_t _c)
# 212 "/usr/include/ctype.h" 3
{
# 213 "/usr/include/ctype.h" 3
auto unsigned _x;
# 215 "/usr/include/ctype.h" 3
if (_c == 0) {
# 216 "/usr/include/ctype.h" 3
return 0; }
# 217 "/usr/include/ctype.h" 3
_x = (unsigned)__maskrune(_c, 3758096384UL | (262144L));
# 218 "/usr/include/ctype.h" 3
if ((_x & 3758096384UL) != (0)) {
# 219 "/usr/include/ctype.h" 3
return (_x & 3758096384UL) >> 30; }
# 220 "/usr/include/ctype.h" 3
return ((_x & (262144L)) != (0)) ? 1 : (-1);
# 221 "/usr/include/ctype.h" 3
}
# 229 "/usr/include/ctype.h" 3
static inline int isalnum(int _c)
# 230 "/usr/include/ctype.h" 3
{
# 231 "/usr/include/ctype.h" 3
return __istype(_c, 256L | 1024L);
# 232 "/usr/include/ctype.h" 3
}
# 235 "/usr/include/ctype.h" 3
static inline int isalpha(int _c)
# 236 "/usr/include/ctype.h" 3
{
# 237 "/usr/include/ctype.h" 3
return __istype(_c, 256L);
# 238 "/usr/include/ctype.h" 3
}
# 241 "/usr/include/ctype.h" 3
static inline int isblank(int _c)
# 242 "/usr/include/ctype.h" 3
{
# 243 "/usr/include/ctype.h" 3
return __istype(_c, 131072L);
# 244 "/usr/include/ctype.h" 3
}
# 247 "/usr/include/ctype.h" 3
static inline int iscntrl(int _c)
# 248 "/usr/include/ctype.h" 3
{
# 249 "/usr/include/ctype.h" 3
return __istype(_c, 512L);
# 250 "/usr/include/ctype.h" 3
}
# 254 "/usr/include/ctype.h" 3
static inline int isdigit(int _c)
# 255 "/usr/include/ctype.h" 3
{
# 256 "/usr/include/ctype.h" 3
return __isctype(_c, 1024L);
# 257 "/usr/include/ctype.h" 3
}
# 260 "/usr/include/ctype.h" 3
static inline int isgraph(int _c)
# 261 "/usr/include/ctype.h" 3
{
# 262 "/usr/include/ctype.h" 3
return __istype(_c, 2048L);
# 263 "/usr/include/ctype.h" 3
}
# 266 "/usr/include/ctype.h" 3
static inline int islower(int _c)
# 267 "/usr/include/ctype.h" 3
{
# 268 "/usr/include/ctype.h" 3
return __istype(_c, 4096L);
# 269 "/usr/include/ctype.h" 3
}
# 272 "/usr/include/ctype.h" 3
static inline int isprint(int _c)
# 273 "/usr/include/ctype.h" 3
{
# 274 "/usr/include/ctype.h" 3
return __istype(_c, 262144L);
# 275 "/usr/include/ctype.h" 3
}
# 278 "/usr/include/ctype.h" 3
static inline int ispunct(int _c)
# 279 "/usr/include/ctype.h" 3
{
# 280 "/usr/include/ctype.h" 3
return __istype(_c, 8192L);
# 281 "/usr/include/ctype.h" 3
}
# 284 "/usr/include/ctype.h" 3
static inline int isspace(int _c)
# 285 "/usr/include/ctype.h" 3
{
# 286 "/usr/include/ctype.h" 3
return __istype(_c, 16384L);
# 287 "/usr/include/ctype.h" 3
}
# 290 "/usr/include/ctype.h" 3
static inline int isupper(int _c)
# 291 "/usr/include/ctype.h" 3
{
# 292 "/usr/include/ctype.h" 3
return __istype(_c, 32768L);
# 293 "/usr/include/ctype.h" 3
}
# 297 "/usr/include/ctype.h" 3
static inline int isxdigit(int _c)
# 298 "/usr/include/ctype.h" 3
{
# 299 "/usr/include/ctype.h" 3
return __isctype(_c, 65536L);
# 300 "/usr/include/ctype.h" 3
}
# 303 "/usr/include/ctype.h" 3
static inline int toascii(int _c)
# 304 "/usr/include/ctype.h" 3
{
# 305 "/usr/include/ctype.h" 3
return _c & 127;
# 306 "/usr/include/ctype.h" 3
}
# 309 "/usr/include/ctype.h" 3
static inline int tolower(int _c)
# 310 "/usr/include/ctype.h" 3
{
# 311 "/usr/include/ctype.h" 3
return __tolower(_c);
# 312 "/usr/include/ctype.h" 3
}
# 315 "/usr/include/ctype.h" 3
static inline int toupper(int _c)
# 316 "/usr/include/ctype.h" 3
{
# 317 "/usr/include/ctype.h" 3
return __toupper(_c);
# 318 "/usr/include/ctype.h" 3
}
# 322 "/usr/include/ctype.h" 3
static inline int digittoint(int _c)
# 323 "/usr/include/ctype.h" 3
{
# 324 "/usr/include/ctype.h" 3
return __maskrune(_c, 15);
# 325 "/usr/include/ctype.h" 3
}
# 328 "/usr/include/ctype.h" 3
static inline int ishexnumber(int _c)
# 329 "/usr/include/ctype.h" 3
{
# 330 "/usr/include/ctype.h" 3
return __istype(_c, 65536L);
# 331 "/usr/include/ctype.h" 3
}
# 334 "/usr/include/ctype.h" 3
static inline int isideogram(int _c)
# 335 "/usr/include/ctype.h" 3
{
# 336 "/usr/include/ctype.h" 3
return __istype(_c, 524288L);
# 337 "/usr/include/ctype.h" 3
}
# 340 "/usr/include/ctype.h" 3
static inline int isnumber(int _c)
# 341 "/usr/include/ctype.h" 3
{
# 342 "/usr/include/ctype.h" 3
return __istype(_c, 1024L);
# 343 "/usr/include/ctype.h" 3
}
# 346 "/usr/include/ctype.h" 3
static inline int isphonogram(int _c)
# 347 "/usr/include/ctype.h" 3
{
# 348 "/usr/include/ctype.h" 3
return __istype(_c, 2097152L);
# 349 "/usr/include/ctype.h" 3
}
# 352 "/usr/include/ctype.h" 3
static inline int isrune(int _c)
# 353 "/usr/include/ctype.h" 3
{
# 354 "/usr/include/ctype.h" 3
return __istype(_c, 4294967280UL);
# 355 "/usr/include/ctype.h" 3
}
# 358 "/usr/include/ctype.h" 3
static inline int isspecial(int _c)
# 359 "/usr/include/ctype.h" 3
{
# 360 "/usr/include/ctype.h" 3
return __istype(_c, 1048576L);
# 361 "/usr/include/ctype.h" 3
}
# 66 "/usr/include/c++/4.0.0/cctype" 3
namespace std {
# 68 "/usr/include/c++/4.0.0/cctype" 3
using ::isalnum;
# 69 "/usr/include/c++/4.0.0/cctype" 3
using ::isalpha;
# 70 "/usr/include/c++/4.0.0/cctype" 3
using ::iscntrl;
# 71 "/usr/include/c++/4.0.0/cctype" 3
using ::isdigit;
# 72 "/usr/include/c++/4.0.0/cctype" 3
using ::isgraph;
# 73 "/usr/include/c++/4.0.0/cctype" 3
using ::islower;
# 74 "/usr/include/c++/4.0.0/cctype" 3
using ::isprint;
# 75 "/usr/include/c++/4.0.0/cctype" 3
using ::ispunct;
# 76 "/usr/include/c++/4.0.0/cctype" 3
using ::isspace;
# 77 "/usr/include/c++/4.0.0/cctype" 3
using ::isupper;
# 78 "/usr/include/c++/4.0.0/cctype" 3
using ::isxdigit;
# 79 "/usr/include/c++/4.0.0/cctype" 3
using ::tolower;
# 80 "/usr/include/c++/4.0.0/cctype" 3
using ::toupper;
# 81 "/usr/include/c++/4.0.0/cctype" 3
}
# 46 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
namespace std {
# 48 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
template<class _Alloc> class allocator;
# 51 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
template<class _CharT> struct char_traits;
# 54 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
template<class _CharT, class _Traits = char_traits< _CharT> , class
# 55 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
_Alloc = allocator< _CharT> > class basic_string;
# 58 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
template<> struct char_traits< char> ;
# 60 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
typedef basic_string< char, char_traits< char> , allocator< char> > string;
# 63 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
template<> struct char_traits< wchar_t> ;
# 65 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
typedef basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstring;
# 67 "/usr/include/c++/4.0.0/bits/stringfwd.h" 3
}
# 64 "/usr/include/c++/4.0.0/ctime" 3
namespace std {
# 66 "/usr/include/c++/4.0.0/ctime" 3
using ::clock_t;
# 67 "/usr/include/c++/4.0.0/ctime" 3
using ::time_t;
# 68 "/usr/include/c++/4.0.0/ctime" 3
using ::tm;
# 70 "/usr/include/c++/4.0.0/ctime" 3
using ::clock;
# 71 "/usr/include/c++/4.0.0/ctime" 3
using ::difftime;
# 72 "/usr/include/c++/4.0.0/ctime" 3
using ::mktime;
# 73 "/usr/include/c++/4.0.0/ctime" 3
using ::time;
# 74 "/usr/include/c++/4.0.0/ctime" 3
using ::asctime;
# 75 "/usr/include/c++/4.0.0/ctime" 3
using ::ctime;
# 76 "/usr/include/c++/4.0.0/ctime" 3
using ::gmtime;
# 77 "/usr/include/c++/4.0.0/ctime" 3
using ::localtime;
# 78 "/usr/include/c++/4.0.0/ctime" 3
using ::strftime;
# 79 "/usr/include/c++/4.0.0/ctime" 3
}
# 83 "/usr/include/wchar.h" 3
typedef __darwin_mbstate_t mbstate_t;
# 43 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 52 "/usr/include/_wctype.h" 3
typedef __darwin_wctype_t wctype_t;
# 72 "/usr/include/_wctype.h" 3
static inline int iswalnum(wint_t _wc)
# 73 "/usr/include/_wctype.h" 3
{
# 74 "/usr/include/_wctype.h" 3
return __istype(_wc, 256L | 1024L);
# 75 "/usr/include/_wctype.h" 3
}
# 78 "/usr/include/_wctype.h" 3
static inline int iswalpha(wint_t _wc)
# 79 "/usr/include/_wctype.h" 3
{
# 80 "/usr/include/_wctype.h" 3
return __istype(_wc, 256L);
# 81 "/usr/include/_wctype.h" 3
}
# 84 "/usr/include/_wctype.h" 3
static inline int iswcntrl(wint_t _wc)
# 85 "/usr/include/_wctype.h" 3
{
# 86 "/usr/include/_wctype.h" 3
return __istype(_wc, 512L);
# 87 "/usr/include/_wctype.h" 3
}
# 90 "/usr/include/_wctype.h" 3
static inline int iswctype(wint_t _wc, wctype_t _charclass)
# 91 "/usr/include/_wctype.h" 3
{
# 92 "/usr/include/_wctype.h" 3
return __istype(_wc, _charclass);
# 93 "/usr/include/_wctype.h" 3
}
# 96 "/usr/include/_wctype.h" 3
static inline int iswdigit(wint_t _wc)
# 97 "/usr/include/_wctype.h" 3
{
# 98 "/usr/include/_wctype.h" 3
return __isctype(_wc, 1024L);
# 99 "/usr/include/_wctype.h" 3
}
# 102 "/usr/include/_wctype.h" 3
static inline int iswgraph(wint_t _wc)
# 103 "/usr/include/_wctype.h" 3
{
# 104 "/usr/include/_wctype.h" 3
return __istype(_wc, 2048L);
# 105 "/usr/include/_wctype.h" 3
}
# 108 "/usr/include/_wctype.h" 3
static inline int iswlower(wint_t _wc)
# 109 "/usr/include/_wctype.h" 3
{
# 110 "/usr/include/_wctype.h" 3
return __istype(_wc, 4096L);
# 111 "/usr/include/_wctype.h" 3
}
# 114 "/usr/include/_wctype.h" 3
static inline int iswprint(wint_t _wc)
# 115 "/usr/include/_wctype.h" 3
{
# 116 "/usr/include/_wctype.h" 3
return __istype(_wc, 262144L);
# 117 "/usr/include/_wctype.h" 3
}
# 120 "/usr/include/_wctype.h" 3
static inline int iswpunct(wint_t _wc)
# 121 "/usr/include/_wctype.h" 3
{
# 122 "/usr/include/_wctype.h" 3
return __istype(_wc, 8192L);
# 123 "/usr/include/_wctype.h" 3
}
# 126 "/usr/include/_wctype.h" 3
static inline int iswspace(wint_t _wc)
# 127 "/usr/include/_wctype.h" 3
{
# 128 "/usr/include/_wctype.h" 3
return __istype(_wc, 16384L);
# 129 "/usr/include/_wctype.h" 3
}
# 132 "/usr/include/_wctype.h" 3
static inline int iswupper(wint_t _wc)
# 133 "/usr/include/_wctype.h" 3
{
# 134 "/usr/include/_wctype.h" 3
return __istype(_wc, 32768L);
# 135 "/usr/include/_wctype.h" 3
}
# 138 "/usr/include/_wctype.h" 3
static inline int iswxdigit(wint_t _wc)
# 139 "/usr/include/_wctype.h" 3
{
# 140 "/usr/include/_wctype.h" 3
return __isctype(_wc, 65536L);
# 141 "/usr/include/_wctype.h" 3
}
# 144 "/usr/include/_wctype.h" 3
static inline wint_t towlower(wint_t _wc)
# 145 "/usr/include/_wctype.h" 3
{
# 146 "/usr/include/_wctype.h" 3
return __tolower(_wc);
# 147 "/usr/include/_wctype.h" 3
}
# 150 "/usr/include/_wctype.h" 3
static inline wint_t towupper(wint_t _wc)
# 151 "/usr/include/_wctype.h" 3
{
# 152 "/usr/include/_wctype.h" 3
return __toupper(_wc);
# 153 "/usr/include/_wctype.h" 3
}
# 178 "/usr/include/_wctype.h" 3
extern "C" wctype_t wctype(const char *);
# 117 "/usr/include/wchar.h" 3
extern "C" wint_t btowc(int);
# 118 "/usr/include/wchar.h" 3
extern "C" wint_t fgetwc(FILE *);
# 119 "/usr/include/wchar.h" 3
extern "C" wchar_t *fgetws(wchar_t *, int, FILE *);
# 120 "/usr/include/wchar.h" 3
extern "C" wint_t fputwc(wchar_t, FILE *);
# 121 "/usr/include/wchar.h" 3
extern "C" int fputws(const wchar_t *, FILE *);
# 122 "/usr/include/wchar.h" 3
extern "C" int fwide(FILE *, int);
# 123 "/usr/include/wchar.h" 3
extern "C" int fwprintf(FILE *, const wchar_t *, ...);
# 124 "/usr/include/wchar.h" 3
extern "C" int fwscanf(FILE *, const wchar_t *, ...);
# 125 "/usr/include/wchar.h" 3
extern "C" wint_t getwc(FILE *);
# 126 "/usr/include/wchar.h" 3
extern "C" wint_t getwchar();
# 127 "/usr/include/wchar.h" 3
extern "C" size_t mbrlen(const char *, size_t, mbstate_t *);
# 128 "/usr/include/wchar.h" 3
extern "C" size_t mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
# 130 "/usr/include/wchar.h" 3
extern "C" int mbsinit(const mbstate_t *);
# 131 "/usr/include/wchar.h" 3
extern "C" size_t mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);
# 133 "/usr/include/wchar.h" 3
extern "C" wint_t putwc(wchar_t, FILE *);
# 134 "/usr/include/wchar.h" 3
extern "C" wint_t putwchar(wchar_t);
# 135 "/usr/include/wchar.h" 3
extern "C" int swprintf(wchar_t *, size_t, const wchar_t *, ...);
# 137 "/usr/include/wchar.h" 3
extern "C" int swscanf(const wchar_t *, const wchar_t *, ...);
# 138 "/usr/include/wchar.h" 3
extern "C" wint_t ungetwc(wint_t, FILE *);
# 139 "/usr/include/wchar.h" 3
extern "C" int vfwprintf(FILE *, const wchar_t *, __darwin_va_list);
# 141 "/usr/include/wchar.h" 3
extern "C" int vswprintf(wchar_t *, size_t, const wchar_t *, __darwin_va_list);
# 143 "/usr/include/wchar.h" 3
extern "C" int vwprintf(const wchar_t *, __darwin_va_list);
# 144 "/usr/include/wchar.h" 3
extern "C" size_t wcrtomb(char *, wchar_t, mbstate_t *);
# 145 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcscat(wchar_t *, const wchar_t *);
# 146 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcschr(const wchar_t *, wchar_t);
# 147 "/usr/include/wchar.h" 3
extern "C" int wcscmp(const wchar_t *, const wchar_t *);
# 148 "/usr/include/wchar.h" 3
extern "C" int wcscoll(const wchar_t *, const wchar_t *);
# 149 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcscpy(wchar_t *, const wchar_t *);
# 150 "/usr/include/wchar.h" 3
extern "C" size_t wcscspn(const wchar_t *, const wchar_t *);
# 151 "/usr/include/wchar.h" 3
extern "C" size_t wcsftime(wchar_t *, size_t, const wchar_t *, const tm *) __asm__("_wcsftime$UNIX2003");
# 153 "/usr/include/wchar.h" 3
extern "C" size_t wcslen(const wchar_t *);
# 154 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsncat(wchar_t *, const wchar_t *, size_t);
# 155 "/usr/include/wchar.h" 3
extern "C" int wcsncmp(const wchar_t *, const wchar_t *, size_t);
# 156 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsncpy(wchar_t *, const wchar_t *, size_t);
# 157 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcspbrk(const wchar_t *, const wchar_t *);
# 158 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsrchr(const wchar_t *, wchar_t);
# 159 "/usr/include/wchar.h" 3
extern "C" size_t wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
# 161 "/usr/include/wchar.h" 3
extern "C" size_t wcsspn(const wchar_t *, const wchar_t *);
# 162 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsstr(const wchar_t *, const wchar_t *);
# 163 "/usr/include/wchar.h" 3
extern "C" size_t wcsxfrm(wchar_t *, const wchar_t *, size_t);
# 164 "/usr/include/wchar.h" 3
extern "C" int wctob(wint_t);
# 165 "/usr/include/wchar.h" 3
extern "C" double wcstod(const wchar_t *, wchar_t **);
# 166 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcstok(wchar_t *, const wchar_t *, wchar_t **);
# 168 "/usr/include/wchar.h" 3
extern "C" long wcstol(const wchar_t *, wchar_t **, int);
# 170 "/usr/include/wchar.h" 3
extern "C" unsigned long wcstoul(const wchar_t *, wchar_t **, int);
# 171 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);
# 172 "/usr/include/wchar.h" 3
extern "C" int wmemcmp(const wchar_t *, const wchar_t *, size_t);
# 173 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemcpy(wchar_t *, const wchar_t *, size_t);
# 174 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t);
# 175 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemset(wchar_t *, wchar_t, size_t);
# 176 "/usr/include/wchar.h" 3
extern "C" int wprintf(const wchar_t *, ...);
# 177 "/usr/include/wchar.h" 3
extern "C" int wscanf(const wchar_t *, ...);
# 180 "/usr/include/wchar.h" 3
extern "C" int vfwscanf(FILE *, const wchar_t *, __darwin_va_list);
# 182 "/usr/include/wchar.h" 3
extern "C" int vswscanf(const wchar_t *, const wchar_t *, __darwin_va_list);
# 184 "/usr/include/wchar.h" 3
extern "C" int vwscanf(const wchar_t *, __darwin_va_list);
# 185 "/usr/include/wchar.h" 3
extern "C" float wcstof(const wchar_t *, wchar_t **);
# 187 "/usr/include/wchar.h" 3
extern "C" long double wcstold(const wchar_t *, wchar_t **);
# 190 "/usr/include/wchar.h" 3
extern "C" long long wcstoll(const wchar_t *, wchar_t **, int);
# 192 "/usr/include/wchar.h" 3
extern "C" unsigned long long wcstoull(const wchar_t *, wchar_t **, int);
# 194 "/usr/include/wchar.h" 3
extern "C" int wcswidth(const wchar_t *, size_t);
# 195 "/usr/include/wchar.h" 3
extern "C" int wcwidth(wchar_t);
# 199 "/usr/include/wchar.h" 3
extern "C" size_t mbsnrtowcs(wchar_t *, const char **, size_t, size_t, mbstate_t *);
# 201 "/usr/include/wchar.h" 3
extern "C" size_t wcslcat(wchar_t *, const wchar_t *, size_t);
# 202 "/usr/include/wchar.h" 3
extern "C" size_t wcslcpy(wchar_t *, const wchar_t *, size_t);
# 203 "/usr/include/wchar.h" 3
extern "C" size_t wcsnrtombs(char *, const wchar_t **, size_t, size_t, mbstate_t *);
# 69 "/usr/include/c++/4.0.0/cwchar" 3
namespace std {
# 71 "/usr/include/c++/4.0.0/cwchar" 3
using ::mbstate_t;
# 72 "/usr/include/c++/4.0.0/cwchar" 3
}
# 141 "/usr/include/c++/4.0.0/cwchar" 3
namespace std {
# 143 "/usr/include/c++/4.0.0/cwchar" 3
using ::wint_t;
# 145 "/usr/include/c++/4.0.0/cwchar" 3
using ::btowc;
# 146 "/usr/include/c++/4.0.0/cwchar" 3
using ::fgetwc;
# 147 "/usr/include/c++/4.0.0/cwchar" 3
using ::fgetws;
# 148 "/usr/include/c++/4.0.0/cwchar" 3
using ::fputwc;
# 149 "/usr/include/c++/4.0.0/cwchar" 3
using ::fputws;
# 150 "/usr/include/c++/4.0.0/cwchar" 3
using ::fwide;
# 151 "/usr/include/c++/4.0.0/cwchar" 3
using ::fwprintf;
# 152 "/usr/include/c++/4.0.0/cwchar" 3
using ::fwscanf;
# 153 "/usr/include/c++/4.0.0/cwchar" 3
using ::getwc;
# 154 "/usr/include/c++/4.0.0/cwchar" 3
using ::getwchar;
# 155 "/usr/include/c++/4.0.0/cwchar" 3
using ::mbrlen;
# 156 "/usr/include/c++/4.0.0/cwchar" 3
using ::mbrtowc;
# 157 "/usr/include/c++/4.0.0/cwchar" 3
using ::mbsinit;
# 158 "/usr/include/c++/4.0.0/cwchar" 3
using ::mbsrtowcs;
# 159 "/usr/include/c++/4.0.0/cwchar" 3
using ::putwc;
# 160 "/usr/include/c++/4.0.0/cwchar" 3
using ::putwchar;
# 161 "/usr/include/c++/4.0.0/cwchar" 3
using ::swprintf;
# 162 "/usr/include/c++/4.0.0/cwchar" 3
using ::swscanf;
# 163 "/usr/include/c++/4.0.0/cwchar" 3
using ::ungetwc;
# 164 "/usr/include/c++/4.0.0/cwchar" 3
using ::vfwprintf;
# 166 "/usr/include/c++/4.0.0/cwchar" 3
using ::vfwscanf;
# 168 "/usr/include/c++/4.0.0/cwchar" 3
using ::vswprintf;
# 170 "/usr/include/c++/4.0.0/cwchar" 3
using ::vswscanf;
# 172 "/usr/include/c++/4.0.0/cwchar" 3
using ::vwprintf;
# 174 "/usr/include/c++/4.0.0/cwchar" 3
using ::vwscanf;
# 176 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcrtomb;
# 177 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcscat;
# 178 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcscmp;
# 179 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcscoll;
# 180 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcscpy;
# 181 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcscspn;
# 182 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcsftime;
# 183 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcslen;
# 184 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcsncat;
# 185 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcsncmp;
# 186 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcsncpy;
# 187 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcsrtombs;
# 188 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcsspn;
# 189 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcstod;
# 191 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcstof;
# 193 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcstok;
# 194 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcstol;
# 195 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcstoul;
# 196 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcsxfrm;
# 197 "/usr/include/c++/4.0.0/cwchar" 3
using ::wctob;
# 198 "/usr/include/c++/4.0.0/cwchar" 3
using ::wmemcmp;
# 199 "/usr/include/c++/4.0.0/cwchar" 3
using ::wmemcpy;
# 200 "/usr/include/c++/4.0.0/cwchar" 3
using ::wmemmove;
# 201 "/usr/include/c++/4.0.0/cwchar" 3
using ::wmemset;
# 202 "/usr/include/c++/4.0.0/cwchar" 3
using ::wprintf;
# 203 "/usr/include/c++/4.0.0/cwchar" 3
using ::wscanf;
# 205 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcschr;
# 208 "/usr/include/c++/4.0.0/cwchar" 3
inline wchar_t *wcschr(wchar_t *__p, wchar_t __c)
# 209 "/usr/include/c++/4.0.0/cwchar" 3
{ return wcschr((const wchar_t *)__p, __c); }
# 211 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcspbrk;
# 214 "/usr/include/c++/4.0.0/cwchar" 3
inline wchar_t *wcspbrk(wchar_t *__s1, wchar_t *__s2)
# 215 "/usr/include/c++/4.0.0/cwchar" 3
{ return wcspbrk((const wchar_t *)__s1, __s2); }
# 217 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcsrchr;
# 220 "/usr/include/c++/4.0.0/cwchar" 3
inline wchar_t *wcsrchr(wchar_t *__p, wchar_t __c)
# 221 "/usr/include/c++/4.0.0/cwchar" 3
{ return wcsrchr((const wchar_t *)__p, __c); }
# 223 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcsstr;
# 226 "/usr/include/c++/4.0.0/cwchar" 3
inline wchar_t *wcsstr(wchar_t *__s1, const wchar_t *__s2)
# 227 "/usr/include/c++/4.0.0/cwchar" 3
{ return wcsstr((const wchar_t *)__s1, __s2); }
# 229 "/usr/include/c++/4.0.0/cwchar" 3
using ::wmemchr;
# 232 "/usr/include/c++/4.0.0/cwchar" 3
inline wchar_t *wmemchr(wchar_t *__p, wchar_t __c, size_t __n)
# 233 "/usr/include/c++/4.0.0/cwchar" 3
{ return wmemchr((const wchar_t *)__p, __c, __n); }
# 234 "/usr/include/c++/4.0.0/cwchar" 3
}
# 242 "/usr/include/c++/4.0.0/cwchar" 3
namespace __gnu_cxx {
# 249 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcstold;
# 258 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcstoll;
# 259 "/usr/include/c++/4.0.0/cwchar" 3
using ::wcstoull;
# 261 "/usr/include/c++/4.0.0/cwchar" 3
}
# 263 "/usr/include/c++/4.0.0/cwchar" 3
namespace std {
# 265 "/usr/include/c++/4.0.0/cwchar" 3
using __gnu_cxx::wcstold;
# 266 "/usr/include/c++/4.0.0/cwchar" 3
using __gnu_cxx::wcstoll;
# 267 "/usr/include/c++/4.0.0/cwchar" 3
using __gnu_cxx::wcstoull;
# 268 "/usr/include/c++/4.0.0/cwchar" 3
}
# 40 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef unsigned char uint8_t;
# 45 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef unsigned short uint16_t;
# 50 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef unsigned uint32_t;
# 55 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef unsigned long long uint64_t;
# 59 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef int8_t int_least8_t;
# 60 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef int16_t int_least16_t;
# 61 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef int32_t int_least32_t;
# 62 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef int64_t int_least64_t;
# 63 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef uint8_t uint_least8_t;
# 64 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef uint16_t uint_least16_t;
# 65 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef uint32_t uint_least32_t;
# 66 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef uint64_t uint_least64_t;
# 70 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef int8_t int_fast8_t;
# 71 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef int16_t int_fast16_t;
# 72 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef int32_t int_fast32_t;
# 73 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef int64_t int_fast64_t;
# 74 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef uint8_t uint_fast8_t;
# 75 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef uint16_t uint_fast16_t;
# 76 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef uint32_t uint_fast32_t;
# 77 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef uint64_t uint_fast64_t;
# 97 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef long long intmax_t;
# 106 "/usr/lib/gcc/i686-apple-darwin9/4.2.1/include/stdint.h" 3
typedef unsigned long long uintmax_t;
# 52 "/usr/include/c++/4.0.0/bits/postypes.h" 3
namespace std {
# 72 "/usr/include/c++/4.0.0/bits/postypes.h" 3
typedef int64_t streamoff;
# 78 "/usr/include/c++/4.0.0/bits/postypes.h" 3
typedef ptrdiff_t streamsize;
# 80 "/usr/include/c++/4.0.0/bits/postypes.h" 3
template<class _StateT> class fpos;
# 94 "/usr/include/c++/4.0.0/bits/postypes.h" 3
template<class _StateT>
# 95 "/usr/include/c++/4.0.0/bits/postypes.h" 3
class fpos {
# 98 "/usr/include/c++/4.0.0/bits/postypes.h" 3
streamoff _M_off;
# 99 "/usr/include/c++/4.0.0/bits/postypes.h" 3
_StateT _M_state;
# 106 "/usr/include/c++/4.0.0/bits/postypes.h" 3
public: fpos() : _M_off((0)), _M_state()
# 107 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{ }
# 116 "/usr/include/c++/4.0.0/bits/postypes.h" 3
fpos(streamoff __off) : _M_off(__off), _M_state()
# 117 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{ }
# 120 "/usr/include/c++/4.0.0/bits/postypes.h" 3
operator streamoff() const { return this->_M_off; }
# 124 "/usr/include/c++/4.0.0/bits/postypes.h" 3
void state(_StateT __st)
# 125 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{ (this->_M_state) = __st; }
# 129 "/usr/include/c++/4.0.0/bits/postypes.h" 3
_StateT state() const
# 130 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{ return this->_M_state; }
# 138 "/usr/include/c++/4.0.0/bits/postypes.h" 3
bool operator==(const std::fpos< _StateT> &__other) const
# 139 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{ return this->_M_off == __other._M_off; }
# 143 "/usr/include/c++/4.0.0/bits/postypes.h" 3
bool operator!=(const std::fpos< _StateT> &__other) const
# 144 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{ return this->_M_off != __other._M_off; }
# 151 "/usr/include/c++/4.0.0/bits/postypes.h" 3
std::fpos< _StateT> &operator+=(streamoff __off)
# 152 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{
# 153 "/usr/include/c++/4.0.0/bits/postypes.h" 3
(this->_M_off) += __off;
# 154 "/usr/include/c++/4.0.0/bits/postypes.h" 3
return *this;
# 155 "/usr/include/c++/4.0.0/bits/postypes.h" 3
}
# 162 "/usr/include/c++/4.0.0/bits/postypes.h" 3
std::fpos< _StateT> &operator-=(streamoff __off)
# 163 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{
# 164 "/usr/include/c++/4.0.0/bits/postypes.h" 3
(this->_M_off) -= __off;
# 165 "/usr/include/c++/4.0.0/bits/postypes.h" 3
return *this;
# 166 "/usr/include/c++/4.0.0/bits/postypes.h" 3
}
# 175 "/usr/include/c++/4.0.0/bits/postypes.h" 3
std::fpos< _StateT> operator+(streamoff __off) const
# 176 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{
# 177 "/usr/include/c++/4.0.0/bits/postypes.h" 3
auto std::fpos< _StateT> __pos(*this);
# 178 "/usr/include/c++/4.0.0/bits/postypes.h" 3
__pos += __off;
# 179 "/usr/include/c++/4.0.0/bits/postypes.h" 3
return __pos;
# 180 "/usr/include/c++/4.0.0/bits/postypes.h" 3
}
# 189 "/usr/include/c++/4.0.0/bits/postypes.h" 3
std::fpos< _StateT> operator-(streamoff __off) const
# 190 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{
# 191 "/usr/include/c++/4.0.0/bits/postypes.h" 3
auto std::fpos< _StateT> __pos(*this);
# 192 "/usr/include/c++/4.0.0/bits/postypes.h" 3
__pos -= __off;
# 193 "/usr/include/c++/4.0.0/bits/postypes.h" 3
return __pos;
# 194 "/usr/include/c++/4.0.0/bits/postypes.h" 3
}
# 202 "/usr/include/c++/4.0.0/bits/postypes.h" 3
streamoff operator-(const std::fpos< _StateT> &__other) const
# 203 "/usr/include/c++/4.0.0/bits/postypes.h" 3
{ return this->_M_off - __other._M_off; }
# 204 "/usr/include/c++/4.0.0/bits/postypes.h" 3
};
# 210 "/usr/include/c++/4.0.0/bits/postypes.h" 3
typedef fpos< __mbstate_t> streampos;
# 212 "/usr/include/c++/4.0.0/bits/postypes.h" 3
typedef fpos< __mbstate_t> wstreampos;
# 213 "/usr/include/c++/4.0.0/bits/postypes.h" 3
}
# 43 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
namespace std {
# 47 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_bad_exception() __attribute__((__noreturn__));
# 51 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_bad_alloc() __attribute__((__noreturn__));
# 55 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_bad_cast() __attribute__((__noreturn__));
# 58 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_bad_typeid() __attribute__((__noreturn__));
# 62 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_logic_error(const char *) __attribute__((__noreturn__));
# 65 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_domain_error(const char *) __attribute__((__noreturn__));
# 68 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_invalid_argument(const char *) __attribute__((__noreturn__));
# 71 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_length_error(const char *) __attribute__((__noreturn__));
# 74 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_out_of_range(const char *) __attribute__((__noreturn__));
# 77 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_runtime_error(const char *) __attribute__((__noreturn__));
# 80 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_range_error(const char *) __attribute__((__noreturn__));
# 83 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_overflow_error(const char *) __attribute__((__noreturn__));
# 86 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_underflow_error(const char *) __attribute__((__noreturn__));
# 90 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
extern void __throw_ios_failure(const char *) __attribute__((__noreturn__));
# 91 "/usr/include/c++/4.0.0/bits/functexcept.h" 3
}
# 52 "/usr/include/c++/4.0.0/iosfwd" 3
namespace std {
# 54 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_ios;
# 57 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_streambuf;
# 60 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_istream;
# 63 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_ostream;
# 66 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_iostream;
# 69 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> , class
# 70 "/usr/include/c++/4.0.0/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_stringbuf;
# 73 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> , class
# 74 "/usr/include/c++/4.0.0/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_istringstream;
# 77 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> , class
# 78 "/usr/include/c++/4.0.0/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_ostringstream;
# 81 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> , class
# 82 "/usr/include/c++/4.0.0/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_stringstream;
# 85 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf;
# 88 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream;
# 91 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream;
# 94 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream;
# 97 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class istreambuf_iterator;
# 100 "/usr/include/c++/4.0.0/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class ostreambuf_iterator;
# 105 "/usr/include/c++/4.0.0/iosfwd" 3
class ios_base;
# 135 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ios< char, char_traits< char> > ios;
# 136 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_streambuf< char, char_traits< char> > streambuf;
# 137 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_istream< char, char_traits< char> > istream;
# 138 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ostream< char, char_traits< char> > ostream;
# 139 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_iostream< char, char_traits< char> > iostream;
# 140 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_stringbuf< char, char_traits< char> , allocator< char> > stringbuf;
# 141 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_istringstream< char, char_traits< char> , allocator< char> > istringstream;
# 142 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ostringstream< char, char_traits< char> , allocator< char> > ostringstream;
# 143 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_stringstream< char, char_traits< char> , allocator< char> > stringstream;
# 144 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_filebuf< char, char_traits< char> > filebuf;
# 145 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ifstream< char, char_traits< char> > ifstream;
# 146 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ofstream< char, char_traits< char> > ofstream;
# 147 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_fstream< char, char_traits< char> > fstream;
# 150 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ios< wchar_t, char_traits< wchar_t> > wios;
# 151 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_streambuf< wchar_t, char_traits< wchar_t> > wstreambuf;
# 152 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_istream< wchar_t, char_traits< wchar_t> > wistream;
# 153 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ostream< wchar_t, char_traits< wchar_t> > wostream;
# 154 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_iostream< wchar_t, char_traits< wchar_t> > wiostream;
# 155 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_stringbuf< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstringbuf;
# 156 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_istringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wistringstream;
# 157 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ostringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wostringstream;
# 158 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_stringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstringstream;
# 159 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_filebuf< wchar_t, char_traits< wchar_t> > wfilebuf;
# 160 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ifstream< wchar_t, char_traits< wchar_t> > wifstream;
# 161 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_ofstream< wchar_t, char_traits< wchar_t> > wofstream;
# 162 "/usr/include/c++/4.0.0/iosfwd" 3
typedef basic_fstream< wchar_t, char_traits< wchar_t> > wfstream;
# 165 "/usr/include/c++/4.0.0/iosfwd" 3
}
# 40 "/usr/include/c++/4.0.0/exception" 3
#pragma GCC visibility push(default)
# 44 "/usr/include/c++/4.0.0/exception" 3
namespace std {
# 54 "/usr/include/c++/4.0.0/exception" 3
class exception {
# 57 "/usr/include/c++/4.0.0/exception" 3
public: exception() throw() { }
# 58 "/usr/include/c++/4.0.0/exception" 3
virtual ~exception() throw();
# 61 "/usr/include/c++/4.0.0/exception" 3
virtual const char *what() const throw();
# 62 "/usr/include/c++/4.0.0/exception" 3
};
# 66 "/usr/include/c++/4.0.0/exception" 3
class bad_exception : public exception {
# 69 "/usr/include/c++/4.0.0/exception" 3
public: bad_exception() throw() { }
# 72 "/usr/include/c++/4.0.0/exception" 3
virtual ~bad_exception() throw();
# 73 "/usr/include/c++/4.0.0/exception" 3
};
# 76 "/usr/include/c++/4.0.0/exception" 3
typedef void (*terminate_handler)(void);
# 78 "/usr/include/c++/4.0.0/exception" 3
typedef void (*unexpected_handler)(void);
# 81 "/usr/include/c++/4.0.0/exception" 3
extern terminate_handler set_terminate(terminate_handler) throw();
# 84 "/usr/include/c++/4.0.0/exception" 3
extern void terminate() __attribute__((__noreturn__));
# 87 "/usr/include/c++/4.0.0/exception" 3
extern unexpected_handler set_unexpected(unexpected_handler) throw();
# 90 "/usr/include/c++/4.0.0/exception" 3
extern void unexpected() __attribute__((__noreturn__));
# 102 "/usr/include/c++/4.0.0/exception" 3
extern bool uncaught_exception() throw();
# 103 "/usr/include/c++/4.0.0/exception" 3
}
# 105 "/usr/include/c++/4.0.0/exception" 3
namespace __gnu_cxx {
# 117 "/usr/include/c++/4.0.0/exception" 3
extern void __verbose_terminate_handler();
# 118 "/usr/include/c++/4.0.0/exception" 3
}
# 122 "/usr/include/c++/4.0.0/exception" 3
#pragma GCC visibility pop
# 64 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
namespace std {
# 67 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
template<class _T1, class _T2>
# 68 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
struct pair {
# 70 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
typedef _T1 first_type;
# 71 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
typedef _T2 second_type;
# 73 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
_T1 first;
# 74 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
_T2 second;
# 80 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
pair() : first(), second()
# 81 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ }
# 84 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b)
# 85 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ }
# 88 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
template<class _U1, class _U2>
# 89 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
pair(const std::pair< _U1, _U2> &__p) : first((__p.first)), second((__p.second))
# 90 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ }
# 91 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
};
# 94 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
template<class _T1, class _T2> inline bool
# 96 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
operator==(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 97 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); }
# 100 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
template<class _T1, class _T2> inline bool
# 102 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
operator<(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 103 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second)));
# 104 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
}
# 107 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
template<class _T1, class _T2> inline bool
# 109 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
operator!=(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 110 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ return !(__x == __y); }
# 113 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
template<class _T1, class _T2> inline bool
# 115 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
operator>(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 116 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ return __y < __x; }
# 119 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
template<class _T1, class _T2> inline bool
# 121 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
operator<=(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 122 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ return !(__y < __x); }
# 125 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
template<class _T1, class _T2> inline bool
# 127 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
operator>=(const pair< _T1, _T2> &__x, const pair< _T1, _T2> &__y)
# 128 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ return !(__x < __y); }
# 142 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
template<class _T1, class _T2> inline pair< _T1, _T2>
# 144 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
make_pair(_T1 __x, _T2 __y)
# 145 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
{ return pair< _T1, _T2> (__x, __y); }
# 146 "/usr/include/c++/4.0.0/bits/stl_pair.h" 3
}
# 69 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
namespace std {
# 80 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { };
# 82 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
struct output_iterator_tag { };
# 84 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
struct forward_iterator_tag : public input_iterator_tag { };
# 87 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
struct bidirectional_iterator_tag : public forward_iterator_tag { };
# 90 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 104 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
template<class _Category, class _Tp, class _Distance = ptrdiff_t, class
# 105 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
_Pointer = _Tp *, class _Reference = _Tp &>
# 106 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
struct iterator {
# 109 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef _Category iterator_category;
# 111 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 113 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef _Distance difference_type;
# 115 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef _Pointer pointer;
# 117 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef _Reference reference;
# 118 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
};
# 126 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
template<class _Iterator>
# 127 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
struct iterator_traits {
# 129 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::iterator_category iterator_category;
# 130 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::value_type value_type;
# 131 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::difference_type difference_type;
# 132 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::pointer pointer;
# 133 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::reference reference;
# 134 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
};
# 136 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
template<class _Tp>
# 137 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
struct iterator_traits< _Tp *> {
# 139 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 140 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 141 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 142 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef _Tp *pointer;
# 143 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef _Tp &reference;
# 144 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
};
# 146 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
template<class _Tp>
# 147 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
struct iterator_traits< const _Tp *> {
# 149 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 150 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 151 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 152 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef const _Tp *pointer;
# 153 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
typedef const _Tp &reference;
# 154 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
};
# 162 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
template<class _Iter> inline typename iterator_traits< _Iter> ::iterator_category
# 164 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
__iterator_category(const _Iter &)
# 165 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
{ return typename iterator_traits< _Iter> ::iterator_category(); }
# 167 "/usr/include/c++/4.0.0/bits/stl_iterator_base_types.h" 3
}
# 70 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
namespace std {
# 72 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
template<class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type
# 74 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag)
# 76 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
{
# 80 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
auto typename iterator_traits< _InputIterator> ::difference_type __n = 0;
# 81 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
while (__first != __last)
# 82 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
{
# 83 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
++__first;
# 84 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
++__n;
# 85 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
}
# 86 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
return __n;
# 87 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
}
# 89 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
template<class _RandomAccessIterator> inline typename iterator_traits< _RandomAccessIterator> ::difference_type
# 91 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
# 93 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
{
# 97 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
return __last - __first;
# 98 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
}
# 112 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
template<class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type
# 114 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
distance(_InputIterator __first, _InputIterator __last)
# 115 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
{
# 117 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
return std::__distance(__first, __last, std::__iterator_category(__first));
# 119 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
}
# 121 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
template<class _InputIterator, class _Distance> inline void
# 123 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag)
# 124 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
{
# 127 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
while (__n--) {
# 128 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
++__i; }
# 129 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
}
# 131 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
template<class _BidirectionalIterator, class _Distance> inline void
# 133 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag)
# 135 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
{
# 139 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
if (__n > 0) {
# 140 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
while (__n--) {
# 141 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
++__i; } } else {
# 143 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
while (__n++) {
# 144 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
--__i; } }
# 145 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
}
# 147 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
template<class _RandomAccessIterator, class _Distance> inline void
# 149 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag)
# 151 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
{
# 155 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
__i += __n;
# 156 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
}
# 170 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
template<class _InputIterator, class _Distance> inline void
# 172 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
advance(_InputIterator &__i, _Distance __n)
# 173 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
{
# 175 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
std::__advance(__i, __n, std::__iterator_category(__i));
# 176 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
}
# 177 "/usr/include/c++/4.0.0/bits/stl_iterator_base_funcs.h" 3
}
# 68 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
namespace std {
# 89 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator>
# 90 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference> {
# 98 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
protected: _Iterator current;
# 101 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
public: typedef _Iterator iterator_type;
# 103 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
typedef typename iterator_traits< _Iterator> ::difference_type difference_type;
# 104 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
typedef typename iterator_traits< _Iterator> ::reference reference;
# 105 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
typedef typename iterator_traits< _Iterator> ::pointer pointer;
# 114 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
reverse_iterator() : current() { }
# 120 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
explicit reverse_iterator(iterator_type __x) : current(__x) { }
# 125 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
reverse_iterator(const std::reverse_iterator< _Iterator> &__x) : current(__x.current)
# 126 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ }
# 132 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iter>
# 133 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
reverse_iterator(const std::reverse_iterator< _Iter> &__x) : current((__x.base()))
# 134 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ }
# 140 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
iterator_type base() const
# 141 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return this->current; }
# 149 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
reference operator*() const
# 150 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 151 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
auto _Iterator __tmp = (this->current);
# 152 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *(--__tmp);
# 153 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 161 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
pointer operator->() const
# 162 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return &this->operator*(); }
# 170 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::reverse_iterator< _Iterator> &operator++()
# 171 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 172 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
--(this->current);
# 173 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *this;
# 174 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 182 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::reverse_iterator< _Iterator> operator++(int)
# 183 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 184 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
auto std::reverse_iterator< _Iterator> __tmp = *this;
# 185 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
--(this->current);
# 186 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return __tmp;
# 187 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 195 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::reverse_iterator< _Iterator> &operator--()
# 196 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 197 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
++(this->current);
# 198 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *this;
# 199 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 206 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::reverse_iterator< _Iterator> operator--(int)
# 207 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 208 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
auto std::reverse_iterator< _Iterator> __tmp = *this;
# 209 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
++(this->current);
# 210 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return __tmp;
# 211 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 219 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::reverse_iterator< _Iterator> operator+(difference_type __n) const
# 220 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((std::reverse_iterator< _Iterator> )((this->current) - __n)); }
# 228 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::reverse_iterator< _Iterator> &operator+=(difference_type __n)
# 229 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 230 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
(this->current) -= __n;
# 231 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *this;
# 232 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 240 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::reverse_iterator< _Iterator> operator-(difference_type __n) const
# 241 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((std::reverse_iterator< _Iterator> )((this->current) + __n)); }
# 249 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::reverse_iterator< _Iterator> &operator-=(difference_type __n)
# 250 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 251 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
(this->current) += __n;
# 252 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *this;
# 253 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 261 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
reference operator[](difference_type __n) const
# 262 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *((*this) + __n); }
# 263 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
};
# 275 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator> inline bool
# 277 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator==(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 278 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__y)
# 279 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__x.base()) == (__y.base()); }
# 281 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator> inline bool
# 283 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator<(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 284 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__y)
# 285 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__y.base()) < (__x.base()); }
# 287 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator> inline bool
# 289 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator!=(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 290 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__y)
# 291 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return !(__x == __y); }
# 293 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator> inline bool
# 295 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator>(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 296 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__y)
# 297 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return __y < __x; }
# 299 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator> inline bool
# 301 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator<=(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 302 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__y)
# 303 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return !(__y < __x); }
# 305 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator> inline bool
# 307 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator>=(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 308 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__y)
# 309 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return !(__x < __y); }
# 311 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator> inline typename reverse_iterator< _Iterator> ::difference_type
# 313 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator-(const reverse_iterator< _Iterator> &__x, const reverse_iterator< _Iterator> &
# 314 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__y)
# 315 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__y.base()) - (__x.base()); }
# 317 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator> inline reverse_iterator< _Iterator>
# 319 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator> &
# 320 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__x)
# 321 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((reverse_iterator< _Iterator> )((__x.base()) - __n)); }
# 335 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Container>
# 336 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void> {
# 340 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
protected: _Container *container;
# 344 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
public: typedef _Container container_type;
# 348 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
explicit back_insert_iterator(_Container &__x) : container((&__x)) { }
# 362 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::back_insert_iterator< _Container> &operator=(typename _Container::const_reference __value)
# 363 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 364 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
((this->container)->push_back(__value));
# 365 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *this;
# 366 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 370 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::back_insert_iterator< _Container> &operator*()
# 371 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *this; }
# 375 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::back_insert_iterator< _Container> &operator++()
# 376 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *this; }
# 380 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::back_insert_iterator< _Container> operator++(int)
# 381 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *this; }
# 382 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
};
# 395 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Container> inline back_insert_iterator< _Container>
# 397 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
back_inserter(_Container &__x)
# 398 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((back_insert_iterator< _Container> )(__x)); }
# 410 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Container>
# 411 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void> {
# 415 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
protected: _Container *container;
# 419 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
public: typedef _Container container_type;
# 422 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
explicit front_insert_iterator(_Container &__x) : container((&__x)) { }
# 436 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::front_insert_iterator< _Container> &operator=(typename _Container::const_reference __value)
# 437 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 438 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
((this->container)->push_front(__value));
# 439 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *this;
# 440 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 444 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::front_insert_iterator< _Container> &operator*()
# 445 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *this; }
# 449 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::front_insert_iterator< _Container> &operator++()
# 450 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *this; }
# 454 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::front_insert_iterator< _Container> operator++(int)
# 455 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *this; }
# 456 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
};
# 469 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Container> inline front_insert_iterator< _Container>
# 471 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
front_inserter(_Container &__x)
# 472 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((front_insert_iterator< _Container> )(__x)); }
# 488 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Container>
# 489 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void> {
# 493 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
protected: _Container *container;
# 494 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
typename _Container::iterator iter;
# 498 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
public: typedef _Container container_type;
# 504 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
insert_iterator(_Container &__x, typename _Container::iterator __i) : container((&__x)), iter(__i)
# 505 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ }
# 531 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::insert_iterator< _Container> &operator=(const typename _Container::const_reference __value)
# 532 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 533 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
(this->iter) = ((this->container)->insert(this->iter, __value));
# 534 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
++(this->iter);
# 535 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *this;
# 536 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 540 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::insert_iterator< _Container> &operator*()
# 541 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *this; }
# 545 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::insert_iterator< _Container> &operator++()
# 546 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *this; }
# 550 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
std::insert_iterator< _Container> &operator++(int)
# 551 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *this; }
# 552 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
};
# 565 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Container, class _Iterator> inline insert_iterator< _Container>
# 567 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
inserter(_Container &__x, _Iterator __i)
# 568 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 569 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return insert_iterator< _Container> (__x, ((typename _Container::iterator)(__i)));
# 571 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 572 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 574 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
namespace __gnu_cxx {
# 583 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
using std::iterator_traits;
# 584 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
using std::iterator;
# 585 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator, class _Container>
# 586 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
class __normal_iterator {
# 589 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
protected: _Iterator _M_current;
# 593 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
public: typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category;
# 594 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
typedef typename std::iterator_traits< _Iterator> ::value_type value_type;
# 596 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type;
# 597 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
typedef typename std::iterator_traits< _Iterator> ::reference reference;
# 598 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
typedef typename std::iterator_traits< _Iterator> ::pointer pointer;
# 600 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__normal_iterator() : _M_current(_Iterator()) { }
# 603 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
explicit __normal_iterator(const _Iterator &__i) : _M_current(__i) { }
# 606 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iter>
# 607 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__normal_iterator(const __gnu_cxx::__normal_iterator< _Iter, _Container> &
# 608 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__i) : _M_current((__i.base()))
# 609 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ }
# 613 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
reference operator*() const
# 614 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return *(this->_M_current); }
# 617 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
pointer operator->() const
# 618 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return this->_M_current; }
# 621 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__gnu_cxx::__normal_iterator< _Iterator, _Container> &operator++()
# 622 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 623 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
++(this->_M_current);
# 624 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *this;
# 625 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 628 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__gnu_cxx::__normal_iterator< _Iterator, _Container> operator++(int)
# 629 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((__gnu_cxx::__normal_iterator< _Iterator, _Container> )((this->_M_current)++)); }
# 633 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__gnu_cxx::__normal_iterator< _Iterator, _Container> &operator--()
# 634 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{
# 635 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
--(this->_M_current);
# 636 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
return *this;
# 637 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 640 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__gnu_cxx::__normal_iterator< _Iterator, _Container> operator--(int)
# 641 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((__gnu_cxx::__normal_iterator< _Iterator, _Container> )((this->_M_current)--)); }
# 645 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
reference operator[](const difference_type &__n) const
# 646 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (this->_M_current)[__n]; }
# 649 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__gnu_cxx::__normal_iterator< _Iterator, _Container> &operator+=(const difference_type &__n)
# 650 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ (this->_M_current) += __n; return *this; }
# 653 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__gnu_cxx::__normal_iterator< _Iterator, _Container> operator+(const difference_type &__n) const
# 654 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((__gnu_cxx::__normal_iterator< _Iterator, _Container> )((this->_M_current) + __n)); }
# 657 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__gnu_cxx::__normal_iterator< _Iterator, _Container> &operator-=(const difference_type &__n)
# 658 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ (this->_M_current) -= __n; return *this; }
# 661 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__gnu_cxx::__normal_iterator< _Iterator, _Container> operator-(const difference_type &__n) const
# 662 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((__gnu_cxx::__normal_iterator< _Iterator, _Container> )((this->_M_current) - __n)); }
# 665 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
const _Iterator &base() const
# 666 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return this->_M_current; }
# 667 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
};
# 678 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _IteratorL, class _IteratorR, class _Container> inline bool
# 680 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator==(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 681 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 682 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) == (__rhs.base()); }
# 684 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator, class _Container> inline bool
# 686 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator==(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 687 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 688 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) == (__rhs.base()); }
# 690 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _IteratorL, class _IteratorR, class _Container> inline bool
# 692 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator!=(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 693 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 694 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) != (__rhs.base()); }
# 696 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator, class _Container> inline bool
# 698 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator!=(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 699 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 700 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) != (__rhs.base()); }
# 703 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _IteratorL, class _IteratorR, class _Container> inline bool
# 705 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator<(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 706 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 707 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) < (__rhs.base()); }
# 709 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator, class _Container> inline bool
# 711 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator<(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 712 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 713 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) < (__rhs.base()); }
# 715 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _IteratorL, class _IteratorR, class _Container> inline bool
# 717 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator>(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 718 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 719 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) > (__rhs.base()); }
# 721 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator, class _Container> inline bool
# 723 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator>(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 724 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 725 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) > (__rhs.base()); }
# 727 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _IteratorL, class _IteratorR, class _Container> inline bool
# 729 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator<=(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 730 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 731 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) <= (__rhs.base()); }
# 733 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator, class _Container> inline bool
# 735 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator<=(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 736 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 737 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) <= (__rhs.base()); }
# 739 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _IteratorL, class _IteratorR, class _Container> inline bool
# 741 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator>=(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 742 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 743 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) >= (__rhs.base()); }
# 745 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator, class _Container> inline bool
# 747 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator>=(const __normal_iterator< _Iterator, _Container> &__lhs, const __normal_iterator< _Iterator, _Container> &
# 748 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 749 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) >= (__rhs.base()); }
# 755 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _IteratorL, class _IteratorR, class _Container> inline typename __normal_iterator< _IteratorL, _Container> ::difference_type
# 757 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator-(const __normal_iterator< _IteratorL, _Container> &__lhs, const __normal_iterator< _IteratorR, _Container> &
# 758 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__rhs)
# 759 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return (__lhs.base()) - (__rhs.base()); }
# 761 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
template<class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>
# 763 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type
# 764 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
__n, const __normal_iterator< _Iterator, _Container> &__i)
# 765 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
{ return ((__normal_iterator< _Iterator, _Container> )((__i.base()) + __n)); }
# 766 "/usr/include/c++/4.0.0/bits/stl_iterator.h" 3
}
# 76 "/usr/include/assert.h" 3
extern "C" void __assert_rtn(const char *, const char *, int, const char *) __attribute__((__noreturn__));
# 77 "/usr/include/assert.h" 3
extern "C" void __eprintf(const char *, const char *, unsigned, const char *) __attribute__((__noreturn__));
# 278 "/usr/include/c++/4.0.0/debug/debug.h" 3
namespace __gnu_debug {
# 280 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _Iterator, class _Sequence> class _Safe_iterator;
# 285 "/usr/include/c++/4.0.0/debug/debug.h" 3
inline bool __check_singular_aux(const void *) { return false; }
# 289 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _Iterator> inline bool
# 291 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_singular(_Iterator &__x)
# 292 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return __gnu_debug::__check_singular_aux(&__x); }
# 295 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _Tp> inline bool
# 297 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_singular(const _Tp *__ptr)
# 298 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return __ptr == 0; }
# 301 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _Iterator, class _Sequence> inline bool
# 303 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_singular(const _Safe_iterator< _Iterator, _Sequence> &__x)
# 304 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return (__x._M_singular()); }
# 308 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _Iterator> inline bool
# 310 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_dereferenceable(_Iterator &)
# 311 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return true; }
# 314 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _Tp> inline bool
# 316 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_dereferenceable(const _Tp *__ptr)
# 317 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return __ptr; }
# 320 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _Iterator, class _Sequence> inline bool
# 322 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_dereferenceable(const _Safe_iterator< _Iterator, _Sequence> &__x)
# 323 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return (__x._M_dereferenceable()); }
# 328 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _RandomAccessIterator> inline bool
# 330 "/usr/include/c++/4.0.0/debug/debug.h" 3
__valid_range_aux2(const _RandomAccessIterator &__first, const _RandomAccessIterator &
# 331 "/usr/include/c++/4.0.0/debug/debug.h" 3
__last, std::random_access_iterator_tag)
# 333 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return __last - __first >= 0; }
# 339 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _InputIterator> inline bool
# 341 "/usr/include/c++/4.0.0/debug/debug.h" 3
__valid_range_aux2(const _InputIterator &, const _InputIterator &, std::input_iterator_tag)
# 343 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return true; }
# 349 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _Integral> inline bool
# 351 "/usr/include/c++/4.0.0/debug/debug.h" 3
__valid_range_aux(const _Integral &, const _Integral &, __true_type)
# 352 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return true; }
# 357 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _InputIterator> inline bool
# 359 "/usr/include/c++/4.0.0/debug/debug.h" 3
__valid_range_aux(const _InputIterator &__first, const _InputIterator &
# 360 "/usr/include/c++/4.0.0/debug/debug.h" 3
__last, __false_type)
# 361 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 363 "/usr/include/c++/4.0.0/debug/debug.h" 3
typedef typename std::iterator_traits< _InputIterator> ::iterator_category _Category;
# 364 "/usr/include/c++/4.0.0/debug/debug.h" 3
return __gnu_debug::__valid_range_aux2(__first, __last, _Category());
# 365 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 372 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _InputIterator> inline bool
# 374 "/usr/include/c++/4.0.0/debug/debug.h" 3
__valid_range(const _InputIterator &__first, const _InputIterator &__last)
# 375 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 376 "/usr/include/c++/4.0.0/debug/debug.h" 3
typedef typename std::__is_integer< _InputIterator> ::__type _Integral;
# 377 "/usr/include/c++/4.0.0/debug/debug.h" 3
return __gnu_debug::__valid_range_aux(__first, __last, _Integral());
# 378 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 381 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _Iterator, class _Sequence> inline bool
# 383 "/usr/include/c++/4.0.0/debug/debug.h" 3
__valid_range(const _Safe_iterator< _Iterator, _Sequence> &__first, const _Safe_iterator< _Iterator, _Sequence> &
# 384 "/usr/include/c++/4.0.0/debug/debug.h" 3
__last)
# 385 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return (__first._M_valid_range(__last)); }
# 391 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _InputIterator> inline _InputIterator
# 393 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_valid_range(const _InputIterator &__first, const _InputIterator &
# 394 "/usr/include/c++/4.0.0/debug/debug.h" 3
__last)
# 395 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 396 "/usr/include/c++/4.0.0/debug/debug.h" 3
;
# 397 "/usr/include/c++/4.0.0/debug/debug.h" 3
return __first;
# 398 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 401 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _CharT, class _Integer> inline const _CharT *
# 403 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_string(const _CharT *__s, const _Integer &__n)
# 404 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 408 "/usr/include/c++/4.0.0/debug/debug.h" 3
return __s;
# 409 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 412 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _CharT> inline const _CharT *
# 414 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_string(const _CharT *__s)
# 415 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 419 "/usr/include/c++/4.0.0/debug/debug.h" 3
return __s;
# 420 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 424 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _InputIterator> inline bool
# 426 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_sorted_aux(const _InputIterator &, const _InputIterator &, std::input_iterator_tag)
# 428 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return true; }
# 432 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _ForwardIterator> inline bool
# 434 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_sorted_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
# 436 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 437 "/usr/include/c++/4.0.0/debug/debug.h" 3
if (__first == __last) {
# 438 "/usr/include/c++/4.0.0/debug/debug.h" 3
return true; }
# 440 "/usr/include/c++/4.0.0/debug/debug.h" 3
auto _ForwardIterator __next = __first;
# 441 "/usr/include/c++/4.0.0/debug/debug.h" 3
for (++__next; __next != __last; (__first = __next), (++__next)) {
# 442 "/usr/include/c++/4.0.0/debug/debug.h" 3
if (*__next < *__first) {
# 443 "/usr/include/c++/4.0.0/debug/debug.h" 3
return false; }
# 444 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 446 "/usr/include/c++/4.0.0/debug/debug.h" 3
return true;
# 447 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 451 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _InputIterator, class _Predicate> inline bool
# 453 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_sorted_aux(const _InputIterator &, const _InputIterator &, _Predicate, std::input_iterator_tag)
# 455 "/usr/include/c++/4.0.0/debug/debug.h" 3
{ return true; }
# 459 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _ForwardIterator, class _Predicate> inline bool
# 461 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_sorted_aux(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 462 "/usr/include/c++/4.0.0/debug/debug.h" 3
__pred, std::forward_iterator_tag)
# 463 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 464 "/usr/include/c++/4.0.0/debug/debug.h" 3
if (__first == __last) {
# 465 "/usr/include/c++/4.0.0/debug/debug.h" 3
return true; }
# 467 "/usr/include/c++/4.0.0/debug/debug.h" 3
auto _ForwardIterator __next = __first;
# 468 "/usr/include/c++/4.0.0/debug/debug.h" 3
for (++__next; __next != __last; (__first = __next), (++__next)) {
# 469 "/usr/include/c++/4.0.0/debug/debug.h" 3
if (__pred(*__next, *__first)) {
# 470 "/usr/include/c++/4.0.0/debug/debug.h" 3
return false; }
# 471 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 473 "/usr/include/c++/4.0.0/debug/debug.h" 3
return true;
# 474 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 477 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _InputIterator> inline bool
# 479 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_sorted(const _InputIterator &__first, const _InputIterator &__last)
# 480 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 482 "/usr/include/c++/4.0.0/debug/debug.h" 3
typedef typename std::iterator_traits< _InputIterator> ::iterator_category _Category;
# 483 "/usr/include/c++/4.0.0/debug/debug.h" 3
return __gnu_debug::__check_sorted_aux(__first, __last, _Category());
# 484 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 486 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _InputIterator, class _Predicate> inline bool
# 488 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_sorted(const _InputIterator &__first, const _InputIterator &__last, _Predicate
# 489 "/usr/include/c++/4.0.0/debug/debug.h" 3
__pred)
# 490 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 492 "/usr/include/c++/4.0.0/debug/debug.h" 3
typedef typename std::iterator_traits< _InputIterator> ::iterator_category _Category;
# 493 "/usr/include/c++/4.0.0/debug/debug.h" 3
return __gnu_debug::__check_sorted_aux(__first, __last, __pred, _Category());
# 495 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 500 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _ForwardIterator, class _Tp> inline bool
# 502 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_partitioned(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 503 "/usr/include/c++/4.0.0/debug/debug.h" 3
__value)
# 504 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 505 "/usr/include/c++/4.0.0/debug/debug.h" 3
while ((__first != __last) && (*__first < __value)) {
# 506 "/usr/include/c++/4.0.0/debug/debug.h" 3
++__first; }
# 507 "/usr/include/c++/4.0.0/debug/debug.h" 3
while ((__first != __last) && (!(*__first < __value))) {
# 508 "/usr/include/c++/4.0.0/debug/debug.h" 3
++__first; }
# 509 "/usr/include/c++/4.0.0/debug/debug.h" 3
return __first == __last;
# 510 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 513 "/usr/include/c++/4.0.0/debug/debug.h" 3
template<class _ForwardIterator, class _Tp, class _Pred> inline bool
# 515 "/usr/include/c++/4.0.0/debug/debug.h" 3
__check_partitioned(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 516 "/usr/include/c++/4.0.0/debug/debug.h" 3
__value, _Pred __pred)
# 517 "/usr/include/c++/4.0.0/debug/debug.h" 3
{
# 518 "/usr/include/c++/4.0.0/debug/debug.h" 3
while ((__first != __last) && (__pred(*__first, __value))) {
# 519 "/usr/include/c++/4.0.0/debug/debug.h" 3
++__first; }
# 520 "/usr/include/c++/4.0.0/debug/debug.h" 3
while ((__first != __last) && (!(__pred(*__first, __value)))) {
# 521 "/usr/include/c++/4.0.0/debug/debug.h" 3
++__first; }
# 522 "/usr/include/c++/4.0.0/debug/debug.h" 3
return __first == __last;
# 523 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 524 "/usr/include/c++/4.0.0/debug/debug.h" 3
}
# 78 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
namespace std {
# 90 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Tp> inline void
# 92 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
swap(_Tp &__a, _Tp &__b)
# 93 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 97 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const _Tp __tmp = (__a);
# 98 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__a = __b;
# 99 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__b = __tmp;
# 100 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 105 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<bool _BoolType>
# 106 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
struct __iter_swap {
# 108 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _ForwardIterator1, class _ForwardIterator2> static void
# 109 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
iter_swap(_ForwardIterator1
# 110 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__a, _ForwardIterator2 __b)
# 111 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 113 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator1> ::value_type _ValueType1;
# 114 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const _ValueType1 __tmp = (*__a);
# 115 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*__a) = *__b;
# 116 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*__b) = __tmp;
# 117 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 118 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 121 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __iter_swap< true> {
# 123 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _ForwardIterator1, class _ForwardIterator2> static void
# 124 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
iter_swap(_ForwardIterator1
# 125 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__a, _ForwardIterator2 __b)
# 126 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 127 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
swap(*__a, *__b);
# 128 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 129 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 140 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _ForwardIterator1, class _ForwardIterator2> inline void
# 142 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
# 143 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 145 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator1> ::value_type _ValueType1;
# 147 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator2> ::value_type _ValueType2;
# 160 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator1> ::reference _ReferenceType1;
# 162 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _ForwardIterator2> ::reference _ReferenceType2;
# 163 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__iter_swap< ((__are_same< typename iterator_traits< _ForwardIterator1> ::value_type, typename iterator_traits< _ForwardIterator2> ::value_type> ::__value && __are_same< typename iterator_traits< _ForwardIterator1> ::value_type &, typename iterator_traits< _ForwardIterator1> ::reference> ::__value) && __are_same< typename iterator_traits< _ForwardIterator2> ::value_type &, typename iterator_traits< _ForwardIterator2> ::reference> ::__value)> ::iter_swap(__a, __b);
# 167 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 182 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Tp> inline const _Tp &
# 184 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
min(const _Tp &__a, const _Tp &__b)
# 185 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 189 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (__b < __a) {
# 190 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __b; }
# 191 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __a;
# 192 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 204 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Tp> inline const _Tp &
# 206 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
max(const _Tp &__a, const _Tp &__b)
# 207 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 211 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (__a < __b) {
# 212 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __b; }
# 213 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __a;
# 214 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 226 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Tp, class _Compare> inline const _Tp &
# 228 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
min(const _Tp &__a, const _Tp &__b, _Compare __comp)
# 229 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 231 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (__comp(__b, __a)) {
# 232 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __b; }
# 233 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __a;
# 234 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 246 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Tp, class _Compare> inline const _Tp &
# 248 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
max(const _Tp &__a, const _Tp &__b, _Compare __comp)
# 249 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 251 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (__comp(__a, __b)) {
# 252 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __b; }
# 253 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __a;
# 254 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 262 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<bool , class >
# 263 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
struct __copy {
# 265 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _II, class _OI> static _OI
# 266 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy(_II
# 267 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _II __last, _OI __result)
# 268 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 269 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (; __first != __last; (++__result), (++__first)) {
# 270 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*__result) = *__first; }
# 271 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __result;
# 272 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 273 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 275 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<bool _BoolType>
# 276 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
struct __copy< _BoolType, random_access_iterator_tag> {
# 278 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _II, class _OI> static _OI
# 279 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy(_II
# 280 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _II __last, _OI __result)
# 281 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 282 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II> ::difference_type _Distance;
# 283 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (_Distance __n = (__last - __first); __n > 0; --__n)
# 284 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 285 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*__result) = *__first;
# 286 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
++__first;
# 287 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
++__result;
# 288 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 289 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __result;
# 290 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 291 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 294 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __copy< true, random_access_iterator_tag> {
# 296 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Tp> static _Tp *
# 297 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy(const _Tp *
# 298 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, const _Tp *__last, _Tp *__result)
# 299 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 300 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
std::memmove(__result, __first, sizeof(_Tp) * (__last - __first));
# 301 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __result + (__last - __first);
# 302 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 303 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 305 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _II, class _OI> inline _OI
# 307 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__copy_aux(_II __first, _II __last, _OI __result)
# 308 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 309 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II> ::value_type _ValueTypeI;
# 310 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _OI> ::value_type _ValueTypeO;
# 311 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _II> ::iterator_category _Category;
# 312 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const bool __simple = (((__is_scalar< typename iterator_traits< _II> ::value_type> ::__value && __is_pointer< _II> ::__value) && __is_pointer< _OI> ::__value) && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value);
# 317 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __copy< (((__is_scalar< typename iterator_traits< _II> ::value_type> ::__value && __is_pointer< _II> ::__value) && __is_pointer< _OI> ::__value) && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value), typename iterator_traits< _II> ::iterator_category> ::copy(__first, __last, __result);
# 318 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 320 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<bool , bool >
# 321 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
struct __copy_normal {
# 323 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _II, class _OI> static _OI
# 324 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_n(_II
# 325 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _II __last, _OI __result)
# 326 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{ return std::__copy_aux(__first, __last, __result); }
# 327 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 330 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __copy_normal< true, false> {
# 332 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _II, class _OI> static _OI
# 333 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_n(_II
# 334 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _II __last, _OI __result)
# 335 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{ return std::__copy_aux((__first.base()), (__last.base()), __result); }
# 336 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 339 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __copy_normal< false, true> {
# 341 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _II, class _OI> static _OI
# 342 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_n(_II
# 343 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _II __last, _OI __result)
# 344 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{ return ((_OI)(std::__copy_aux(__first, __last, (__result.base())))); }
# 345 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 348 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __copy_normal< true, true> {
# 350 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _II, class _OI> static _OI
# 351 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_n(_II
# 352 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _II __last, _OI __result)
# 353 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{ return ((_OI)(std::__copy_aux((__first.base()), (__last.base()), (__result.base()))));
# 354 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 355 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 373 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _InputIterator, class _OutputIterator> inline _OutputIterator
# 375 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 376 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__result)
# 377 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 382 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 384 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const bool __in = __is_normal_iterator< _InputIterator> ::__value;
# 385 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const bool __out = __is_normal_iterator< _OutputIterator> ::__value;
# 386 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __copy_normal< __is_normal_iterator< _InputIterator> ::__value, __is_normal_iterator< _OutputIterator> ::__value> ::copy_n(__first, __last, __result);
# 388 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 390 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<bool , class >
# 391 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
struct __copy_backward {
# 393 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _BI1, class _BI2> static _BI2
# 394 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_b(_BI1
# 395 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _BI1 __last, _BI2 __result)
# 396 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 397 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
while (__first != __last) {
# 398 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*(--__result)) = *(--__last); }
# 399 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __result;
# 400 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 401 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 403 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<bool _BoolType>
# 404 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
struct __copy_backward< _BoolType, random_access_iterator_tag> {
# 406 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _BI1, class _BI2> static _BI2
# 407 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_b(_BI1
# 408 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _BI1 __last, _BI2 __result)
# 409 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 410 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto typename iterator_traits< _BI1> ::difference_type __n;
# 411 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (__n = __last - __first; __n > 0; --__n) {
# 412 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*(--__result)) = *(--__last); }
# 413 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __result;
# 414 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 415 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 418 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __copy_backward< true, random_access_iterator_tag> {
# 420 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Tp> static _Tp *
# 421 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_b(const _Tp *
# 422 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, const _Tp *__last, _Tp *__result)
# 423 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 424 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const ptrdiff_t _Num = (__last - __first);
# 425 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
std::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
# 426 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __result - _Num;
# 427 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 428 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 430 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _BI1, class _BI2> inline _BI2
# 432 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
# 433 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 434 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _BI1> ::value_type _ValueType1;
# 435 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _BI2> ::value_type _ValueType2;
# 436 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
typedef typename iterator_traits< _BI1> ::iterator_category _Category;
# 437 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const bool __simple = (((__is_scalar< typename iterator_traits< _BI1> ::value_type> ::__value && __is_pointer< _BI1> ::__value) && __is_pointer< _BI2> ::__value) && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value);
# 442 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __copy_backward< (((__is_scalar< typename iterator_traits< _BI1> ::value_type> ::__value && __is_pointer< _BI1> ::__value) && __is_pointer< _BI2> ::__value) && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value), typename iterator_traits< _BI1> ::iterator_category> ::copy_b(__first, __last, __result);
# 444 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 446 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<bool , bool >
# 447 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
struct __copy_backward_normal {
# 449 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _BI1, class _BI2> static _BI2
# 450 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_b_n(_BI1
# 451 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _BI1 __last, _BI2 __result)
# 452 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{ return std::__copy_backward_aux(__first, __last, __result); }
# 453 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 456 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __copy_backward_normal< true, false> {
# 458 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _BI1, class _BI2> static _BI2
# 459 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_b_n(_BI1
# 460 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _BI1 __last, _BI2 __result)
# 461 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{ return std::__copy_backward_aux((__first.base()), (__last.base()), __result);
# 462 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 463 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 466 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __copy_backward_normal< false, true> {
# 468 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _BI1, class _BI2> static _BI2
# 469 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_b_n(_BI1
# 470 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _BI1 __last, _BI2 __result)
# 471 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{ return ((_BI2)(std::__copy_backward_aux(__first, __last, (__result.base()))));
# 472 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 473 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 476 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __copy_backward_normal< true, true> {
# 478 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _BI1, class _BI2> static _BI2
# 479 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_b_n(_BI1
# 480 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _BI1 __last, _BI2 __result)
# 481 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{ return ((_BI2)(std::__copy_backward_aux((__first.base()), (__last.base()), (__result.base()))));
# 482 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 483 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 502 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _BI1, class _BI2> inline _BI2
# 504 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
# 505 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 512 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 514 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const bool __bi1 = __is_normal_iterator< _BI1> ::__value;
# 515 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const bool __bi2 = __is_normal_iterator< _BI2> ::__value;
# 516 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __copy_backward_normal< __is_normal_iterator< _BI1> ::__value, __is_normal_iterator< _BI2> ::__value> ::copy_b_n(__first, __last, __result);
# 518 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 520 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<bool >
# 521 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
struct __fill {
# 523 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _ForwardIterator, class _Tp> static void
# 524 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
fill(_ForwardIterator
# 525 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _ForwardIterator __last, const _Tp &
# 526 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__value)
# 527 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 528 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (; __first != __last; ++__first) {
# 529 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*__first) = __value; }
# 530 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 531 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 534 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __fill< true> {
# 536 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _ForwardIterator, class _Tp> static void
# 537 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
fill(_ForwardIterator
# 538 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _ForwardIterator __last, const _Tp &
# 539 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__value)
# 540 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 541 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const _Tp __tmp = (__value);
# 542 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (; __first != __last; ++__first) {
# 543 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*__first) = __tmp; }
# 544 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 545 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 558 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _ForwardIterator, class _Tp> void
# 560 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value)
# 561 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 565 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 567 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const bool __scalar = __is_scalar< _Tp> ::__value;
# 568 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__fill< __is_scalar< _Tp> ::__value> ::fill(__first, __last, __value);
# 569 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 573 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
inline void fill(unsigned char *__first, unsigned char *__last, const unsigned char &__c)
# 574 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 575 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 576 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const unsigned char __tmp = (__c);
# 577 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
std::memset(__first, __tmp, __last - __first);
# 578 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 581 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
inline void fill(signed char *__first, signed char *__last, const signed char &__c)
# 582 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 583 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 584 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const signed char __tmp = (__c);
# 585 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
std::memset(__first, static_cast< unsigned char>(__tmp), __last - __first);
# 586 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 589 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
inline void fill(char *__first, char *__last, const char &__c)
# 590 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 591 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 592 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const char __tmp = (__c);
# 593 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
std::memset(__first, static_cast< unsigned char>(__tmp), __last - __first);
# 594 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 596 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<bool >
# 597 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
struct __fill_n {
# 599 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _OutputIterator, class _Size, class _Tp> static _OutputIterator
# 600 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
fill_n(_OutputIterator
# 601 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _Size __n, const _Tp &__value)
# 602 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 603 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (; __n > 0; (--__n), (++__first)) {
# 604 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*__first) = __value; }
# 605 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __first;
# 606 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 607 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 610 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<> struct __fill_n< true> {
# 612 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _OutputIterator, class _Size, class _Tp> static _OutputIterator
# 613 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
fill_n(_OutputIterator
# 614 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first, _Size __n, const _Tp &__value)
# 615 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 616 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const _Tp __tmp = (__value);
# 617 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (; __n > 0; (--__n), (++__first)) {
# 618 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
(*__first) = __tmp; }
# 619 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __first;
# 620 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 621 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
};
# 634 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _OutputIterator, class _Size, class _Tp> _OutputIterator
# 636 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
fill_n(_OutputIterator __first, _Size __n, const _Tp &__value)
# 637 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 641 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const bool __scalar = __is_scalar< _Tp> ::__value;
# 642 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __fill_n< __is_scalar< _Tp> ::__value> ::fill_n(__first, __n, __value);
# 643 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 645 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Size> inline unsigned char *
# 647 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
fill_n(unsigned char *__first, _Size __n, const unsigned char &__c)
# 648 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 649 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
std::fill(__first, __first + __n, __c);
# 650 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __first + __n;
# 651 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 653 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Size> inline signed char *
# 655 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
fill_n(char *__first, _Size __n, const signed char &__c)
# 656 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 657 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
std::fill(__first, __first + __n, __c);
# 658 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __first + __n;
# 659 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 661 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _Size> inline char *
# 663 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
fill_n(char *__first, _Size __n, const char &__c)
# 664 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 665 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
std::fill(__first, __first + __n, __c);
# 666 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return __first + __n;
# 667 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 681 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _InputIterator1, class _InputIterator2> pair< _InputIterator1, _InputIterator2>
# 683 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 684 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first2)
# 685 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 692 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 694 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
while ((__first1 != __last1) && (*__first1 == *__first2))
# 695 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 696 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
++__first1;
# 697 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
++__first2;
# 698 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 699 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return pair< _InputIterator1, _InputIterator2> (__first1, __first2);
# 700 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 716 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 717 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>
# 719 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 720 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first2, _BinaryPredicate __binary_pred)
# 721 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 725 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 727 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
while ((__first1 != __last1) && (__binary_pred(*__first1, *__first2)))
# 728 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 729 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
++__first1;
# 730 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
++__first2;
# 731 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 732 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return pair< _InputIterator1, _InputIterator2> (__first1, __first2);
# 733 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 746 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _InputIterator1, class _InputIterator2> inline bool
# 748 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 749 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first2)
# 750 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 757 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 759 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (; __first1 != __last1; (++__first1), (++__first2)) {
# 760 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (!(*__first1 == *__first2)) {
# 761 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return false; } }
# 762 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return true;
# 763 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 778 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 779 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
_BinaryPredicate> inline bool
# 781 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
equal(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 782 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first2, _BinaryPredicate
# 783 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__binary_pred)
# 784 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 788 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 790 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (; __first1 != __last1; (++__first1), (++__first2)) {
# 791 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (!(__binary_pred(*__first1, *__first2))) {
# 792 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return false; } }
# 793 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return true;
# 794 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 810 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _InputIterator1, class _InputIterator2> bool
# 812 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 813 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first2, _InputIterator2 __last2)
# 814 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 824 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 825 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 827 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), (++__first2))
# 829 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 830 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (*__first1 < *__first2) {
# 831 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return true; }
# 832 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (*__first2 < *__first1) {
# 833 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return false; }
# 834 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 835 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return (__first1 == __last1) && (__first2 != __last2);
# 836 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 850 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 851 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
_Compare> bool
# 853 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
lexicographical_compare(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 854 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first2, _InputIterator2 __last2, _Compare
# 855 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__comp)
# 856 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 860 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 861 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 863 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), (++__first2))
# 865 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 866 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (__comp(*__first1, *__first2)) {
# 867 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return true; }
# 868 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
if (__comp(*__first2, *__first1)) {
# 869 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return false; }
# 870 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 871 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return (__first1 == __last1) && (__first2 != __last2);
# 872 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 875 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
inline bool lexicographical_compare(const unsigned char *__first1, const unsigned char *
# 876 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__last1, const unsigned char *
# 877 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first2, const unsigned char *
# 878 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__last2)
# 879 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 880 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 881 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 883 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const size_t __len1 = (__last1 - __first1);
# 884 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const size_t __len2 = (__last2 - __first2);
# 885 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
auto const int __result = std::memcmp(__first1, __first2, std::min(__len1, __len2));
# 887 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return (__result != 0) ? (__result < 0) : (__len1 < __len2);
# 888 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 891 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
inline bool lexicographical_compare(const char *__first1, const char *__last1, const char *
# 892 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
__first2, const char *__last2)
# 893 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
{
# 894 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 895 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
;
# 898 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
return std::lexicographical_compare((const signed char *)__first1, (const signed char *)__last1, (const signed char *)__first2, (const signed char *)__last2);
# 908 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 910 "/usr/include/c++/4.0.0/bits/stl_algobase.h" 3
}
# 49 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
namespace __gnu_cxx {
# 61 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<class _CharT>
# 62 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
struct _Char_types {
# 64 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef unsigned long int_type;
# 65 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef std::streampos pos_type;
# 66 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef std::streamoff off_type;
# 67 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 68 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
};
# 86 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<class _CharT>
# 87 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
struct char_traits {
# 89 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef _CharT char_type;
# 90 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef typename _Char_types< _CharT> ::int_type int_type;
# 91 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef typename _Char_types< _CharT> ::pos_type pos_type;
# 92 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef typename _Char_types< _CharT> ::off_type off_type;
# 93 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef typename _Char_types< _CharT> ::state_type state_type;
# 96 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static void assign(char_type &__c1, const char_type &__c2)
# 97 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ __c1 = __c2; }
# 100 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2)
# 101 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 104 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2)
# 105 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return __c1 < __c2; }
# 108 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int compare(const char_type *, const char_type *, size_t);
# 111 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static size_t length(const char_type *);
# 114 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static const char_type *find(const char_type *, size_t, const char_type &);
# 117 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type *move(char_type *, const char_type *, size_t);
# 120 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type *copy(char_type *, const char_type *, size_t);
# 123 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type *assign(char_type *, size_t, char_type);
# 126 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type to_char_type(const int_type &__c)
# 127 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return static_cast< char_type>(__c); }
# 130 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int_type to_int_type(const char_type &__c)
# 131 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return static_cast< int_type>(__c); }
# 134 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2)
# 135 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 138 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int_type eof()
# 139 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return (int_type)(-1); }
# 142 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int_type not_eof(const int_type &__c)
# 143 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return (!(eq_int_type(__c, eof()))) ? __c : (to_int_type(char_type())); }
# 144 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
};
# 146 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<class _CharT> int
# 149 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
char_traits< _CharT> ::compare(const char_type *__s1, const char_type *__s2, size_t __n)
# 150 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{
# 151 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
for (size_t __i = (0); __i < __n; ++__i) {
# 152 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
if (lt(__s1[__i], __s2[__i])) {
# 153 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
return -1; } else {
# 154 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
if (lt(__s2[__i], __s1[__i])) {
# 155 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
return 1; } } }
# 156 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
return 0;
# 157 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
}
# 159 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<class _CharT> size_t
# 162 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
char_traits< _CharT> ::length(const char_type *__p)
# 163 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{
# 164 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
auto size_t __i = (0);
# 165 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
while (!(eq(__p[__i], char_type()))) {
# 166 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
++__i; }
# 167 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
return __i;
# 168 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
}
# 170 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<class _CharT> const typename char_traits< _CharT> ::char_type *
# 173 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
char_traits< _CharT> ::find(const char_type *__s, size_t __n, const char_type &__a)
# 174 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{
# 175 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
for (size_t __i = (0); __i < __n; ++__i) {
# 176 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
if (eq(__s[__i], __a)) {
# 177 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
return __s + __i; } }
# 178 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
return 0;
# 179 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
}
# 181 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<class _CharT> typename char_traits< _CharT> ::char_type *
# 184 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
char_traits< _CharT> ::move(char_type *__s1, const char_type *__s2, size_t __n)
# 185 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{
# 186 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
return static_cast< char_type *>((std::memmove(__s1, __s2, __n * sizeof(_CharT))));
# 188 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
}
# 190 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<class _CharT> typename char_traits< _CharT> ::char_type *
# 193 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
char_traits< _CharT> ::copy(char_type *__s1, const char_type *__s2, size_t __n)
# 194 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{
# 195 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
std::copy(__s2, __s2 + __n, __s1);
# 196 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
return __s1;
# 197 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
}
# 199 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<class _CharT> typename char_traits< _CharT> ::char_type *
# 202 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
char_traits< _CharT> ::assign(char_type *__s, size_t __n, char_type __a)
# 203 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{
# 204 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
std::fill_n(__s, __n, __a);
# 205 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
return __s;
# 206 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
}
# 207 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
}
# 209 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
namespace std {
# 224 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<class _CharT>
# 225 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
struct char_traits : public __gnu_cxx::char_traits< _CharT> {
# 226 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
};
# 231 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<> struct char_traits< char> {
# 233 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef char char_type;
# 234 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef int int_type;
# 235 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef streampos pos_type;
# 236 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef streamoff off_type;
# 237 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 240 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static void assign(char_type &__c1, const char_type &__c2)
# 241 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ __c1 = __c2; }
# 244 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2)
# 245 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 248 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2)
# 249 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return __c1 < __c2; }
# 252 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
# 253 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return memcmp(__s1, __s2, __n); }
# 256 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static size_t length(const char_type *__s)
# 257 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return strlen(__s); }
# 260 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
# 261 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return static_cast< const char_type *>(memchr(__s, __a, __n)); }
# 264 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
# 265 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return static_cast< char_type *>(memmove(__s1, __s2, __n)); }
# 268 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
# 269 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return static_cast< char_type *>(memcpy(__s1, __s2, __n)); }
# 272 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type *assign(char_type *__s, size_t __n, char_type __a)
# 273 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return static_cast< char_type *>(memset(__s, __a, __n)); }
# 276 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type to_char_type(const int_type &__c)
# 277 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return static_cast< char_type>((__c)); }
# 282 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int_type to_int_type(const char_type &__c)
# 283 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return static_cast< int_type>((static_cast< unsigned char>((__c)))); }
# 286 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2)
# 287 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 290 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int_type eof() { return static_cast< int_type>((-1)); }
# 293 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int_type not_eof(const int_type &__c)
# 294 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return (__c == eof()) ? 0 : (__c); }
# 295 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
};
# 301 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
template<> struct char_traits< wchar_t> {
# 303 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef wchar_t char_type;
# 304 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef wint_t int_type;
# 305 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef streamoff off_type;
# 306 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef wstreampos pos_type;
# 307 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 310 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static void assign(char_type &__c1, const char_type &__c2)
# 311 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ __c1 = __c2; }
# 314 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2)
# 315 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 318 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2)
# 319 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return __c1 < __c2; }
# 322 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
# 323 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return wmemcmp(__s1, __s2, __n); }
# 326 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static size_t length(const char_type *__s)
# 327 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return wcslen(__s); }
# 330 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
# 331 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return wmemchr(__s, __a, __n); }
# 334 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
# 335 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return wmemmove(__s1, __s2, __n); }
# 338 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
# 339 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return wmemcpy(__s1, __s2, __n); }
# 342 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type *assign(char_type *__s, size_t __n, char_type __a)
# 343 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return wmemset(__s, __a, __n); }
# 346 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static char_type to_char_type(const int_type &__c) { return (char_type)(__c); }
# 349 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int_type to_int_type(const char_type &__c) { return (int_type)(__c); }
# 352 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2)
# 353 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 356 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int_type eof() { return static_cast< int_type>(((__darwin_wint_t)(-1))); }
# 359 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
static int_type not_eof(const int_type &__c)
# 360 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
{ return eq_int_type(__c, eof()) ? 0 : (__c); }
# 361 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
};
# 364 "/usr/include/c++/4.0.0/bits/char_traits.h" 3
}
# 50 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
namespace std {
# 53 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
class locale;
# 56 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool isspace(_CharT, const locale &);
# 60 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool isprint(_CharT, const locale &);
# 64 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool iscntrl(_CharT, const locale &);
# 68 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool isupper(_CharT, const locale &);
# 72 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool islower(_CharT, const locale &);
# 76 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool isalpha(_CharT, const locale &);
# 80 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool isdigit(_CharT, const locale &);
# 84 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool ispunct(_CharT, const locale &);
# 88 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool isxdigit(_CharT, const locale &);
# 92 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool isalnum(_CharT, const locale &);
# 96 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline bool isgraph(_CharT, const locale &);
# 100 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline _CharT toupper(_CharT, const locale &);
# 104 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> extern inline _CharT tolower(_CharT, const locale &);
# 109 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
struct ctype_base;
# 110 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> class ctype;
# 112 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<> class ctype< char> ;
# 114 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<> class ctype< wchar_t> ;
# 116 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> class ctype_byname;
# 120 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
class codecvt_base;
# 121 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
class __enc_traits;
# 122 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _InternT, class _ExternT, class _StateT> class codecvt;
# 124 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<> class codecvt< char, char, __mbstate_t> ;
# 126 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<> class codecvt< wchar_t, char, __mbstate_t> ;
# 128 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _InternT, class _ExternT, class _StateT> class codecvt_byname;
# 132 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class num_get;
# 134 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class num_put;
# 136 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> class numpunct;
# 137 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> class numpunct_byname;
# 140 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> class collate;
# 142 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> class collate_byname;
# 146 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
class time_base;
# 147 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get;
# 149 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get_byname;
# 151 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put;
# 153 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put_byname;
# 157 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
class money_base;
# 158 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class money_get;
# 160 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class money_put;
# 162 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, bool _Intl = false> class moneypunct;
# 164 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT, bool _Intl = false> class moneypunct_byname;
# 168 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
struct messages_base;
# 169 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> class messages;
# 171 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _CharT> class messages_byname;
# 174 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _Facet> extern inline bool has_facet(const locale &) throw();
# 178 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _Facet> extern inline const _Facet &use_facet(const locale &);
# 182 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
template<class _Facet> inline const _Facet &
# 184 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
__check_facet(const _Facet *__f)
# 185 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
{
# 186 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
if (!__f) {
# 187 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
__throw_bad_cast(); }
# 188 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
return *__f;
# 189 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
}
# 190 "/usr/include/c++/4.0.0/bits/localefwd.h" 3
}
# 33 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 40 "/usr/include/c++/4.0.0/bits/atomicity.h" 3
namespace __gnu_cxx {
# 44 "/usr/include/c++/4.0.0/bits/atomicity.h" 3
extern _Atomic_word __exchange_and_add(volatile _Atomic_word *, int) __attribute__((__unused__));
# 48 "/usr/include/c++/4.0.0/bits/atomicity.h" 3
extern void __atomic_add(volatile _Atomic_word *, int) __attribute__((__unused__));
# 49 "/usr/include/c++/4.0.0/bits/atomicity.h" 3
}
# 44 "/usr/include/c++/4.0.0/new" 3
#pragma GCC visibility push(default)
# 48 "/usr/include/c++/4.0.0/new" 3
namespace std {
# 55 "/usr/include/c++/4.0.0/new" 3
class bad_alloc : public exception {
# 58 "/usr/include/c++/4.0.0/new" 3
public: bad_alloc() throw() { }
# 61 "/usr/include/c++/4.0.0/new" 3
virtual ~bad_alloc() throw();
# 62 "/usr/include/c++/4.0.0/new" 3
};
# 64 "/usr/include/c++/4.0.0/new" 3
struct nothrow_t { };
# 65 "/usr/include/c++/4.0.0/new" 3
extern const nothrow_t nothrow;
# 68 "/usr/include/c++/4.0.0/new" 3
typedef void (*new_handler)(void);
# 70 "/usr/include/c++/4.0.0/new" 3
extern new_handler set_new_handler(new_handler) throw();
# 71 "/usr/include/c++/4.0.0/new" 3
}
# 84 "/usr/include/c++/4.0.0/new" 3
extern void *operator new(size_t) throw(std::bad_alloc);
# 85 "/usr/include/c++/4.0.0/new" 3
extern void *operator new[](size_t) throw(std::bad_alloc);
# 86 "/usr/include/c++/4.0.0/new" 3
extern void operator delete(void *) throw();
# 87 "/usr/include/c++/4.0.0/new" 3
extern void operator delete[](void *) throw();
# 88 "/usr/include/c++/4.0.0/new" 3
extern void *operator new(size_t, const std::nothrow_t &) throw();
# 89 "/usr/include/c++/4.0.0/new" 3
extern void *operator new[](size_t, const std::nothrow_t &) throw();
# 90 "/usr/include/c++/4.0.0/new" 3
extern void operator delete(void *, const std::nothrow_t &) throw();
# 91 "/usr/include/c++/4.0.0/new" 3
extern void operator delete[](void *, const std::nothrow_t &) throw();
# 94 "/usr/include/c++/4.0.0/new" 3
inline void *operator new(size_t, void *__p) throw() { return __p; }
# 95 "/usr/include/c++/4.0.0/new" 3
inline void *operator new[](size_t, void *__p) throw() { return __p; }
# 98 "/usr/include/c++/4.0.0/new" 3
inline void operator delete(void *, void *) throw() { }
# 99 "/usr/include/c++/4.0.0/new" 3
inline void operator delete[](void *, void *) throw() { }
# 103 "/usr/include/c++/4.0.0/new" 3
#pragma GCC visibility pop
# 40 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
namespace __gnu_cxx {
# 49 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
template<class _Tp>
# 50 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
class new_allocator {
# 53 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
public: typedef size_t size_type;
# 54 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
typedef ptrdiff_t difference_type;
# 55 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
typedef _Tp *pointer;
# 56 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
typedef const _Tp *const_pointer;
# 57 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
typedef _Tp &reference;
# 58 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
typedef const _Tp &const_reference;
# 59 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
typedef _Tp value_type;
# 61 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
template<class _Tp1>
# 62 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
struct rebind {
# 63 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
typedef __gnu_cxx::new_allocator< _Tp1> other; };
# 65 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
new_allocator() throw() { }
# 67 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
new_allocator(const __gnu_cxx::new_allocator< _Tp> &) throw() { }
# 69 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
template<class _Tp1>
# 70 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
new_allocator(const __gnu_cxx::new_allocator< _Tp1> &) throw() { }
# 72 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
~new_allocator() throw() { }
# 75 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
pointer address(reference __x) const { return &__x; }
# 78 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
const_pointer address(const_reference __x) const { return &__x; }
# 83 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
pointer allocate(size_type __n, const void * = 0)
# 84 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
{
# 85 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
if (__builtin_expect(__n > this->max_size(), false)) {
# 86 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
std::__throw_bad_alloc(); }
# 88 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
return static_cast< pointer>(::operator new(__n * sizeof(_Tp)));
# 89 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
}
# 93 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
void deallocate(pointer __p, size_type)
# 94 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
{ ::operator delete(__p); }
# 97 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
size_type max_size() const throw()
# 98 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
{ return ((size_t)(-1)) / sizeof(_Tp); }
# 103 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
void construct(pointer __p, const _Tp &__val)
# 104 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
{ ::new (__p) (_Tp)(__val); }
# 107 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
void destroy(pointer __p) { (__p->~_Tp()); }
# 108 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
};
# 110 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
template<class _Tp> inline bool
# 112 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
operator==(const new_allocator< _Tp> &, const new_allocator< _Tp> &)
# 113 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
{ return true; }
# 115 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
template<class _Tp> inline bool
# 117 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
operator!=(const new_allocator< _Tp> &, const new_allocator< _Tp> &)
# 118 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
{ return false; }
# 119 "/usr/include/c++/4.0.0/ext/new_allocator.h" 3
}
# 54 "/usr/include/c++/4.0.0/bits/allocator.h" 3
namespace std {
# 56 "/usr/include/c++/4.0.0/bits/allocator.h" 3
template<class _Tp> class allocator;
# 61 "/usr/include/c++/4.0.0/bits/allocator.h" 3
template<> class allocator< void> {
# 64 "/usr/include/c++/4.0.0/bits/allocator.h" 3
public: typedef size_t size_type;
# 65 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef ptrdiff_t difference_type;
# 66 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef void *pointer;
# 67 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef const void *const_pointer;
# 68 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef void value_type;
# 70 "/usr/include/c++/4.0.0/bits/allocator.h" 3
template<class _Tp1>
# 71 "/usr/include/c++/4.0.0/bits/allocator.h" 3
struct rebind {
# 72 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef std::allocator< _Tp1> other; };
# 73 "/usr/include/c++/4.0.0/bits/allocator.h" 3
};
# 81 "/usr/include/c++/4.0.0/bits/allocator.h" 3
template<class _Tp>
# 82 "/usr/include/c++/4.0.0/bits/allocator.h" 3
class allocator : public __gnu_cxx::new_allocator< _Tp> {
# 85 "/usr/include/c++/4.0.0/bits/allocator.h" 3
public: typedef size_t size_type;
# 86 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef ptrdiff_t difference_type;
# 87 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef _Tp *pointer;
# 88 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef const _Tp *const_pointer;
# 89 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef _Tp &reference;
# 90 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef const _Tp &const_reference;
# 91 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef _Tp value_type;
# 93 "/usr/include/c++/4.0.0/bits/allocator.h" 3
template<class _Tp1>
# 94 "/usr/include/c++/4.0.0/bits/allocator.h" 3
struct rebind {
# 95 "/usr/include/c++/4.0.0/bits/allocator.h" 3
typedef std::allocator< _Tp1> other; };
# 97 "/usr/include/c++/4.0.0/bits/allocator.h" 3
allocator() throw() { }
# 99 "/usr/include/c++/4.0.0/bits/allocator.h" 3
allocator(const std::allocator< _Tp> &__a) throw() : __gnu_cxx::new_allocator< _Tp> (__a)
# 100 "/usr/include/c++/4.0.0/bits/allocator.h" 3
{ }
# 102 "/usr/include/c++/4.0.0/bits/allocator.h" 3
template<class _Tp1>
# 103 "/usr/include/c++/4.0.0/bits/allocator.h" 3
allocator(const std::allocator< _Tp1> &) throw() { }
# 105 "/usr/include/c++/4.0.0/bits/allocator.h" 3
~allocator() throw() { }
# 108 "/usr/include/c++/4.0.0/bits/allocator.h" 3
};
# 110 "/usr/include/c++/4.0.0/bits/allocator.h" 3
template<class _T1, class _T2> inline bool
# 112 "/usr/include/c++/4.0.0/bits/allocator.h" 3
operator==(const allocator< _T1> &, const allocator< _T2> &)
# 113 "/usr/include/c++/4.0.0/bits/allocator.h" 3
{ return true; }
# 115 "/usr/include/c++/4.0.0/bits/allocator.h" 3
template<class _T1, class _T2> inline bool
# 117 "/usr/include/c++/4.0.0/bits/allocator.h" 3
operator!=(const allocator< _T1> &, const allocator< _T2> &)
# 118 "/usr/include/c++/4.0.0/bits/allocator.h" 3
{ return false; }
# 124 "/usr/include/c++/4.0.0/bits/allocator.h" 3
extern template class allocator< char> ;
# 125 "/usr/include/c++/4.0.0/bits/allocator.h" 3
extern template class allocator< wchar_t> ;
# 130 "/usr/include/c++/4.0.0/bits/allocator.h" 3
}
# 67 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
namespace std {
# 75 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
template<class _T1, class _T2> inline void
# 77 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
_Construct(_T1 *__p, const _T2 &__value)
# 78 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
{
# 81 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
::new (static_cast< void *>(__p)) (_T1)(__value);
# 82 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
}
# 90 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
template<class _T1> inline void
# 92 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
_Construct(_T1 *__p)
# 93 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
{
# 96 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
::new (static_cast< void *>(__p)) (_T1);
# 97 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
}
# 104 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
template<class _Tp> inline void
# 106 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
_Destroy(_Tp *__pointer)
# 107 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
{ (__pointer->~_Tp()); }
# 116 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
template<class _ForwardIterator> inline void
# 118 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
__destroy_aux(_ForwardIterator __first, _ForwardIterator __last, __false_type)
# 120 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
{
# 121 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
for (; __first != __last; ++__first) {
# 122 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
std::_Destroy(&(*__first)); }
# 123 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
}
# 134 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
template<class _ForwardIterator> inline void
# 136 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
__destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
# 137 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
{ }
# 146 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
template<class _ForwardIterator> inline void
# 148 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
_Destroy(_ForwardIterator __first, _ForwardIterator __last)
# 149 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
{
# 151 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type;
# 153 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
typedef typename __is_scalar< typename iterator_traits< _ForwardIterator> ::value_type> ::__type _Has_trivial_destructor;
# 155 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
std::__destroy_aux(__first, __last, _Has_trivial_destructor());
# 156 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
}
# 166 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
template<class _Tp> class allocator;
# 168 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
template<class _ForwardIterator, class _Allocator> void
# 170 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator
# 171 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
__alloc)
# 172 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
{
# 173 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
for (; __first != __last; ++__first) {
# 174 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
(__alloc.destroy(&(*__first))); }
# 175 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
}
# 177 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
template<class _ForwardIterator, class _Allocator, class _Tp> inline void
# 179 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp> )
# 181 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
{
# 182 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
_Destroy(__first, __last);
# 183 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
}
# 186 "/usr/include/c++/4.0.0/bits/stl_construct.h" 3
}
# 66 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
namespace std {
# 69 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _InputIterator, class _ForwardIterator> inline _ForwardIterator
# 71 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_copy_aux(_InputIterator __first, _InputIterator __last, _ForwardIterator
# 72 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__result, __true_type)
# 74 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{ return std::copy(__first, __last, __result); }
# 76 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _InputIterator, class _ForwardIterator> inline _ForwardIterator
# 78 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_copy_aux(_InputIterator __first, _InputIterator __last, _ForwardIterator
# 79 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__result, __false_type)
# 81 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 82 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
auto _ForwardIterator __cur = __result;
# 83 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
try
# 84 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 85 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
for (; __first != __last; (++__first), (++__cur)) {
# 86 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Construct(&(*__cur), *__first); }
# 87 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
return __cur;
# 88 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 89 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
catch (...)
# 90 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 91 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Destroy(__result, __cur);
# 92 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
throw;
# 93 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 94 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 105 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _InputIterator, class _ForwardIterator> inline _ForwardIterator
# 107 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator
# 108 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__result)
# 109 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 110 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 111 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
typedef typename __is_scalar< typename iterator_traits< _ForwardIterator> ::value_type> ::__type _Is_POD;
# 112 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
return std::__uninitialized_copy_aux(__first, __last, __result, _Is_POD());
# 114 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 117 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
inline char *uninitialized_copy(const char *__first, const char *__last, char *__result)
# 118 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 119 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::memmove(__result, __first, __last - __first);
# 120 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
return __result + (__last - __first);
# 121 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 124 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
inline wchar_t *uninitialized_copy(const wchar_t *__first, const wchar_t *__last, wchar_t *
# 125 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__result)
# 126 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 127 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::memmove(__result, __first, sizeof(wchar_t) * (__last - __first));
# 128 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
return __result + (__last - __first);
# 129 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 133 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Tp> inline void
# 135 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator
# 136 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__last, const _Tp &
# 137 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x, __true_type)
# 138 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{ std::fill(__first, __last, __x); }
# 140 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Tp> void
# 142 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_fill_aux(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 143 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x, __false_type)
# 144 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 145 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
auto _ForwardIterator __cur = __first;
# 146 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
try
# 147 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 148 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
for (; __cur != __last; ++__cur) {
# 149 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Construct(&(*__cur), __x); }
# 150 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 151 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
catch (...)
# 152 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 153 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Destroy(__first, __cur);
# 154 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
throw;
# 155 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 156 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 167 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Tp> inline void
# 169 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 170 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x)
# 171 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 172 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 173 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
typedef typename __is_scalar< typename iterator_traits< _ForwardIterator> ::value_type> ::__type _Is_POD;
# 174 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::__uninitialized_fill_aux(__first, __last, __x, _Is_POD());
# 175 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 179 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Size, class _Tp> inline void
# 181 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n, const _Tp &
# 182 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x, __true_type)
# 183 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{ std::fill_n(__first, __n, __x); }
# 185 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Size, class _Tp> void
# 187 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n, const _Tp &
# 188 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x, __false_type)
# 189 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 190 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
auto _ForwardIterator __cur = __first;
# 191 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
try
# 192 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 193 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
for (; __n > 0; (--__n), (++__cur)) {
# 194 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Construct(&(*__cur), __x); }
# 195 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 196 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
catch (...)
# 197 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 198 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Destroy(__first, __cur);
# 199 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
throw;
# 200 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 201 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 212 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Size, class _Tp> inline void
# 214 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x)
# 215 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 216 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 217 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
typedef typename __is_scalar< typename iterator_traits< _ForwardIterator> ::value_type> ::__type _Is_POD;
# 218 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());
# 219 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 227 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _InputIterator, class _ForwardIterator, class
# 228 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
_Allocator> _ForwardIterator
# 230 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator
# 231 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__result, _Allocator
# 232 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__alloc)
# 233 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 234 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
auto _ForwardIterator __cur = __result;
# 235 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
try
# 236 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 237 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
for (; __first != __last; (++__first), (++__cur)) {
# 238 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
(__alloc.construct(&(*__cur), *__first)); }
# 239 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
return __cur;
# 240 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 241 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
catch (...)
# 242 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 243 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Destroy(__result, __cur, __alloc);
# 244 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
throw;
# 245 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 246 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 248 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _InputIterator, class _ForwardIterator, class _Tp> inline _ForwardIterator
# 250 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator
# 251 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__result, allocator< _Tp> )
# 253 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 254 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
return std::uninitialized_copy(__first, __last, __result);
# 255 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 257 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Tp, class _Allocator> void
# 259 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 260 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x, _Allocator __alloc)
# 261 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 262 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
auto _ForwardIterator __cur = __first;
# 263 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
try
# 264 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 265 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
for (; __cur != __last; ++__cur) {
# 266 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
(__alloc.construct(&(*__cur), __x)); }
# 267 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 268 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
catch (...)
# 269 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 270 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Destroy(__first, __cur, __alloc);
# 271 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
throw;
# 272 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 273 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 275 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Tp, class _Tp2> inline void
# 277 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 278 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x, allocator< _Tp2> )
# 279 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 280 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::uninitialized_fill(__first, __last, __x);
# 281 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 283 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Size, class _Tp, class
# 284 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
_Allocator> void
# 286 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 287 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x, _Allocator
# 288 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__alloc)
# 289 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 290 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
auto _ForwardIterator __cur = __first;
# 291 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
try
# 292 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 293 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
for (; __n > 0; (--__n), (++__cur)) {
# 294 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
(__alloc.construct(&(*__cur), __x)); }
# 295 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 296 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
catch (...)
# 297 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 298 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Destroy(__first, __cur, __alloc);
# 299 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
throw;
# 300 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 301 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 303 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Size, class _Tp, class
# 304 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
_Tp2> void
# 306 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 307 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x, allocator< _Tp2> )
# 309 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 310 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::uninitialized_fill_n(__first, __n, __x);
# 311 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 323 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 324 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
_ForwardIterator, class _Allocator> inline _ForwardIterator
# 326 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_copy_copy(_InputIterator1 __first1, _InputIterator1
# 327 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__last1, _InputIterator2
# 328 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__first2, _InputIterator2
# 329 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__last2, _ForwardIterator
# 330 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__result, _Allocator
# 331 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__alloc)
# 332 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 333 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
auto _ForwardIterator __mid = (std::__uninitialized_copy_a(__first1, __last1, __result, __alloc));
# 336 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
try
# 337 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 338 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
# 339 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 340 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
catch (...)
# 341 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 342 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Destroy(__result, __mid, __alloc);
# 343 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
throw;
# 344 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 345 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 350 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _ForwardIterator, class _Tp, class _InputIterator, class
# 351 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
_Allocator> inline _ForwardIterator
# 353 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_fill_copy(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &
# 354 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__x, _InputIterator __first, _InputIterator
# 355 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__last, _Allocator
# 356 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__alloc)
# 357 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 358 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
# 359 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
try
# 360 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 361 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
return std::__uninitialized_copy_a(__first, __last, __mid, __alloc);
# 362 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 363 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
catch (...)
# 364 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 365 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Destroy(__result, __mid, __alloc);
# 366 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
throw;
# 367 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 368 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 373 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
template<class _InputIterator, class _ForwardIterator, class _Tp, class
# 374 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
_Allocator> inline void
# 376 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__uninitialized_copy_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator
# 377 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__first2, _ForwardIterator
# 378 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__last2, const _Tp &__x, _Allocator
# 379 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
__alloc)
# 380 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 381 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
auto _ForwardIterator __mid2 = (std::__uninitialized_copy_a(__first1, __last1, __first2, __alloc));
# 384 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
try
# 385 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 386 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
# 387 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 388 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
catch (...)
# 389 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
{
# 390 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
std::_Destroy(__first2, __mid2, __alloc);
# 391 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
throw;
# 392 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 393 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 395 "/usr/include/c++/4.0.0/bits/stl_uninitialized.h" 3
}
# 64 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
namespace std {
# 70 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
template<class _ForwardIterator, class _Tp>
# 71 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
class raw_storage_iterator : public iterator< output_iterator_tag, void, void, void, void> {
# 75 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
protected: _ForwardIterator _M_iter;
# 79 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
public: explicit raw_storage_iterator(_ForwardIterator __x) : _M_iter(__x)
# 80 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
{ }
# 83 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
std::raw_storage_iterator< _ForwardIterator, _Tp> &operator*() { return *this; }
# 86 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
std::raw_storage_iterator< _ForwardIterator, _Tp> &operator=(const _Tp &__element)
# 87 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
{
# 88 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
std::_Construct(&(*(this->_M_iter)), __element);
# 89 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
return *this;
# 90 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
}
# 93 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
std::raw_storage_iterator< _ForwardIterator, _Tp> &operator++()
# 94 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
{
# 95 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
++(this->_M_iter);
# 96 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
return *this;
# 97 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
}
# 100 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
std::raw_storage_iterator< _ForwardIterator, _Tp> operator++(int)
# 101 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
{
# 102 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
auto std::raw_storage_iterator< _ForwardIterator, _Tp> __tmp = (*this);
# 103 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
++(this->_M_iter);
# 104 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
return __tmp;
# 105 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
}
# 106 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
};
# 107 "/usr/include/c++/4.0.0/bits/stl_raw_storage_iter.h" 3
}
# 149 "/usr/include/c++/4.0.0/limits" 3
namespace std {
# 156 "/usr/include/c++/4.0.0/limits" 3
enum float_round_style {
# 158 "/usr/include/c++/4.0.0/limits" 3
round_indeterminate = (-1),
# 159 "/usr/include/c++/4.0.0/limits" 3
round_toward_zero,
# 160 "/usr/include/c++/4.0.0/limits" 3
round_to_nearest,
# 161 "/usr/include/c++/4.0.0/limits" 3
round_toward_infinity,
# 162 "/usr/include/c++/4.0.0/limits" 3
round_toward_neg_infinity
# 163 "/usr/include/c++/4.0.0/limits" 3
};
# 171 "/usr/include/c++/4.0.0/limits" 3
enum float_denorm_style {
# 174 "/usr/include/c++/4.0.0/limits" 3
denorm_indeterminate = (-1),
# 176 "/usr/include/c++/4.0.0/limits" 3
denorm_absent,
# 178 "/usr/include/c++/4.0.0/limits" 3
denorm_present
# 179 "/usr/include/c++/4.0.0/limits" 3
};
# 191 "/usr/include/c++/4.0.0/limits" 3
struct __numeric_limits_base {
# 195 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = false;
# 200 "/usr/include/c++/4.0.0/limits" 3
static const int digits = 0;
# 202 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = 0;
# 204 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = false;
# 210 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = false;
# 215 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = false;
# 218 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 0;
# 222 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 225 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 229 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 232 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 235 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 238 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 241 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 243 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 246 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 250 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 254 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = false;
# 259 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = false;
# 262 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = false;
# 264 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 268 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 269 "/usr/include/c++/4.0.0/limits" 3
};
# 284 "/usr/include/c++/4.0.0/limits" 3
template<class _Tp>
# 285 "/usr/include/c++/4.0.0/limits" 3
struct numeric_limits : public __numeric_limits_base {
# 289 "/usr/include/c++/4.0.0/limits" 3
static _Tp min() throw() { return (_Tp)0; }
# 291 "/usr/include/c++/4.0.0/limits" 3
static _Tp max() throw() { return (_Tp)0; }
# 294 "/usr/include/c++/4.0.0/limits" 3
static _Tp epsilon() throw() { return (_Tp)0; }
# 296 "/usr/include/c++/4.0.0/limits" 3
static _Tp round_error() throw() { return (_Tp)0; }
# 298 "/usr/include/c++/4.0.0/limits" 3
static _Tp infinity() throw() { return (_Tp)0; }
# 300 "/usr/include/c++/4.0.0/limits" 3
static _Tp quiet_NaN() throw() { return (_Tp)0; }
# 303 "/usr/include/c++/4.0.0/limits" 3
static _Tp signaling_NaN() throw() { return (_Tp)0; }
# 307 "/usr/include/c++/4.0.0/limits" 3
static _Tp denorm_min() throw() { return (_Tp)0; }
# 308 "/usr/include/c++/4.0.0/limits" 3
};
# 315 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< bool> {
# 317 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 319 "/usr/include/c++/4.0.0/limits" 3
static bool min() throw()
# 320 "/usr/include/c++/4.0.0/limits" 3
{ return false; }
# 321 "/usr/include/c++/4.0.0/limits" 3
static bool max() throw()
# 322 "/usr/include/c++/4.0.0/limits" 3
{ return true; }
# 324 "/usr/include/c++/4.0.0/limits" 3
static const int digits = 1;
# 325 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = 0;
# 326 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = false;
# 327 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 328 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 329 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 330 "/usr/include/c++/4.0.0/limits" 3
static bool epsilon() throw()
# 331 "/usr/include/c++/4.0.0/limits" 3
{ return false; }
# 332 "/usr/include/c++/4.0.0/limits" 3
static bool round_error() throw()
# 333 "/usr/include/c++/4.0.0/limits" 3
{ return false; }
# 335 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 336 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 337 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 338 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 340 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 341 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 342 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 343 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 344 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 346 "/usr/include/c++/4.0.0/limits" 3
static bool infinity() throw()
# 347 "/usr/include/c++/4.0.0/limits" 3
{ return false; }
# 348 "/usr/include/c++/4.0.0/limits" 3
static bool quiet_NaN() throw()
# 349 "/usr/include/c++/4.0.0/limits" 3
{ return false; }
# 350 "/usr/include/c++/4.0.0/limits" 3
static bool signaling_NaN() throw()
# 351 "/usr/include/c++/4.0.0/limits" 3
{ return false; }
# 352 "/usr/include/c++/4.0.0/limits" 3
static bool denorm_min() throw()
# 353 "/usr/include/c++/4.0.0/limits" 3
{ return false; }
# 355 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 356 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 357 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = false;
# 362 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 363 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 364 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 365 "/usr/include/c++/4.0.0/limits" 3
};
# 369 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< char> {
# 371 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 373 "/usr/include/c++/4.0.0/limits" 3
static char min() throw()
# 374 "/usr/include/c++/4.0.0/limits" 3
{ return (((char)(-1)) < 0) ? (((char)1) << ((sizeof(char) * (8)) - (((char)(-1)) < 0))) : ((char)0); }
# 375 "/usr/include/c++/4.0.0/limits" 3
static char max() throw()
# 376 "/usr/include/c++/4.0.0/limits" 3
{ return (((char)(-1)) < 0) ? ((((char)1) << ((sizeof(char) * (8)) - (((char)(-1)) < 0))) - 1) : (~((char)0)); }
# 378 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0));
# 379 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643)) / (2136));
# 380 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = (((char)(-1)) < 0);
# 381 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 382 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 383 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 384 "/usr/include/c++/4.0.0/limits" 3
static char epsilon() throw()
# 385 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 386 "/usr/include/c++/4.0.0/limits" 3
static char round_error() throw()
# 387 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 389 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 390 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 391 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 392 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 394 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 395 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 396 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 397 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 398 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 400 "/usr/include/c++/4.0.0/limits" 3
static char infinity() throw()
# 401 "/usr/include/c++/4.0.0/limits" 3
{ return (char)0; }
# 402 "/usr/include/c++/4.0.0/limits" 3
static char quiet_NaN() throw()
# 403 "/usr/include/c++/4.0.0/limits" 3
{ return (char)0; }
# 404 "/usr/include/c++/4.0.0/limits" 3
static char signaling_NaN() throw()
# 405 "/usr/include/c++/4.0.0/limits" 3
{ return (char)0; }
# 406 "/usr/include/c++/4.0.0/limits" 3
static char denorm_min() throw()
# 407 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< char>(0); }
# 409 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 410 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 411 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 413 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 414 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 415 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 416 "/usr/include/c++/4.0.0/limits" 3
};
# 420 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< signed char> {
# 422 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 424 "/usr/include/c++/4.0.0/limits" 3
static signed char min() throw()
# 425 "/usr/include/c++/4.0.0/limits" 3
{ return (-127) - 1; }
# 426 "/usr/include/c++/4.0.0/limits" 3
static signed char max() throw()
# 427 "/usr/include/c++/4.0.0/limits" 3
{ return 127; }
# 429 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0));
# 430 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643)) / (2136));
# 431 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = true;
# 432 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 433 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 434 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 435 "/usr/include/c++/4.0.0/limits" 3
static signed char epsilon() throw()
# 436 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 437 "/usr/include/c++/4.0.0/limits" 3
static signed char round_error() throw()
# 438 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 440 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 441 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 442 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 443 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 445 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 446 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 447 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 448 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 449 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 451 "/usr/include/c++/4.0.0/limits" 3
static signed char infinity() throw()
# 452 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< signed char>(0); }
# 453 "/usr/include/c++/4.0.0/limits" 3
static signed char quiet_NaN() throw()
# 454 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< signed char>(0); }
# 455 "/usr/include/c++/4.0.0/limits" 3
static signed char signaling_NaN() throw()
# 456 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< signed char>(0); }
# 457 "/usr/include/c++/4.0.0/limits" 3
static signed char denorm_min() throw()
# 458 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< signed char>(0); }
# 460 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 461 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 462 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 464 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 465 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 466 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 467 "/usr/include/c++/4.0.0/limits" 3
};
# 471 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< unsigned char> {
# 473 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 475 "/usr/include/c++/4.0.0/limits" 3
static unsigned char min() throw()
# 476 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 477 "/usr/include/c++/4.0.0/limits" 3
static unsigned char max() throw()
# 478 "/usr/include/c++/4.0.0/limits" 3
{ return ((127) * 2U) + (1); }
# 480 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0));
# 481 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643)) / (2136));
# 482 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = false;
# 483 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 484 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 485 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 486 "/usr/include/c++/4.0.0/limits" 3
static unsigned char epsilon() throw()
# 487 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 488 "/usr/include/c++/4.0.0/limits" 3
static unsigned char round_error() throw()
# 489 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 491 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 492 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 493 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 494 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 496 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 497 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 498 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 499 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 500 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 502 "/usr/include/c++/4.0.0/limits" 3
static unsigned char infinity() throw()
# 503 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned char>(0); }
# 504 "/usr/include/c++/4.0.0/limits" 3
static unsigned char quiet_NaN() throw()
# 505 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned char>(0); }
# 506 "/usr/include/c++/4.0.0/limits" 3
static unsigned char signaling_NaN() throw()
# 507 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned char>(0); }
# 508 "/usr/include/c++/4.0.0/limits" 3
static unsigned char denorm_min() throw()
# 509 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned char>(0); }
# 511 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 512 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 513 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 515 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 516 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 517 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 518 "/usr/include/c++/4.0.0/limits" 3
};
# 522 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< wchar_t> {
# 524 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 526 "/usr/include/c++/4.0.0/limits" 3
static wchar_t min() throw()
# 527 "/usr/include/c++/4.0.0/limits" 3
{ return (((wchar_t)(-1)) < 0) ? (((wchar_t)1) << ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0))) : ((wchar_t)0); }
# 528 "/usr/include/c++/4.0.0/limits" 3
static wchar_t max() throw()
# 529 "/usr/include/c++/4.0.0/limits" 3
{ return (((wchar_t)(-1)) < 0) ? ((((wchar_t)1) << ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0))) - 1) : (~((wchar_t)0)); }
# 531 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0));
# 532 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643)) / (2136));
# 533 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = (((wchar_t)(-1)) < 0);
# 534 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 535 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 536 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 537 "/usr/include/c++/4.0.0/limits" 3
static wchar_t epsilon() throw()
# 538 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 539 "/usr/include/c++/4.0.0/limits" 3
static wchar_t round_error() throw()
# 540 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 542 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 543 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 544 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 545 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 547 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 548 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 549 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 550 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 551 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 553 "/usr/include/c++/4.0.0/limits" 3
static wchar_t infinity() throw()
# 554 "/usr/include/c++/4.0.0/limits" 3
{ return (wchar_t)0; }
# 555 "/usr/include/c++/4.0.0/limits" 3
static wchar_t quiet_NaN() throw()
# 556 "/usr/include/c++/4.0.0/limits" 3
{ return (wchar_t)0; }
# 557 "/usr/include/c++/4.0.0/limits" 3
static wchar_t signaling_NaN() throw()
# 558 "/usr/include/c++/4.0.0/limits" 3
{ return (wchar_t)0; }
# 559 "/usr/include/c++/4.0.0/limits" 3
static wchar_t denorm_min() throw()
# 560 "/usr/include/c++/4.0.0/limits" 3
{ return (wchar_t)0; }
# 562 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 563 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 564 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 566 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 567 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 568 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 569 "/usr/include/c++/4.0.0/limits" 3
};
# 573 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< short> {
# 575 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 577 "/usr/include/c++/4.0.0/limits" 3
static short min() throw()
# 578 "/usr/include/c++/4.0.0/limits" 3
{ return (-32767) - 1; }
# 579 "/usr/include/c++/4.0.0/limits" 3
static short max() throw()
# 580 "/usr/include/c++/4.0.0/limits" 3
{ return 32767; }
# 582 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0));
# 583 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643)) / (2136));
# 584 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = true;
# 585 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 586 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 587 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 588 "/usr/include/c++/4.0.0/limits" 3
static short epsilon() throw()
# 589 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 590 "/usr/include/c++/4.0.0/limits" 3
static short round_error() throw()
# 591 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 593 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 594 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 595 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 596 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 598 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 599 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 600 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 601 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 602 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 604 "/usr/include/c++/4.0.0/limits" 3
static short infinity() throw()
# 605 "/usr/include/c++/4.0.0/limits" 3
{ return (short)0; }
# 606 "/usr/include/c++/4.0.0/limits" 3
static short quiet_NaN() throw()
# 607 "/usr/include/c++/4.0.0/limits" 3
{ return (short)0; }
# 608 "/usr/include/c++/4.0.0/limits" 3
static short signaling_NaN() throw()
# 609 "/usr/include/c++/4.0.0/limits" 3
{ return (short)0; }
# 610 "/usr/include/c++/4.0.0/limits" 3
static short denorm_min() throw()
# 611 "/usr/include/c++/4.0.0/limits" 3
{ return (short)0; }
# 613 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 614 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 615 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 617 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 618 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 619 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 620 "/usr/include/c++/4.0.0/limits" 3
};
# 624 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< unsigned short> {
# 626 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 628 "/usr/include/c++/4.0.0/limits" 3
static unsigned short min() throw()
# 629 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 630 "/usr/include/c++/4.0.0/limits" 3
static unsigned short max() throw()
# 631 "/usr/include/c++/4.0.0/limits" 3
{ return ((32767) * 2U) + (1); }
# 633 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0));
# 634 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643)) / (2136));
# 635 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = false;
# 636 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 637 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 638 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 639 "/usr/include/c++/4.0.0/limits" 3
static unsigned short epsilon() throw()
# 640 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 641 "/usr/include/c++/4.0.0/limits" 3
static unsigned short round_error() throw()
# 642 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 644 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 645 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 646 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 647 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 649 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 650 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 651 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 652 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 653 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 655 "/usr/include/c++/4.0.0/limits" 3
static unsigned short infinity() throw()
# 656 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned short>(0); }
# 657 "/usr/include/c++/4.0.0/limits" 3
static unsigned short quiet_NaN() throw()
# 658 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned short>(0); }
# 659 "/usr/include/c++/4.0.0/limits" 3
static unsigned short signaling_NaN() throw()
# 660 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned short>(0); }
# 661 "/usr/include/c++/4.0.0/limits" 3
static unsigned short denorm_min() throw()
# 662 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned short>(0); }
# 664 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 665 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 666 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 668 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 669 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 670 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 671 "/usr/include/c++/4.0.0/limits" 3
};
# 675 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< int> {
# 677 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 679 "/usr/include/c++/4.0.0/limits" 3
static int min() throw()
# 680 "/usr/include/c++/4.0.0/limits" 3
{ return (-2147483647) - 1; }
# 681 "/usr/include/c++/4.0.0/limits" 3
static int max() throw()
# 682 "/usr/include/c++/4.0.0/limits" 3
{ return 2147483647; }
# 684 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0));
# 685 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643)) / (2136));
# 686 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = true;
# 687 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 688 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 689 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 690 "/usr/include/c++/4.0.0/limits" 3
static int epsilon() throw()
# 691 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 692 "/usr/include/c++/4.0.0/limits" 3
static int round_error() throw()
# 693 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 695 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 696 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 697 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 698 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 700 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 701 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 702 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 703 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 704 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 706 "/usr/include/c++/4.0.0/limits" 3
static int infinity() throw()
# 707 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< int>(0); }
# 708 "/usr/include/c++/4.0.0/limits" 3
static int quiet_NaN() throw()
# 709 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< int>(0); }
# 710 "/usr/include/c++/4.0.0/limits" 3
static int signaling_NaN() throw()
# 711 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< int>(0); }
# 712 "/usr/include/c++/4.0.0/limits" 3
static int denorm_min() throw()
# 713 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< int>(0); }
# 715 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 716 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 717 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 719 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 720 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 721 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 722 "/usr/include/c++/4.0.0/limits" 3
};
# 726 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< unsigned> {
# 728 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 730 "/usr/include/c++/4.0.0/limits" 3
static unsigned min() throw()
# 731 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 732 "/usr/include/c++/4.0.0/limits" 3
static unsigned max() throw()
# 733 "/usr/include/c++/4.0.0/limits" 3
{ return ((2147483647) * 2U) + (1); }
# 735 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0)));
# 736 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643)) / (2136));
# 737 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = false;
# 738 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 739 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 740 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 741 "/usr/include/c++/4.0.0/limits" 3
static unsigned epsilon() throw()
# 742 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 743 "/usr/include/c++/4.0.0/limits" 3
static unsigned round_error() throw()
# 744 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 746 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 747 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 748 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 749 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 751 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 752 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 753 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 754 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 755 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 757 "/usr/include/c++/4.0.0/limits" 3
static unsigned infinity() throw()
# 758 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned>(0); }
# 759 "/usr/include/c++/4.0.0/limits" 3
static unsigned quiet_NaN() throw()
# 760 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned>(0); }
# 761 "/usr/include/c++/4.0.0/limits" 3
static unsigned signaling_NaN() throw()
# 762 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned>(0); }
# 763 "/usr/include/c++/4.0.0/limits" 3
static unsigned denorm_min() throw()
# 764 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned>(0); }
# 766 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 767 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 768 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 770 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 771 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 772 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 773 "/usr/include/c++/4.0.0/limits" 3
};
# 777 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< long> {
# 779 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 781 "/usr/include/c++/4.0.0/limits" 3
static long min() throw()
# 782 "/usr/include/c++/4.0.0/limits" 3
{ return (-2147483647L) - (1); }
# 783 "/usr/include/c++/4.0.0/limits" 3
static long max() throw()
# 784 "/usr/include/c++/4.0.0/limits" 3
{ return 2147483647L; }
# 786 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0)));
# 787 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643)) / (2136));
# 788 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = true;
# 789 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 790 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 791 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 792 "/usr/include/c++/4.0.0/limits" 3
static long epsilon() throw()
# 793 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 794 "/usr/include/c++/4.0.0/limits" 3
static long round_error() throw()
# 795 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 797 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 798 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 799 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 800 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 802 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 803 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 804 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 805 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 806 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 808 "/usr/include/c++/4.0.0/limits" 3
static long infinity() throw()
# 809 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< long>(0); }
# 810 "/usr/include/c++/4.0.0/limits" 3
static long quiet_NaN() throw()
# 811 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< long>(0); }
# 812 "/usr/include/c++/4.0.0/limits" 3
static long signaling_NaN() throw()
# 813 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< long>(0); }
# 814 "/usr/include/c++/4.0.0/limits" 3
static long denorm_min() throw()
# 815 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< long>(0); }
# 817 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 818 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 819 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 821 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 822 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 823 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 824 "/usr/include/c++/4.0.0/limits" 3
};
# 828 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< unsigned long> {
# 830 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 832 "/usr/include/c++/4.0.0/limits" 3
static unsigned long min() throw()
# 833 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 834 "/usr/include/c++/4.0.0/limits" 3
static unsigned long max() throw()
# 835 "/usr/include/c++/4.0.0/limits" 3
{ return ((2147483647L) * 2UL) + (1); }
# 837 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0)));
# 838 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643)) / (2136));
# 839 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = false;
# 840 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 841 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 842 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 843 "/usr/include/c++/4.0.0/limits" 3
static unsigned long epsilon() throw()
# 844 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 845 "/usr/include/c++/4.0.0/limits" 3
static unsigned long round_error() throw()
# 846 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 848 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 849 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 850 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 851 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 853 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 854 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 855 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 856 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 857 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 859 "/usr/include/c++/4.0.0/limits" 3
static unsigned long infinity() throw()
# 860 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned long>(0); }
# 861 "/usr/include/c++/4.0.0/limits" 3
static unsigned long quiet_NaN() throw()
# 862 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned long>(0); }
# 863 "/usr/include/c++/4.0.0/limits" 3
static unsigned long signaling_NaN() throw()
# 864 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned long>(0); }
# 865 "/usr/include/c++/4.0.0/limits" 3
static unsigned long denorm_min() throw()
# 866 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned long>(0); }
# 868 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 869 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 870 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 872 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 873 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 874 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 875 "/usr/include/c++/4.0.0/limits" 3
};
# 879 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< long long> {
# 881 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 883 "/usr/include/c++/4.0.0/limits" 3
static long long min() throw()
# 884 "/usr/include/c++/4.0.0/limits" 3
{ return (-9223372036854775807LL) - (1); }
# 885 "/usr/include/c++/4.0.0/limits" 3
static long long max() throw()
# 886 "/usr/include/c++/4.0.0/limits" 3
{ return 9223372036854775807LL; }
# 888 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0)));
# 889 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643)) / (2136));
# 890 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = true;
# 891 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 892 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 893 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 894 "/usr/include/c++/4.0.0/limits" 3
static long long epsilon() throw()
# 895 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 896 "/usr/include/c++/4.0.0/limits" 3
static long long round_error() throw()
# 897 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 899 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 900 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 901 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 902 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 904 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 905 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 906 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 907 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 908 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 910 "/usr/include/c++/4.0.0/limits" 3
static long long infinity() throw()
# 911 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< long long>(0); }
# 912 "/usr/include/c++/4.0.0/limits" 3
static long long quiet_NaN() throw()
# 913 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< long long>(0); }
# 914 "/usr/include/c++/4.0.0/limits" 3
static long long signaling_NaN() throw()
# 915 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< long long>(0); }
# 916 "/usr/include/c++/4.0.0/limits" 3
static long long denorm_min() throw()
# 917 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< long long>(0); }
# 919 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 920 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 921 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 923 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 924 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 925 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 926 "/usr/include/c++/4.0.0/limits" 3
};
# 930 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< unsigned long long> {
# 932 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 934 "/usr/include/c++/4.0.0/limits" 3
static unsigned long long min() throw()
# 935 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 936 "/usr/include/c++/4.0.0/limits" 3
static unsigned long long max() throw()
# 937 "/usr/include/c++/4.0.0/limits" 3
{ return ((9223372036854775807LL) * 2ULL) + (1); }
# 939 "/usr/include/c++/4.0.0/limits" 3
static const int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0)));
# 940 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643)) / (2136));
# 941 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = false;
# 942 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = true;
# 943 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = true;
# 944 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 945 "/usr/include/c++/4.0.0/limits" 3
static unsigned long long epsilon() throw()
# 946 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 947 "/usr/include/c++/4.0.0/limits" 3
static unsigned long long round_error() throw()
# 948 "/usr/include/c++/4.0.0/limits" 3
{ return 0; }
# 950 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = 0;
# 951 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = 0;
# 952 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 0;
# 953 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 0;
# 955 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = false;
# 956 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = false;
# 957 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = false;
# 958 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 959 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 961 "/usr/include/c++/4.0.0/limits" 3
static unsigned long long infinity() throw()
# 962 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned long long>(0); }
# 963 "/usr/include/c++/4.0.0/limits" 3
static unsigned long long quiet_NaN() throw()
# 964 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned long long>(0); }
# 965 "/usr/include/c++/4.0.0/limits" 3
static unsigned long long signaling_NaN() throw()
# 966 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned long long>(0); }
# 967 "/usr/include/c++/4.0.0/limits" 3
static unsigned long long denorm_min() throw()
# 968 "/usr/include/c++/4.0.0/limits" 3
{ return static_cast< unsigned long long>(0); }
# 970 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = false;
# 971 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 972 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = true;
# 974 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = true;
# 975 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 976 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_toward_zero;
# 977 "/usr/include/c++/4.0.0/limits" 3
};
# 981 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< float> {
# 983 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 985 "/usr/include/c++/4.0.0/limits" 3
static float min() throw()
# 986 "/usr/include/c++/4.0.0/limits" 3
{ return (1.175494351e-38F); }
# 987 "/usr/include/c++/4.0.0/limits" 3
static float max() throw()
# 988 "/usr/include/c++/4.0.0/limits" 3
{ return (3.402823466e+38F); }
# 990 "/usr/include/c++/4.0.0/limits" 3
static const int digits = 24;
# 991 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = 6;
# 992 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = true;
# 993 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = false;
# 994 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = false;
# 995 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 996 "/usr/include/c++/4.0.0/limits" 3
static float epsilon() throw()
# 997 "/usr/include/c++/4.0.0/limits" 3
{ return (1.192092896e-07F); }
# 998 "/usr/include/c++/4.0.0/limits" 3
static float round_error() throw()
# 999 "/usr/include/c++/4.0.0/limits" 3
{ return (0.5F); }
# 1001 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = (-125);
# 1002 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = (-37);
# 1003 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 128;
# 1004 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 38;
# 1006 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = (1);
# 1007 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = (1);
# 1008 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1009 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1011 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 1013 "/usr/include/c++/4.0.0/limits" 3
static float infinity() throw()
# 1014 "/usr/include/c++/4.0.0/limits" 3
{ return __builtin_huge_valf(); }
# 1015 "/usr/include/c++/4.0.0/limits" 3
static float quiet_NaN() throw()
# 1016 "/usr/include/c++/4.0.0/limits" 3
{ return __builtin_nanf(""); }
# 1017 "/usr/include/c++/4.0.0/limits" 3
static float signaling_NaN() throw()
# 1018 "/usr/include/c++/4.0.0/limits" 3
{ return __builtin_nansf(""); }
# 1019 "/usr/include/c++/4.0.0/limits" 3
static float denorm_min() throw()
# 1020 "/usr/include/c++/4.0.0/limits" 3
{ return (1.401298464e-45F); }
# 1022 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1024 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 1025 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = false;
# 1027 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = false;
# 1028 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 1029 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1030 "/usr/include/c++/4.0.0/limits" 3
};
# 1038 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< double> {
# 1040 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 1042 "/usr/include/c++/4.0.0/limits" 3
static double min() throw()
# 1043 "/usr/include/c++/4.0.0/limits" 3
{ return (2.225073858507201383e-308); }
# 1044 "/usr/include/c++/4.0.0/limits" 3
static double max() throw()
# 1045 "/usr/include/c++/4.0.0/limits" 3
{ return (1.797693134862315708e+308); }
# 1047 "/usr/include/c++/4.0.0/limits" 3
static const int digits = 53;
# 1048 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = 15;
# 1049 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = true;
# 1050 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = false;
# 1051 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = false;
# 1052 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 1053 "/usr/include/c++/4.0.0/limits" 3
static double epsilon() throw()
# 1054 "/usr/include/c++/4.0.0/limits" 3
{ return (2.220446049250313081e-16); }
# 1055 "/usr/include/c++/4.0.0/limits" 3
static double round_error() throw()
# 1056 "/usr/include/c++/4.0.0/limits" 3
{ return (0.5); }
# 1058 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = (-1021);
# 1059 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = (-307);
# 1060 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 1024;
# 1061 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 308;
# 1063 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = (1);
# 1064 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = (1);
# 1065 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1066 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1068 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 1070 "/usr/include/c++/4.0.0/limits" 3
static double infinity() throw()
# 1071 "/usr/include/c++/4.0.0/limits" 3
{ return __builtin_huge_val(); }
# 1072 "/usr/include/c++/4.0.0/limits" 3
static double quiet_NaN() throw()
# 1073 "/usr/include/c++/4.0.0/limits" 3
{ return __builtin_nan(""); }
# 1074 "/usr/include/c++/4.0.0/limits" 3
static double signaling_NaN() throw()
# 1075 "/usr/include/c++/4.0.0/limits" 3
{ return __builtin_nans(""); }
# 1076 "/usr/include/c++/4.0.0/limits" 3
static double denorm_min() throw()
# 1077 "/usr/include/c++/4.0.0/limits" 3
{ return (4.940656458412465442e-324); }
# 1079 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1081 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 1082 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = false;
# 1084 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = false;
# 1085 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 1086 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1087 "/usr/include/c++/4.0.0/limits" 3
};
# 1095 "/usr/include/c++/4.0.0/limits" 3
template<> struct numeric_limits< long double> {
# 1097 "/usr/include/c++/4.0.0/limits" 3
static const bool is_specialized = true;
# 1099 "/usr/include/c++/4.0.0/limits" 3
static long double min() throw()
# 1100 "/usr/include/c++/4.0.0/limits" 3
{ return (3.3621031431120935063e-4932L); }
# 1101 "/usr/include/c++/4.0.0/limits" 3
static long double max() throw()
# 1102 "/usr/include/c++/4.0.0/limits" 3
{ return (1.189731495357231765e+4932L); }
# 1104 "/usr/include/c++/4.0.0/limits" 3
static const int digits = 64;
# 1105 "/usr/include/c++/4.0.0/limits" 3
static const int digits10 = 18;
# 1106 "/usr/include/c++/4.0.0/limits" 3
static const bool is_signed = true;
# 1107 "/usr/include/c++/4.0.0/limits" 3
static const bool is_integer = false;
# 1108 "/usr/include/c++/4.0.0/limits" 3
static const bool is_exact = false;
# 1109 "/usr/include/c++/4.0.0/limits" 3
static const int radix = 2;
# 1110 "/usr/include/c++/4.0.0/limits" 3
static long double epsilon() throw()
# 1111 "/usr/include/c++/4.0.0/limits" 3
{ return (1.084202172485504434e-19L); }
# 1112 "/usr/include/c++/4.0.0/limits" 3
static long double round_error() throw()
# 1113 "/usr/include/c++/4.0.0/limits" 3
{ return (0.5L); }
# 1115 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent = (-16381);
# 1116 "/usr/include/c++/4.0.0/limits" 3
static const int min_exponent10 = (-4931);
# 1117 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent = 16384;
# 1118 "/usr/include/c++/4.0.0/limits" 3
static const int max_exponent10 = 4932;
# 1120 "/usr/include/c++/4.0.0/limits" 3
static const bool has_infinity = (1);
# 1121 "/usr/include/c++/4.0.0/limits" 3
static const bool has_quiet_NaN = (1);
# 1122 "/usr/include/c++/4.0.0/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1123 "/usr/include/c++/4.0.0/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1125 "/usr/include/c++/4.0.0/limits" 3
static const bool has_denorm_loss = false;
# 1128 "/usr/include/c++/4.0.0/limits" 3
static long double infinity() throw()
# 1129 "/usr/include/c++/4.0.0/limits" 3
{ return __builtin_huge_vall(); }
# 1130 "/usr/include/c++/4.0.0/limits" 3
static long double quiet_NaN() throw()
# 1131 "/usr/include/c++/4.0.0/limits" 3
{ return __builtin_nanl(""); }
# 1132 "/usr/include/c++/4.0.0/limits" 3
static long double signaling_NaN() throw()
# 1133 "/usr/include/c++/4.0.0/limits" 3
{ return __builtin_nansl(""); }
# 1134 "/usr/include/c++/4.0.0/limits" 3
static long double denorm_min() throw()
# 1135 "/usr/include/c++/4.0.0/limits" 3
{ return (3.6451995318824746025e-4951L); }
# 1137 "/usr/include/c++/4.0.0/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1139 "/usr/include/c++/4.0.0/limits" 3
static const bool is_bounded = true;
# 1140 "/usr/include/c++/4.0.0/limits" 3
static const bool is_modulo = false;
# 1142 "/usr/include/c++/4.0.0/limits" 3
static const bool traps = false;
# 1143 "/usr/include/c++/4.0.0/limits" 3
static const bool tinyness_before = false;
# 1144 "/usr/include/c++/4.0.0/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1145 "/usr/include/c++/4.0.0/limits" 3
};
# 1151 "/usr/include/c++/4.0.0/limits" 3
}
# 62 "/usr/include/c++/4.0.0/memory" 3
namespace std {
# 72 "/usr/include/c++/4.0.0/memory" 3
template<class _Tp> pair< _Tp *, int>
# 74 "/usr/include/c++/4.0.0/memory" 3
__get_temporary_buffer(ptrdiff_t __len, _Tp *)
# 75 "/usr/include/c++/4.0.0/memory" 3
{
# 76 "/usr/include/c++/4.0.0/memory" 3
auto const ptrdiff_t __max = (numeric_limits< int> ::max() / sizeof(_Tp));
# 77 "/usr/include/c++/4.0.0/memory" 3
if (__len > __max) {
# 78 "/usr/include/c++/4.0.0/memory" 3
__len = __max; }
# 80 "/usr/include/c++/4.0.0/memory" 3
while (__len > 0)
# 81 "/usr/include/c++/4.0.0/memory" 3
{
# 82 "/usr/include/c++/4.0.0/memory" 3
auto _Tp *__tmp = (static_cast< _Tp *>(::operator new(__len * sizeof(_Tp), nothrow)));
# 84 "/usr/include/c++/4.0.0/memory" 3
if (__tmp != 0) {
# 85 "/usr/include/c++/4.0.0/memory" 3
return pair< _Tp *, int> (__tmp, __len); }
# 86 "/usr/include/c++/4.0.0/memory" 3
__len /= 2;
# 87 "/usr/include/c++/4.0.0/memory" 3
}
# 88 "/usr/include/c++/4.0.0/memory" 3
return pair< _Tp *, int> ((_Tp *)0, 0);
# 89 "/usr/include/c++/4.0.0/memory" 3
}
# 108 "/usr/include/c++/4.0.0/memory" 3
template<class _Tp> inline pair< _Tp *, int>
# 110 "/usr/include/c++/4.0.0/memory" 3
get_temporary_buffer(ptrdiff_t __len)
# 111 "/usr/include/c++/4.0.0/memory" 3
{ return std::__get_temporary_buffer(__len, (_Tp *)0); }
# 120 "/usr/include/c++/4.0.0/memory" 3
template<class _Tp> void
# 122 "/usr/include/c++/4.0.0/memory" 3
return_temporary_buffer(_Tp *__p)
# 123 "/usr/include/c++/4.0.0/memory" 3
{ ::operator delete(__p, nothrow); }
# 132 "/usr/include/c++/4.0.0/memory" 3
template<class _Tp1>
# 133 "/usr/include/c++/4.0.0/memory" 3
struct auto_ptr_ref {
# 135 "/usr/include/c++/4.0.0/memory" 3
_Tp1 *_M_ptr;
# 138 "/usr/include/c++/4.0.0/memory" 3
explicit auto_ptr_ref(_Tp1 *__p) : _M_ptr(__p) { }
# 139 "/usr/include/c++/4.0.0/memory" 3
};
# 173 "/usr/include/c++/4.0.0/memory" 3
template<class _Tp>
# 174 "/usr/include/c++/4.0.0/memory" 3
class auto_ptr {
# 177 "/usr/include/c++/4.0.0/memory" 3
_Tp *_M_ptr;
# 181 "/usr/include/c++/4.0.0/memory" 3
public: typedef _Tp element_type;
# 190 "/usr/include/c++/4.0.0/memory" 3
explicit auto_ptr(element_type *__p = (0)) throw() : _M_ptr(__p) { }
# 199 "/usr/include/c++/4.0.0/memory" 3
auto_ptr(std::auto_ptr< _Tp> &__a) throw() : _M_ptr(__a.release()) { }
# 211 "/usr/include/c++/4.0.0/memory" 3
template<class _Tp1>
# 212 "/usr/include/c++/4.0.0/memory" 3
auto_ptr(std::auto_ptr< _Tp1> &__a) throw() : _M_ptr(((__a.release()))) { }
# 223 "/usr/include/c++/4.0.0/memory" 3
std::auto_ptr< _Tp> &operator=(std::auto_ptr< _Tp> &__a) throw()
# 224 "/usr/include/c++/4.0.0/memory" 3
{
# 225 "/usr/include/c++/4.0.0/memory" 3
this->reset(__a.release());
# 226 "/usr/include/c++/4.0.0/memory" 3
return *this;
# 227 "/usr/include/c++/4.0.0/memory" 3
}
# 239 "/usr/include/c++/4.0.0/memory" 3
template<class _Tp1> std::auto_ptr< _Tp> &
# 240 "/usr/include/c++/4.0.0/memory" 3
operator=(std::auto_ptr< _Tp1> &
# 241 "/usr/include/c++/4.0.0/memory" 3
__a) throw()
# 242 "/usr/include/c++/4.0.0/memory" 3
{
# 243 "/usr/include/c++/4.0.0/memory" 3
this->reset((__a.release()));
# 244 "/usr/include/c++/4.0.0/memory" 3
return *this;
# 245 "/usr/include/c++/4.0.0/memory" 3
}
# 259 "/usr/include/c++/4.0.0/memory" 3
~auto_ptr() { delete (this->_M_ptr); }
# 270 "/usr/include/c++/4.0.0/memory" 3
element_type &operator*() const throw()
# 271 "/usr/include/c++/4.0.0/memory" 3
{
# 272 "/usr/include/c++/4.0.0/memory" 3
;
# 273 "/usr/include/c++/4.0.0/memory" 3
return *(this->_M_ptr);
# 274 "/usr/include/c++/4.0.0/memory" 3
}
# 283 "/usr/include/c++/4.0.0/memory" 3
element_type *operator->() const throw()
# 284 "/usr/include/c++/4.0.0/memory" 3
{
# 285 "/usr/include/c++/4.0.0/memory" 3
;
# 286 "/usr/include/c++/4.0.0/memory" 3
return this->_M_ptr;
# 287 "/usr/include/c++/4.0.0/memory" 3
}
# 300 "/usr/include/c++/4.0.0/memory" 3
element_type *get() const throw() { return this->_M_ptr; }
# 314 "/usr/include/c++/4.0.0/memory" 3
element_type *release() throw()
# 315 "/usr/include/c++/4.0.0/memory" 3
{
# 316 "/usr/include/c++/4.0.0/memory" 3
auto element_type *__tmp = (this->_M_ptr);
# 317 "/usr/include/c++/4.0.0/memory" 3
(this->_M_ptr) = 0;
# 318 "/usr/include/c++/4.0.0/memory" 3
return __tmp;
# 319 "/usr/include/c++/4.0.0/memory" 3
}
# 329 "/usr/include/c++/4.0.0/memory" 3
void reset(element_type *__p = (0)) throw()
# 330 "/usr/include/c++/4.0.0/memory" 3
{
# 331 "/usr/include/c++/4.0.0/memory" 3
if (__p != (this->_M_ptr))
# 332 "/usr/include/c++/4.0.0/memory" 3
{
# 333 "/usr/include/c++/4.0.0/memory" 3
delete (this->_M_ptr);
# 334 "/usr/include/c++/4.0.0/memory" 3
(this->_M_ptr) = __p;
# 335 "/usr/include/c++/4.0.0/memory" 3
}
# 336 "/usr/include/c++/4.0.0/memory" 3
}
# 349 "/usr/include/c++/4.0.0/memory" 3
auto_ptr(auto_ptr_ref< _Tp> __ref) throw() : _M_ptr((__ref._M_ptr))
# 350 "/usr/include/c++/4.0.0/memory" 3
{ }
# 353 "/usr/include/c++/4.0.0/memory" 3
std::auto_ptr< _Tp> &operator=(auto_ptr_ref< _Tp> __ref) throw()
# 354 "/usr/include/c++/4.0.0/memory" 3
{
# 355 "/usr/include/c++/4.0.0/memory" 3
if ((__ref._M_ptr) != this->get())
# 356 "/usr/include/c++/4.0.0/memory" 3
{
# 357 "/usr/include/c++/4.0.0/memory" 3
delete (this->_M_ptr);
# 358 "/usr/include/c++/4.0.0/memory" 3
(this->_M_ptr) = (__ref._M_ptr);
# 359 "/usr/include/c++/4.0.0/memory" 3
}
# 360 "/usr/include/c++/4.0.0/memory" 3
return *this;
# 361 "/usr/include/c++/4.0.0/memory" 3
}
# 363 "/usr/include/c++/4.0.0/memory" 3
template<class _Tp1>
# 364 "/usr/include/c++/4.0.0/memory" 3
operator auto_ptr_ref< _Tp1> () throw()
# 365 "/usr/include/c++/4.0.0/memory" 3
{ return ((auto_ptr_ref< _Tp1> )(this->release())); }
# 367 "/usr/include/c++/4.0.0/memory" 3
template<class _Tp1>
# 368 "/usr/include/c++/4.0.0/memory" 3
operator std::auto_ptr< _Tp1> () throw()
# 369 "/usr/include/c++/4.0.0/memory" 3
{ return ((std::auto_ptr< _Tp1> )(this->release())); }
# 370 "/usr/include/c++/4.0.0/memory" 3
};
# 371 "/usr/include/c++/4.0.0/memory" 3
}
# 64 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
namespace std {
# 101 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Arg, class _Result>
# 102 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct unary_function {
# 104 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typedef _Arg argument_type;
# 107 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typedef _Result result_type;
# 108 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 113 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Arg1, class _Arg2, class _Result>
# 114 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct binary_function {
# 116 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typedef _Arg1 first_argument_type;
# 119 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typedef _Arg2 second_argument_type;
# 120 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typedef _Result result_type;
# 121 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 133 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 134 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct plus : public binary_function< _Tp, _Tp, _Tp> {
# 137 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Tp operator()(const _Tp &__x, const _Tp &__y) const
# 138 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x + __y; }
# 139 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 142 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 143 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct minus : public binary_function< _Tp, _Tp, _Tp> {
# 146 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Tp operator()(const _Tp &__x, const _Tp &__y) const
# 147 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x - __y; }
# 148 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 151 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 152 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct multiplies : public binary_function< _Tp, _Tp, _Tp> {
# 155 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Tp operator()(const _Tp &__x, const _Tp &__y) const
# 156 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x * __y; }
# 157 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 160 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 161 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct divides : public binary_function< _Tp, _Tp, _Tp> {
# 164 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Tp operator()(const _Tp &__x, const _Tp &__y) const
# 165 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x / __y; }
# 166 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 169 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 170 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct modulus : public binary_function< _Tp, _Tp, _Tp> {
# 173 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Tp operator()(const _Tp &__x, const _Tp &__y) const
# 174 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x % __y; }
# 175 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 178 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 179 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct negate : public unary_function< _Tp, _Tp> {
# 182 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Tp operator()(const _Tp &__x) const
# 183 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return -__x; }
# 184 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 195 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 196 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct equal_to : public binary_function< _Tp, _Tp, bool> {
# 199 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const
# 200 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x == __y; }
# 201 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 204 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 205 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct not_equal_to : public binary_function< _Tp, _Tp, bool> {
# 208 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const
# 209 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x != __y; }
# 210 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 213 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 214 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct greater : public binary_function< _Tp, _Tp, bool> {
# 217 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const
# 218 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x > __y; }
# 219 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 222 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 223 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct less : public binary_function< _Tp, _Tp, bool> {
# 226 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const
# 227 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x < __y; }
# 228 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 231 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 232 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct greater_equal : public binary_function< _Tp, _Tp, bool> {
# 235 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const
# 236 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x >= __y; }
# 237 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 240 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 241 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct less_equal : public binary_function< _Tp, _Tp, bool> {
# 244 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const
# 245 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x <= __y; }
# 246 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 256 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 257 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct logical_and : public binary_function< _Tp, _Tp, bool> {
# 260 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const
# 261 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__x) && __y; }
# 262 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 265 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 266 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct logical_or : public binary_function< _Tp, _Tp, bool> {
# 269 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const _Tp &__x, const _Tp &__y) const
# 270 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__x) || __y; }
# 271 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 274 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 275 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct logical_not : public unary_function< _Tp, bool> {
# 278 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const _Tp &__x) const
# 279 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return !__x; }
# 280 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 311 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Predicate>
# 312 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class unary_negate : public unary_function< typename _Predicate::argument_type, bool> {
# 316 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
protected: _Predicate _M_pred;
# 319 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { }
# 322 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const typename _Predicate::argument_type &__x) const
# 323 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return !((this->_M_pred)(__x)); }
# 324 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 327 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Predicate> inline unary_negate< _Predicate>
# 329 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
not1(const _Predicate &__pred)
# 330 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((unary_negate< _Predicate> )(__pred)); }
# 333 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Predicate>
# 334 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool> {
# 340 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
protected: _Predicate _M_pred;
# 343 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit binary_negate(const _Predicate &__x) : _M_pred(__x)
# 344 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 347 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 348 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
__y) const
# 349 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return !((this->_M_pred)(__x, __y)); }
# 350 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 353 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Predicate> inline binary_negate< _Predicate>
# 355 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
not2(const _Predicate &__pred)
# 356 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((binary_negate< _Predicate> )(__pred)); }
# 391 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Operation>
# 392 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type> {
# 397 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
protected: _Operation op;
# 398 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typename _Operation::first_argument_type value;
# 400 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 401 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
__y) : op(__x), value(__y)
# 402 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 405 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const
# 406 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (this->op)(this->value, __x); }
# 411 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const
# 412 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (this->op)(this->value, __x); }
# 413 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 416 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Operation, class _Tp> inline binder1st< _Operation>
# 418 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bind1st(const _Operation &__fn, const _Tp &__x)
# 419 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{
# 420 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typedef typename _Operation::first_argument_type _Arg1_type;
# 421 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
return binder1st< _Operation> (__fn, ((_Arg1_type)(__x)));
# 422 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
}
# 425 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Operation>
# 426 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type> {
# 431 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
protected: _Operation op;
# 432 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typename _Operation::second_argument_type value;
# 434 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 435 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
__y) : op(__x), value(__y)
# 436 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 439 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const
# 440 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (this->op)(__x, this->value); }
# 445 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const
# 446 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (this->op)(__x, this->value); }
# 447 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 450 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Operation, class _Tp> inline binder2nd< _Operation>
# 452 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
bind2nd(const _Operation &__fn, const _Tp &__x)
# 453 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{
# 454 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typedef typename _Operation::second_argument_type _Arg2_type;
# 455 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
return binder2nd< _Operation> (__fn, ((_Arg2_type)(__x)));
# 456 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
}
# 480 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Arg, class _Result>
# 481 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class pointer_to_unary_function : public unary_function< _Arg, _Result> {
# 484 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
protected: _Result (*_M_ptr)(_Arg);
# 486 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: pointer_to_unary_function() { }
# 489 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x)
# 490 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 493 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Result operator()(_Arg __x) const
# 494 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (this->_M_ptr)(__x); }
# 495 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 498 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Arg, class _Result> inline pointer_to_unary_function< _Arg, _Result>
# 500 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
ptr_fun(_Result (*__x)(_Arg))
# 501 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); }
# 504 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Arg1, class _Arg2, class _Result>
# 505 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result> {
# 509 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
protected: _Result (*_M_ptr)(_Arg1, _Arg2);
# 511 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: pointer_to_binary_function() { }
# 514 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x)
# 515 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 518 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Result operator()(_Arg1 __x, _Arg2 __y) const
# 519 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (this->_M_ptr)(__x, __y); }
# 520 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 523 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Arg1, class _Arg2, class _Result> inline pointer_to_binary_function< _Arg1, _Arg2, _Result>
# 525 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
ptr_fun(_Result (*__x)(_Arg1, _Arg2))
# 526 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); }
# 529 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 530 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct _Identity : public unary_function< _Tp, _Tp> {
# 533 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Tp &operator()(_Tp &__x) const
# 534 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x; }
# 537 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
const _Tp &operator()(const _Tp &__x) const
# 538 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x; }
# 539 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 541 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Pair>
# 542 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type> {
# 546 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typename _Pair::first_type &operator()(_Pair &__x) const
# 547 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x.first; }
# 550 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
const typename _Pair::first_type &operator()(const _Pair &__x) const
# 551 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x.first; }
# 552 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 554 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Pair>
# 555 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type> {
# 559 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
typename _Pair::second_type &operator()(_Pair &__x) const
# 560 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x.second; }
# 563 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
const typename _Pair::second_type &operator()(const _Pair &__x) const
# 564 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return __x.second; }
# 565 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 590 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp>
# 591 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class mem_fun_t : public unary_function< _Tp *, _Ret> {
# 595 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf)
# 596 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 599 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Ret operator()(_Tp *__p) const
# 600 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__p ->* (this->_M_f))(); }
# 602 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: _Ret (_Tp::*_M_f)(void);
# 603 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 606 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp>
# 607 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class const_mem_fun_t : public unary_function< const _Tp *, _Ret> {
# 611 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf)
# 612 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 615 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Ret operator()(const _Tp *__p) const
# 616 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__p ->* (this->_M_f))(); }
# 618 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: _Ret (_Tp::*_M_f)(void) const;
# 619 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 622 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp>
# 623 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class mem_fun_ref_t : public unary_function< _Tp, _Ret> {
# 627 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf)
# 628 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 631 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Ret operator()(_Tp &__r) const
# 632 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__r .* (this->_M_f))(); }
# 634 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: _Ret (_Tp::*_M_f)(void);
# 635 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 638 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp>
# 639 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret> {
# 643 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf)
# 644 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 647 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Ret operator()(const _Tp &__r) const
# 648 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__r .* (this->_M_f))(); }
# 650 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: _Ret (_Tp::*_M_f)(void) const;
# 651 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 654 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp, class _Arg>
# 655 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret> {
# 659 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf)
# 660 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 663 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Ret operator()(_Tp *__p, _Arg __x) const
# 664 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__p ->* (this->_M_f))(__x); }
# 666 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: _Ret (_Tp::*_M_f)(_Arg);
# 667 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 670 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp, class _Arg>
# 671 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret> {
# 675 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf)
# 676 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 679 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Ret operator()(const _Tp *__p, _Arg __x) const
# 680 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__p ->* (this->_M_f))(__x); }
# 682 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: _Ret (_Tp::*_M_f)(_Arg) const;
# 683 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 686 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp, class _Arg>
# 687 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret> {
# 691 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf)
# 692 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 695 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Ret operator()(_Tp &__r, _Arg __x) const
# 696 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__r .* (this->_M_f))(__x); }
# 698 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: _Ret (_Tp::*_M_f)(_Arg);
# 699 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 702 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp, class _Arg>
# 703 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret> {
# 707 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf)
# 708 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 711 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
_Ret operator()(const _Tp &__r, _Arg __x) const
# 712 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return (__r .* (this->_M_f))(__x); }
# 714 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: _Ret (_Tp::*_M_f)(_Arg) const;
# 715 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 718 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 719 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class mem_fun_t< void, _Tp> : public unary_function< _Tp *, void> {
# 723 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit mem_fun_t(void (_Tp::*__pf)(void)) : _M_f(__pf)
# 724 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 727 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
void operator()(_Tp *__p) const
# 728 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ (__p ->* (this->_M_f))(); }
# 730 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: void (_Tp::*_M_f)(void);
# 731 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 734 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 735 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class const_mem_fun_t< void, _Tp> : public unary_function< const _Tp *, void> {
# 739 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit const_mem_fun_t(void (_Tp::*__pf)(void) const) : _M_f(__pf)
# 740 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 743 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
void operator()(const _Tp *__p) const
# 744 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ (__p ->* (this->_M_f))(); }
# 746 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: void (_Tp::*_M_f)(void) const;
# 747 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 750 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 751 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class mem_fun_ref_t< void, _Tp> : public unary_function< _Tp, void> {
# 755 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit mem_fun_ref_t(void (_Tp::*__pf)(void)) : _M_f(__pf)
# 756 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 759 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
void operator()(_Tp &__r) const
# 760 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ (__r .* (this->_M_f))(); }
# 762 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: void (_Tp::*_M_f)(void);
# 763 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 766 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp>
# 767 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class const_mem_fun_ref_t< void, _Tp> : public unary_function< _Tp, void> {
# 771 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit const_mem_fun_ref_t(void (_Tp::*__pf)(void) const) : _M_f(__pf)
# 772 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 775 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
void operator()(const _Tp &__r) const
# 776 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ (__r .* (this->_M_f))(); }
# 778 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: void (_Tp::*_M_f)(void) const;
# 779 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 782 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp, class _Arg>
# 783 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class mem_fun1_t< void, _Tp, _Arg> : public binary_function< _Tp *, _Arg, void> {
# 787 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit mem_fun1_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf)
# 788 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 791 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
void operator()(_Tp *__p, _Arg __x) const
# 792 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ (__p ->* (this->_M_f))(__x); }
# 794 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: void (_Tp::*_M_f)(_Arg);
# 795 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 798 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp, class _Arg>
# 799 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class const_mem_fun1_t< void, _Tp, _Arg> : public binary_function< const _Tp *, _Arg, void> {
# 804 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf)
# 805 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 808 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
void operator()(const _Tp *__p, _Arg __x) const
# 809 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ (__p ->* (this->_M_f))(__x); }
# 811 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: void (_Tp::*_M_f)(_Arg) const;
# 812 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 815 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp, class _Arg>
# 816 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class mem_fun1_ref_t< void, _Tp, _Arg> : public binary_function< _Tp, _Arg, void> {
# 821 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit mem_fun1_ref_t(void (_Tp::*__pf)(_Arg)) : _M_f(__pf)
# 822 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 825 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
void operator()(_Tp &__r, _Arg __x) const
# 826 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ (__r .* (this->_M_f))(__x); }
# 828 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: void (_Tp::*_M_f)(_Arg);
# 829 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 832 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Tp, class _Arg>
# 833 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
class const_mem_fun1_ref_t< void, _Tp, _Arg> : public binary_function< _Tp, _Arg, void> {
# 838 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
public: explicit const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const) : _M_f(__pf)
# 839 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ }
# 842 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
void operator()(const _Tp &__r, _Arg __x) const
# 843 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ (__r .* (this->_M_f))(__x); }
# 845 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
private: void (_Tp::*_M_f)(_Arg) const;
# 846 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
};
# 850 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp> inline mem_fun_t< _Ret, _Tp>
# 852 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
mem_fun(_Ret (_Tp::*__f)(void))
# 853 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); }
# 855 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp> inline const_mem_fun_t< _Ret, _Tp>
# 857 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
mem_fun(_Ret (_Tp::*__f)(void) const)
# 858 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); }
# 860 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp> inline mem_fun_ref_t< _Ret, _Tp>
# 862 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
mem_fun_ref(_Ret (_Tp::*__f)(void))
# 863 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); }
# 865 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp> inline const_mem_fun_ref_t< _Ret, _Tp>
# 867 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
mem_fun_ref(_Ret (_Tp::*__f)(void) const)
# 868 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); }
# 870 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp, class _Arg> inline mem_fun1_t< _Ret, _Tp, _Arg>
# 872 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
mem_fun(_Ret (_Tp::*__f)(_Arg))
# 873 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); }
# 875 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp, class _Arg> inline const_mem_fun1_t< _Ret, _Tp, _Arg>
# 877 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
mem_fun(_Ret (_Tp::*__f)(_Arg) const)
# 878 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); }
# 880 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp, class _Arg> inline mem_fun1_ref_t< _Ret, _Tp, _Arg>
# 882 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
# 883 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); }
# 885 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
template<class _Ret, class _Tp, class _Arg> inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>
# 887 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
# 888 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); }
# 892 "/usr/include/c++/4.0.0/bits/stl_function.h" 3
}
# 48 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
namespace std {
# 109 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc>
# 110 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
class basic_string {
# 114 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
public: typedef _Traits traits_type;
# 115 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename _Traits::char_type value_type;
# 116 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef _Alloc allocator_type;
# 117 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename _Alloc::size_type size_type;
# 118 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename _Alloc::difference_type difference_type;
# 119 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename _Alloc::reference reference;
# 120 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename _Alloc::const_reference const_reference;
# 121 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename _Alloc::pointer pointer;
# 122 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename _Alloc::const_pointer const_pointer;
# 123 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef __gnu_cxx::__normal_iterator< typename _Alloc::pointer, std::basic_string< _CharT, _Traits, _Alloc> > iterator;
# 125 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef __gnu_cxx::__normal_iterator< typename _Alloc::const_pointer, std::basic_string< _CharT, _Traits, _Alloc> > const_iterator;
# 126 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename _Alloc::const_pointer, std::basic_string< _CharT, _Traits, _Alloc> > > const_reverse_iterator;
# 127 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename _Alloc::pointer, std::basic_string< _CharT, _Traits, _Alloc> > > reverse_iterator;
# 144 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
private: struct _Rep_base {
# 146 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type _M_length;
# 147 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type _M_capacity;
# 148 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Atomic_word _M_refcount;
# 149 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
};
# 151 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
struct _Rep : public _Rep_base {
# 154 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename _Alloc::template rebind< char> ::other _Raw_bytes_alloc;
# 169 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static const size_type _S_max_size;
# 170 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static const _CharT _S_terminal;
# 174 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static size_type _S_empty_rep_storage[];
# 177 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static _Rep &_S_empty_rep()
# 178 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return *(reinterpret_cast< _Rep *>(&_S_empty_rep_storage)); }
# 181 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
bool _M_is_leaked() const
# 182 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return this->_M_refcount < 0; }
# 185 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
bool _M_is_shared() const
# 186 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return this->_M_refcount > 0; }
# 189 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void _M_set_leaked()
# 190 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ (this->_M_refcount) = (-1); }
# 193 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void _M_set_sharable()
# 194 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ (this->_M_refcount) = (0); }
# 197 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void _M_set_length_and_sharable(size_type __n)
# 198 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 199 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_set_sharable();
# 200 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(this->_M_length) = __n;
# 201 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(this->_M_refdata()[__n]) = _S_terminal;
# 203 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 206 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_CharT *_M_refdata() throw()
# 207 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return reinterpret_cast< _CharT *>(this + 1); }
# 210 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_CharT *_M_grab(const _Alloc &__alloc1, const _Alloc &__alloc2)
# 211 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 212 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return ((!this->_M_is_leaked()) && (__alloc1 == __alloc2)) ? this->_M_refcopy() : this->_M_clone(__alloc1);
# 214 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 218 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static _Rep *_S_create(size_type, size_type, const _Alloc &);
# 221 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void _M_dispose(const _Alloc &__a)
# 222 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 224 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (__builtin_expect(this != &(_S_empty_rep()), false)) {
# 226 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (__gnu_cxx::__exchange_and_add(&(this->_M_refcount), -1) <= 0) {
# 227 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_destroy(__a); } }
# 228 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 231 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void _M_destroy(const _Alloc &) throw();
# 234 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_CharT *_M_refcopy() throw()
# 235 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 237 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (__builtin_expect(this != &(_S_empty_rep()), false)) {
# 239 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__gnu_cxx::__atomic_add(&(this->_M_refcount), 1); }
# 240 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return this->_M_refdata();
# 241 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 244 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_CharT *_M_clone(const _Alloc &, size_type = 0);
# 245 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
};
# 248 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
struct _Alloc_hider : public _Alloc {
# 250 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Alloc_hider(_CharT *__dat, const _Alloc &__a) : _Alloc(__a), _M_p(__dat)
# 251 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ }
# 253 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_CharT *_M_p;
# 254 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
};
# 261 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
public: static const size_type npos = ((size_type)(-1));
# 265 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
private: mutable _Alloc_hider _M_dataplus;
# 268 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_CharT *_M_data() const
# 269 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->_M_dataplus)._M_p; }
# 272 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_CharT *_M_data(_CharT *__p)
# 273 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return ((this->_M_dataplus)._M_p) = __p; }
# 276 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Rep *_M_rep() const
# 277 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return &((reinterpret_cast< _Rep *>(_M_data()))[-1]); }
# 282 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
iterator _M_ibegin() const
# 283 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return ((iterator)(_M_data())); }
# 286 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
iterator _M_iend() const
# 287 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return ((iterator)(_M_data() + this->size())); }
# 290 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void _M_leak()
# 291 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 292 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (!(*this->_M_rep())._M_is_leaked()) {
# 293 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_leak_hard(); }
# 294 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 297 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type _M_check(size_type __pos, const char *__s) const
# 298 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 299 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (__pos > this->size()) {
# 300 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__throw_out_of_range(__s); }
# 301 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return __pos;
# 302 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 305 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void _M_check_length(size_type __n1, size_type __n2, const char *__s) const
# 306 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 307 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (this->max_size() - (this->size() - __n1) < __n2) {
# 308 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__throw_length_error(__s); }
# 309 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 313 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type _M_limit(size_type __pos, size_type __off) const
# 314 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 315 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto const bool __testoff = (__off < this->size() - __pos);
# 316 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return __testoff ? __off : (this->size() - __pos);
# 317 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 321 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
bool _M_disjunct(const _CharT *__s) const
# 322 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 323 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (less< const _CharT *> ()(__s, _M_data())) || (less< const _CharT *> ()(_M_data() + this->size(), __s));
# 325 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 330 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static void _M_copy(_CharT *__d, const _CharT *__s, size_type __n)
# 331 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 332 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (__n == 1) {
# 333 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Traits::assign(*__d, *__s); } else {
# 335 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Traits::copy(__d, __s, __n); }
# 336 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 339 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static void _M_move(_CharT *__d, const _CharT *__s, size_type __n)
# 340 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 341 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (__n == 1) {
# 342 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Traits::assign(*__d, *__s); } else {
# 344 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Traits::move(__d, __s, __n); }
# 345 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 348 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static void _M_assign(_CharT *__d, size_type __n, _CharT __c)
# 349 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 350 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (__n == 1) {
# 351 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Traits::assign(*__d, __c); } else {
# 353 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Traits::assign(__d, __n, __c); }
# 354 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 358 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _Iterator> static void
# 359 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_S_copy_chars(_CharT *
# 360 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__p, _Iterator __k1, _Iterator __k2)
# 361 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 362 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
for (; __k1 != __k2; (++__k1), (++__p)) {
# 363 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Traits::assign(*__p, *__k1); }
# 364 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 367 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2)
# 368 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ _S_copy_chars(__p, (__k1.base()), (__k2.base())); }
# 371 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2)
# 372 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ _S_copy_chars(__p, (__k1.base()), (__k2.base())); }
# 375 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2)
# 376 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ _M_copy(__p, __k1, __k2 - __k1); }
# 379 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2)
# 380 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ _M_copy(__p, __k1, __k2 - __k1); }
# 383 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void _M_mutate(size_type, size_type, size_type);
# 386 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void _M_leak_hard();
# 389 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static _Rep &_S_empty_rep()
# 390 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return _Rep::_S_empty_rep(); }
# 401 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
public: inline basic_string();
# 407 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
explicit basic_string(const _Alloc &);
# 414 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
basic_string(const std::basic_string< _CharT, _Traits, _Alloc> &);
# 421 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
basic_string(const std::basic_string< _CharT, _Traits, _Alloc> &, size_type, size_type = npos);
# 430 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
basic_string(const std::basic_string< _CharT, _Traits, _Alloc> &, size_type, size_type, const _Alloc &);
# 442 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
basic_string(const _CharT *, size_type, const _Alloc & = _Alloc());
# 449 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
basic_string(const _CharT *, const _Alloc & = _Alloc());
# 456 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
basic_string(size_type, _CharT, const _Alloc & = _Alloc());
# 464 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InputIterator> basic_string(_InputIterator, _InputIterator, const _Alloc & = _Alloc());
# 471 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
~basic_string()
# 472 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ (*this->_M_rep())._M_dispose(this->get_allocator()); }
# 479 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &operator=(const std::basic_string< _CharT, _Traits, _Alloc> &__str)
# 480 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->assign(__str)); }
# 487 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &operator=(const _CharT *__s)
# 488 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->assign(__s)); }
# 498 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &operator=(_CharT __c)
# 499 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 500 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(this->assign(1, __c));
# 501 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return *this;
# 502 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 510 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
iterator begin()
# 511 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 512 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_leak();
# 513 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return ((iterator)(_M_data()));
# 514 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 521 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
const_iterator begin() const
# 522 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return ((const_iterator)(_M_data())); }
# 529 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
iterator end()
# 530 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 531 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_leak();
# 532 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return ((iterator)(_M_data() + this->size()));
# 533 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 540 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
const_iterator end() const
# 541 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return ((const_iterator)(_M_data() + this->size())); }
# 549 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
reverse_iterator rbegin()
# 550 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return ((reverse_iterator)(this->end())); }
# 558 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
const_reverse_iterator rbegin() const
# 559 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return ((const_reverse_iterator)(this->end())); }
# 567 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
reverse_iterator rend()
# 568 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return ((reverse_iterator)(this->begin())); }
# 576 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
const_reverse_iterator rend() const
# 577 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return ((const_reverse_iterator)(this->begin())); }
# 584 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type size() const
# 585 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (*this->_M_rep())._M_length; }
# 590 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type length() const
# 591 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (*this->_M_rep())._M_length; }
# 595 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type max_size() const
# 596 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return _Rep::_S_max_size; }
# 609 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void resize(size_type, _CharT);
# 622 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void resize(size_type __n)
# 623 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ (this->resize(__n, _CharT())); }
# 630 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type capacity() const
# 631 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (*this->_M_rep())._M_capacity; }
# 651 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void reserve(size_type = 0);
# 657 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void clear()
# 658 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ this->_M_mutate(0, this->size(), 0); }
# 664 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
bool empty() const
# 665 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return this->size() == 0; }
# 679 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
const_reference operator[](size_type __pos) const
# 680 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 681 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 682 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (_M_data())[__pos];
# 683 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 696 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
reference operator[](size_type __pos)
# 697 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 698 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 699 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_leak();
# 700 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (_M_data())[__pos];
# 701 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 714 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
const_reference at(size_type __n) const
# 715 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 716 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (__n >= this->size()) {
# 717 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__throw_out_of_range("basic_string::at"); }
# 718 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (_M_data())[__n];
# 719 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 733 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
reference at(size_type __n)
# 734 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 735 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (__n >= this->size()) {
# 736 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__throw_out_of_range("basic_string::at"); }
# 737 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_leak();
# 738 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (_M_data())[__n];
# 739 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 748 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &operator+=(const std::basic_string< _CharT, _Traits, _Alloc> &__str)
# 749 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->append(__str)); }
# 757 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &operator+=(const _CharT *__s)
# 758 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->append(__s)); }
# 766 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &operator+=(_CharT __c)
# 767 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 768 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->push_back(__c);
# 769 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return *this;
# 770 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 778 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &append(const std::basic_string< _CharT, _Traits, _Alloc> &);
# 793 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &append(const std::basic_string< _CharT, _Traits, _Alloc> &, size_type, size_type);
# 802 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &append(const _CharT *, size_type);
# 810 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &append(const _CharT *__s)
# 811 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 812 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 813 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->append(__s, _Traits::length(__s)));
# 814 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 825 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &append(size_type, _CharT);
# 835 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InputIterator> std::basic_string< _CharT, _Traits, _Alloc> &
# 836 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
append(_InputIterator
# 837 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__first, _InputIterator __last)
# 838 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->replace(this->_M_iend(), this->_M_iend(), __first, __last)); }
# 845 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void push_back(_CharT __c)
# 846 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 847 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto const size_type __len = (1 + this->size());
# 848 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if ((__len > this->capacity()) || (*this->_M_rep())._M_is_shared()) {
# 849 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->reserve(__len); }
# 850 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_Traits::assign((_M_data())[this->size()], __c);
# 851 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(*this->_M_rep())._M_set_length_and_sharable(__len);
# 852 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 860 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &assign(const std::basic_string< _CharT, _Traits, _Alloc> &);
# 875 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &assign(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n)
# 876 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->assign(((&__str)->_M_data()) + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n)));
# 878 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 891 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &assign(const _CharT *, size_type);
# 903 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &assign(const _CharT *__s)
# 904 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 905 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 906 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->assign(__s, _Traits::length(__s)));
# 907 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 919 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &assign(size_type __n, _CharT __c)
# 920 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return this->_M_replace_aux(((size_type)(0)), this->size(), __n, __c); }
# 930 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InputIterator> std::basic_string< _CharT, _Traits, _Alloc> &
# 931 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
assign(_InputIterator
# 932 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__first, _InputIterator __last)
# 933 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->replace(this->_M_ibegin(), this->_M_iend(), __first, __last)); }
# 948 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void insert(iterator __p, size_type __n, _CharT __c)
# 949 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ (this->replace(__p, __p, __n, __c)); }
# 962 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InputIterator> void
# 963 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
insert(iterator
# 964 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__p, _InputIterator __beg, _InputIterator __end)
# 965 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ (this->replace(__p, __p, __beg, __end)); }
# 979 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &insert(size_type __pos1, const std::basic_string< _CharT, _Traits, _Alloc> &__str)
# 980 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->insert(__pos1, __str, ((size_type)(0)), __str.size())); }
# 1001 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &insert(size_type __pos1, const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type
# 1002 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__pos2, size_type __n)
# 1003 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->insert(__pos1, ((&__str)->_M_data()) + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n)));
# 1005 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1024 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &insert(size_type, const _CharT *, size_type);
# 1042 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &insert(size_type __pos, const _CharT *__s)
# 1043 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1044 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1045 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->insert(__pos, __s, _Traits::length(__s)));
# 1046 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1065 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &insert(size_type __pos, size_type __n, _CharT __c)
# 1066 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return this->_M_replace_aux(this->_M_check(__pos, "basic_string::insert"), ((size_type)(0)), __n, __c);
# 1067 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1082 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
iterator insert(iterator __p, _CharT __c)
# 1083 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1084 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1085 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto const size_type __pos = (__p - this->_M_ibegin());
# 1086 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_replace_aux(__pos, ((size_type)(0)), ((size_type)(1)), __c);
# 1087 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(*this->_M_rep())._M_set_leaked();
# 1088 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return this->_M_ibegin() + __pos;
# 1089 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1106 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &erase(size_type __pos = 0, size_type __n = npos)
# 1107 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1108 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_mutate(this->_M_check(__pos, "basic_string::erase"), this->_M_limit(__pos, __n), ((size_type)(0)));
# 1110 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return *this;
# 1111 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1122 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
iterator erase(iterator __position)
# 1123 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1124 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1126 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto const size_type __pos = (__position - this->_M_ibegin());
# 1127 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_mutate(__pos, ((size_type)(1)), ((size_type)(0)));
# 1128 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(*this->_M_rep())._M_set_leaked();
# 1129 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return this->_M_ibegin() + __pos;
# 1130 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1142 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
iterator erase(iterator __first, iterator __last)
# 1143 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1144 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1146 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto const size_type __pos = (__first - this->_M_ibegin());
# 1147 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
this->_M_mutate(__pos, __last - __first, ((size_type)(0)));
# 1148 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(*this->_M_rep())._M_set_leaked();
# 1149 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return this->_M_ibegin() + __pos;
# 1150 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1169 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(size_type __pos, size_type __n, const std::basic_string< _CharT, _Traits, _Alloc> &__str)
# 1170 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->replace(__pos, __n, ((&__str)->_M_data()), __str.size())); }
# 1191 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(size_type __pos1, size_type __n1, const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type
# 1192 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__pos2, size_type __n2)
# 1193 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->replace(__pos1, __n1, ((&__str)->_M_data()) + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2)));
# 1195 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1215 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(size_type, size_type, const _CharT *, size_type);
# 1234 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(size_type __pos, size_type __n1, const _CharT *__s)
# 1235 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1236 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1237 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->replace(__pos, __n1, __s, _Traits::length(__s)));
# 1238 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1257 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
# 1258 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return this->_M_replace_aux(this->_M_check(__pos, "basic_string::replace"), this->_M_limit(__pos, __n1), __n2, __c);
# 1259 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1275 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const std::basic_string< _CharT, _Traits, _Alloc> &__str)
# 1276 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->replace(__i1, __i2, ((&__str)->_M_data()), __str.size())); }
# 1293 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const _CharT *__s, size_type __n)
# 1294 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1295 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1297 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->replace(__i1 - this->_M_ibegin(), __i2 - __i1, __s, __n));
# 1298 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1314 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const _CharT *__s)
# 1315 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1316 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1317 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->replace(__i1, __i2, __s, _Traits::length(__s)));
# 1318 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1335 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
# 1336 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1337 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1339 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return this->_M_replace_aux(__i1 - this->_M_ibegin(), __i2 - __i1, __n, __c);
# 1340 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1356 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InputIterator> std::basic_string< _CharT, _Traits, _Alloc> &
# 1357 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
replace(iterator
# 1358 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__i1, iterator __i2, _InputIterator
# 1359 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__k1, _InputIterator __k2)
# 1360 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1361 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1363 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1364 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename __is_integer< _InputIterator> ::__type _Integral;
# 1365 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
# 1366 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1371 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, _CharT *__k1, _CharT *__k2)
# 1372 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1373 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1375 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1376 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->replace(__i1 - this->_M_ibegin(), __i2 - __i1, __k1, __k2 - __k1));
# 1378 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1381 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const _CharT *
# 1382 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__k1, const _CharT *__k2)
# 1383 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1384 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1386 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1387 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->replace(__i1 - this->_M_ibegin(), __i2 - __i1, __k1, __k2 - __k1));
# 1389 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1392 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
# 1393 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1394 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1396 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1397 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->replace(__i1 - this->_M_ibegin(), __i2 - __i1, (__k1.base()), __k2 - __k1));
# 1399 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1402 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &replace(iterator __i1, iterator __i2, const_iterator
# 1403 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__k1, const_iterator __k2)
# 1404 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1405 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1407 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1408 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->replace(__i1 - this->_M_ibegin(), __i2 - __i1, (__k1.base()), __k2 - __k1));
# 1410 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1414 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
private:
# 1413 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _Integer> std::basic_string< _CharT, _Traits, _Alloc> &
# 1414 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_M_replace_dispatch(iterator
# 1415 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__i1, iterator __i2, _Integer __n, _Integer
# 1416 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__val, __true_type)
# 1417 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return this->_M_replace_aux(__i1 - this->_M_ibegin(), __i2 - __i1, __n, __val); }
# 1419 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InputIterator> std::basic_string< _CharT, _Traits, _Alloc> &_M_replace_dispatch(iterator, iterator, _InputIterator, _InputIterator, __false_type);
# 1425 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &_M_replace_aux(size_type, size_type, size_type, _CharT);
# 1429 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> &_M_replace_safe(size_type, size_type, const _CharT *, size_type);
# 1434 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InIterator> static _CharT *
# 1435 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_S_construct_aux(_InIterator
# 1436 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__beg, _InIterator __end, const _Alloc &
# 1437 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__a, __false_type)
# 1438 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1439 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename iterator_traits< _InIterator> ::iterator_category _Tag;
# 1440 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return _S_construct(__beg, __end, __a, _Tag());
# 1441 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1443 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InIterator> static _CharT *
# 1444 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_S_construct_aux(_InIterator
# 1445 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__beg, _InIterator __end, const _Alloc &
# 1446 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__a, __true_type)
# 1447 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return _S_construct(static_cast< size_type>(__beg), static_cast< value_type>(__end), __a);
# 1448 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1450 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InIterator> static _CharT *
# 1451 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
_S_construct(_InIterator
# 1452 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__beg, _InIterator __end, const _Alloc &__a)
# 1453 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1454 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename __is_integer< _InIterator> ::__type _Integral;
# 1455 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return _S_construct_aux(__beg, __end, __a, _Integral());
# 1456 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1459 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _InIterator> static _CharT *_S_construct(_InIterator, _InIterator, const _Alloc &, input_iterator_tag);
# 1466 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _FwdIterator> static _CharT *_S_construct(_FwdIterator, _FwdIterator, const _Alloc &, forward_iterator_tag);
# 1472 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
static _CharT *_S_construct(size_type, _CharT, const _Alloc &);
# 1488 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
public: size_type copy(_CharT *, size_type, size_type = 0) const;
# 1498 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
void swap(std::basic_string< _CharT, _Traits, _Alloc> &);
# 1508 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
const _CharT *c_str() const
# 1509 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return _M_data(); }
# 1518 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
const _CharT *data() const
# 1519 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return _M_data(); }
# 1525 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
allocator_type get_allocator() const
# 1526 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return this->_M_dataplus; }
# 1540 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find(const _CharT *, size_type, size_type) const;
# 1553 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos = 0) const
# 1554 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->find(__str.data(), __pos, __str.size())); }
# 1567 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find(const _CharT *__s, size_type __pos = 0) const
# 1568 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1569 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1570 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->find(__s, __pos, _Traits::length(__s)));
# 1571 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1584 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find(_CharT, size_type = 0) const;
# 1597 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type rfind(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos = npos) const
# 1598 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->rfind(__str.data(), __pos, __str.size())); }
# 1612 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type rfind(const _CharT *, size_type, size_type) const;
# 1625 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type rfind(const _CharT *__s, size_type __pos = npos) const
# 1626 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1627 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1628 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->rfind(__s, __pos, _Traits::length(__s)));
# 1629 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1642 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type rfind(_CharT, size_type = npos) const;
# 1655 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_first_of(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos = 0) const
# 1656 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->find_first_of(__str.data(), __pos, __str.size())); }
# 1670 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_first_of(const _CharT *, size_type, size_type) const;
# 1683 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_first_of(const _CharT *__s, size_type __pos = 0) const
# 1684 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1685 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1686 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->find_first_of(__s, __pos, _Traits::length(__s)));
# 1687 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1702 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_first_of(_CharT __c, size_type __pos = 0) const
# 1703 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->find(__c, __pos)); }
# 1716 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_last_of(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos = npos) const
# 1717 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->find_last_of(__str.data(), __pos, __str.size())); }
# 1731 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_last_of(const _CharT *, size_type, size_type) const;
# 1744 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_last_of(const _CharT *__s, size_type __pos = npos) const
# 1745 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1746 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1747 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->find_last_of(__s, __pos, _Traits::length(__s)));
# 1748 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1763 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_last_of(_CharT __c, size_type __pos = npos) const
# 1764 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->rfind(__c, __pos)); }
# 1777 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_first_not_of(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos = 0) const
# 1778 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->find_first_not_of(__str.data(), __pos, __str.size())); }
# 1792 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT *, size_type, size_type) const;
# 1806 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT *__s, size_type __pos = 0) const
# 1807 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1808 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1809 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->find_first_not_of(__s, __pos, _Traits::length(__s)));
# 1810 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1823 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_first_not_of(_CharT, size_type = 0) const;
# 1836 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_last_not_of(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos = npos) const
# 1837 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (this->find_last_not_of(__str.data(), __pos, __str.size())); }
# 1852 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT *, size_type, size_type) const;
# 1865 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT *__s, size_type __pos = npos) const
# 1866 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1867 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
;
# 1868 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return (this->find_last_not_of(__s, __pos, _Traits::length(__s)));
# 1869 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1882 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
size_type find_last_not_of(_CharT, size_type = npos) const;
# 1897 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
std::basic_string< _CharT, _Traits, _Alloc> substr(size_type __pos = 0, size_type __n = npos) const
# 1898 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return std::basic_string< _CharT, _Traits, _Alloc> (*this, this->_M_check(__pos, "basic_string::substr"), __n);
# 1899 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1913 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
int compare(const std::basic_string< _CharT, _Traits, _Alloc> &__str) const
# 1914 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 1915 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto const size_type __size = (this->size());
# 1916 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto const size_type __osize = (__str.size());
# 1917 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto const size_type __len = (std::min(__size, __osize));
# 1919 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto int __r = (_Traits::compare(_M_data(), __str.data(), __len));
# 1920 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
if (!(__r)) {
# 1921 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__r = __size - __osize; }
# 1922 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return __r;
# 1923 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 1941 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
int compare(size_type, size_type, const std::basic_string< _CharT, _Traits, _Alloc> &) const;
# 1963 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
int compare(size_type, size_type, const std::basic_string< _CharT, _Traits, _Alloc> &, size_type, size_type) const;
# 1978 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
int compare(const _CharT *) const;
# 1998 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
int compare(size_type, size_type, const _CharT *) const;
# 2021 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
int compare(size_type, size_type, const _CharT *, size_type) const;
# 2023 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
};
# 2025 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline
# 2027 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
basic_string< _CharT, _Traits, _Alloc> ::basic_string() : _M_dataplus(((_S_empty_rep())._M_refdata()), _Alloc())
# 2029 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ }
# 2041 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>
# 2043 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator+(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2044 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2045 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 2046 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto basic_string< _CharT, _Traits, _Alloc> __str(__lhs);
# 2047 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(__str.append(__rhs));
# 2048 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return __str;
# 2049 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 2057 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> extern basic_string< _CharT, _Traits, _Alloc> operator+(const _CharT *, const basic_string< _CharT, _Traits, _Alloc> &);
# 2068 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> extern basic_string< _CharT, _Traits, _Alloc> operator+(_CharT, const basic_string< _CharT, _Traits, _Alloc> &);
# 2078 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline basic_string< _CharT, _Traits, _Alloc>
# 2080 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator+(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const _CharT *
# 2081 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2082 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 2083 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto basic_string< _CharT, _Traits, _Alloc> __str(__lhs);
# 2084 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(__str.append(__rhs));
# 2085 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return __str;
# 2086 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 2094 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline basic_string< _CharT, _Traits, _Alloc>
# 2096 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator+(const basic_string< _CharT, _Traits, _Alloc> &__lhs, _CharT __rhs)
# 2097 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{
# 2098 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef basic_string< _CharT, _Traits, _Alloc> __string_type;
# 2099 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type;
# 2100 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
auto __string_type __str(__lhs);
# 2101 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
(__str.append(((__size_type)(1)), __rhs));
# 2102 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
return __str;
# 2103 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 2112 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2114 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator==(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2115 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2116 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) == 0; }
# 2124 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2126 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator==(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2127 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2128 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__rhs.compare(__lhs)) == 0; }
# 2136 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2138 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator==(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const _CharT *
# 2139 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2140 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) == 0; }
# 2149 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2151 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator!=(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2152 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2153 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__rhs.compare(__lhs)) != 0; }
# 2161 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2163 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator!=(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2164 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2165 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__rhs.compare(__lhs)) != 0; }
# 2173 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2175 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator!=(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const _CharT *
# 2176 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2177 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) != 0; }
# 2186 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2188 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator<(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2189 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2190 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) < 0; }
# 2198 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2200 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator<(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const _CharT *
# 2201 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2202 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) < 0; }
# 2210 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2212 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator<(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2213 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2214 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__rhs.compare(__lhs)) > 0; }
# 2223 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2225 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator>(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2226 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2227 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) > 0; }
# 2235 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2237 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator>(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const _CharT *
# 2238 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2239 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) > 0; }
# 2247 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2249 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator>(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2250 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2251 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__rhs.compare(__lhs)) < 0; }
# 2260 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2262 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator<=(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2263 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2264 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) <= 0; }
# 2272 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2274 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator<=(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const _CharT *
# 2275 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2276 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) <= 0; }
# 2284 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2286 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator<=(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2287 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2288 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__rhs.compare(__lhs)) >= 0; }
# 2297 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2299 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator>=(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2300 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2301 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) >= 0; }
# 2309 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2311 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator>=(const basic_string< _CharT, _Traits, _Alloc> &__lhs, const _CharT *
# 2312 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2313 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__lhs.compare(__rhs)) >= 0; }
# 2321 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline bool
# 2323 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
operator>=(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 2324 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2325 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ return (__rhs.compare(__lhs)) <= 0; }
# 2334 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> inline void
# 2336 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
swap(basic_string< _CharT, _Traits, _Alloc> &__lhs, basic_string< _CharT, _Traits, _Alloc> &
# 2337 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
__rhs)
# 2338 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
{ (__lhs.swap(__rhs)); }
# 2351 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> extern basic_istream< _CharT, _Traits> &operator>>(basic_istream< _CharT, _Traits> &, basic_string< _CharT, _Traits, _Alloc> &);
# 2365 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> extern basic_ostream< _CharT, _Traits> &operator<<(basic_ostream< _CharT, _Traits> &, const basic_string< _CharT, _Traits, _Alloc> &);
# 2383 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> extern basic_istream< _CharT, _Traits> &getline(basic_istream< _CharT, _Traits> &, basic_string< _CharT, _Traits, _Alloc> &, _CharT);
# 2400 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<class _CharT, class _Traits, class _Alloc> extern inline basic_istream< _CharT, _Traits> &getline(basic_istream< _CharT, _Traits> &, basic_string< _CharT, _Traits, _Alloc> &);
# 2407 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<> basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &, char);
# 2413 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &, wchar_t);
# 2416 "/usr/include/c++/4.0.0/bits/basic_string.h" 3
}
# 65 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
namespace std {
# 70 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Distance> bool
# 72 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__is_heap(_RandomAccessIterator __first, _Distance __n)
# 73 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 74 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto _Distance __parent = 0;
# 75 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
for (_Distance __child = 1; __child < __n; ++__child)
# 76 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 77 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (__first[__parent] < __first[__child]) {
# 78 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
return false; }
# 79 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if ((__child & 1) == 0) {
# 80 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
++__parent; }
# 81 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 82 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
return true;
# 83 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 85 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Distance, class
# 86 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
_StrictWeakOrdering> bool
# 88 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__is_heap(_RandomAccessIterator __first, _StrictWeakOrdering __comp, _Distance
# 89 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__n)
# 90 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 91 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto _Distance __parent = 0;
# 92 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
for (_Distance __child = 1; __child < __n; ++__child)
# 93 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 94 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (__comp(__first[__parent], __first[__child])) {
# 95 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
return false; }
# 96 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if ((__child & 1) == 0) {
# 97 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
++__parent; }
# 98 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 99 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
return true;
# 100 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 102 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator> bool
# 104 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 105 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{ return std::__is_heap(__first, std::distance(__first, __last)); }
# 107 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _StrictWeakOrdering> bool
# 109 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _StrictWeakOrdering
# 110 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__comp)
# 111 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{ return std::__is_heap(__first, __comp, std::distance(__first, __last)); }
# 115 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Distance, class _Tp> void
# 117 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__push_heap(_RandomAccessIterator __first, _Distance
# 118 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__holeIndex, _Distance __topIndex, _Tp __value)
# 119 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 120 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto _Distance __parent = ((__holeIndex - 1) / 2);
# 121 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
while ((__holeIndex > __topIndex) && (*(__first + __parent) < __value))
# 122 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 123 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = *(__first + __parent);
# 124 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__holeIndex = __parent;
# 125 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__parent = (__holeIndex - 1) / 2;
# 126 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 127 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = __value;
# 128 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 139 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator> inline void
# 141 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 142 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 144 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 146 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 152 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 155 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__push_heap(__first, ((_DistanceType)((__last - __first) - 1)), ((_DistanceType)(0)), ((_ValueType)(*(__last - 1))));
# 157 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 159 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Distance, class _Tp, class
# 160 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
_Compare> void
# 162 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__push_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance
# 163 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__topIndex, _Tp __value, _Compare __comp)
# 164 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 165 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto _Distance __parent = ((__holeIndex - 1) / 2);
# 166 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
while ((__holeIndex > __topIndex) && (__comp(*(__first + __parent), __value)))
# 168 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 169 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = *(__first + __parent);
# 170 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__holeIndex = __parent;
# 171 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__parent = (__holeIndex - 1) / 2;
# 172 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 173 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = __value;
# 174 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 187 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Compare> inline void
# 189 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 190 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__comp)
# 191 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 193 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 195 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 200 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 201 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 203 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__push_heap(__first, ((_DistanceType)((__last - __first) - 1)), ((_DistanceType)(0)), ((_ValueType)(*(__last - 1))), __comp);
# 205 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 207 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Distance, class _Tp> void
# 209 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance
# 210 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__len, _Tp __value)
# 211 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 212 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto const _Distance __topIndex = (__holeIndex);
# 213 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto _Distance __secondChild = (2 * __holeIndex + 2);
# 214 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
while (__secondChild < __len)
# 215 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 216 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (*(__first + __secondChild) < *(__first + (__secondChild - 1))) {
# 217 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__secondChild--; }
# 218 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = *(__first + __secondChild);
# 219 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__holeIndex = __secondChild;
# 220 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__secondChild = 2 * (__secondChild + 1);
# 221 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 222 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (__secondChild == __len)
# 223 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 224 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = *(__first + (__secondChild - 1));
# 225 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__holeIndex = __secondChild - 1;
# 226 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 227 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__push_heap(__first, __holeIndex, __topIndex, __value);
# 228 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 230 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Tp> inline void
# 232 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator
# 233 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__result, _Tp __value)
# 234 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 236 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance;
# 237 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*__result) = *__first;
# 238 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__adjust_heap(__first, ((_Distance)(0)), ((_Distance)(__last - __first)), __value);
# 240 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 251 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator> inline void
# 253 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 254 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 256 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 262 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 263 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 265 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__pop_heap(__first, __last - 1, __last - 1, ((_ValueType)(*(__last - 1))));
# 267 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 269 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Distance, class
# 270 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
_Tp, class _Compare> void
# 272 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance
# 273 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__len, _Tp __value, _Compare __comp)
# 274 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 275 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto const _Distance __topIndex = (__holeIndex);
# 276 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto _Distance __secondChild = (2 * __holeIndex + 2);
# 277 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
while (__secondChild < __len)
# 278 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 279 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (__comp(*(__first + __secondChild), *(__first + (__secondChild - 1)))) {
# 281 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__secondChild--; }
# 282 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = *(__first + __secondChild);
# 283 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__holeIndex = __secondChild;
# 284 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__secondChild = 2 * (__secondChild + 1);
# 285 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 286 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (__secondChild == __len)
# 287 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 288 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*(__first + __holeIndex)) = *(__first + (__secondChild - 1));
# 289 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__holeIndex = __secondChild - 1;
# 290 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 291 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__push_heap(__first, __holeIndex, __topIndex, __value, __comp);
# 292 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 294 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Tp, class _Compare> inline void
# 296 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator
# 297 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__result, _Tp __value, _Compare __comp)
# 298 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 300 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance;
# 301 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
(*__result) = *__first;
# 302 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__adjust_heap(__first, ((_Distance)(0)), ((_Distance)(__last - __first)), __value, __comp);
# 304 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 317 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Compare> inline void
# 319 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator
# 320 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__last, _Compare __comp)
# 321 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 325 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 326 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 329 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 330 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__pop_heap(__first, __last - 1, __last - 1, ((_ValueType)(*(__last - 1))), __comp);
# 332 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 342 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator> void
# 344 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 345 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 347 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 349 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 355 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 357 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (__last - __first < 2) {
# 358 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
return; }
# 360 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto const _DistanceType __len = (__last - __first);
# 361 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto _DistanceType __parent = ((__len - 2) / 2);
# 362 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
while (true)
# 363 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 364 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__adjust_heap(__first, __parent, __len, ((_ValueType)(*(__first + __parent))));
# 366 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (__parent == 0) {
# 367 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
return; }
# 368 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__parent--;
# 369 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 370 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 382 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Compare> inline void
# 384 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 385 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__comp)
# 386 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 388 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 390 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 395 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 397 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (__last - __first < 2) {
# 398 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
return; }
# 400 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto const _DistanceType __len = (__last - __first);
# 401 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
auto _DistanceType __parent = ((__len - 2) / 2);
# 402 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
while (true)
# 403 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 404 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::__adjust_heap(__first, __parent, __len, ((_ValueType)(*(__first + __parent))), __comp);
# 406 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
if (__parent == 0) {
# 407 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
return; }
# 408 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__parent--;
# 409 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 410 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 420 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator> void
# 422 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 423 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 429 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 432 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
while (__last - __first > 1) {
# 433 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::pop_heap(__first, __last--); }
# 434 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 446 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
template<class _RandomAccessIterator, class _Compare> void
# 448 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 449 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
__comp)
# 450 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
{
# 454 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 455 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
;
# 457 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
while (__last - __first > 1) {
# 458 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
std::pop_heap(__first, __last--, __comp); }
# 459 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 461 "/usr/include/c++/4.0.0/bits/stl_heap.h" 3
}
# 66 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
namespace std {
# 75 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
template<class _ForwardIterator, class _Tp>
# 76 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
class _Temporary_buffer {
# 82 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
public: typedef _Tp value_type;
# 83 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
typedef value_type *pointer;
# 84 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
typedef pointer iterator;
# 85 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
typedef ptrdiff_t size_type;
# 88 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
protected: size_type _M_original_len;
# 89 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
size_type _M_len;
# 90 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
pointer _M_buffer;
# 93 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
void _M_initialize_buffer(const _Tp &, __true_type) { }
# 96 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
void _M_initialize_buffer(const _Tp &val, __false_type)
# 97 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
{ std::uninitialized_fill_n(this->_M_buffer, this->_M_len, val); }
# 102 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
public: size_type size() const
# 103 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
{ return this->_M_len; }
# 107 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
size_type requested_size() const
# 108 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
{ return this->_M_original_len; }
# 112 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
iterator begin()
# 113 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
{ return this->_M_buffer; }
# 117 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
iterator end()
# 118 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
{ return (this->_M_buffer) + (this->_M_len); }
# 124 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
_Temporary_buffer(_ForwardIterator, _ForwardIterator);
# 126 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
~_Temporary_buffer()
# 127 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
{
# 128 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
std::_Destroy(this->_M_buffer, (this->_M_buffer) + (this->_M_len));
# 129 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
std::return_temporary_buffer(this->_M_buffer);
# 130 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
}
# 134 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
private: _Temporary_buffer(const std::_Temporary_buffer< _ForwardIterator, _Tp> &);
# 137 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
void operator=(const std::_Temporary_buffer< _ForwardIterator, _Tp> &);
# 138 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
};
# 141 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
template<class _ForwardIterator, class _Tp>
# 143 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
_Temporary_buffer< _ForwardIterator, _Tp> ::_Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) : _M_original_len((std::distance(__first, __last))), _M_len((0)), _M_buffer((0))
# 146 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
{
# 148 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
typedef typename __is_scalar< _Tp> ::__type _Trivial;
# 150 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
try
# 151 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
{
# 152 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
auto pair< _Tp *, int> __p(get_temporary_buffer< _Tp> (this->_M_original_len));
# 154 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
(this->_M_buffer) = (__p.first);
# 155 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
(this->_M_len) = (__p.second);
# 156 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
if (this->_M_len > 0) {
# 157 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
_M_initialize_buffer(*__first, _Trivial()); }
# 158 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
}
# 159 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
catch (...)
# 160 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
{
# 161 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
std::return_temporary_buffer(this->_M_buffer);
# 162 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
(this->_M_buffer) = 0;
# 163 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
(this->_M_len) = (0);
# 164 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
throw;
# 165 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
}
# 166 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
}
# 167 "/usr/include/c++/4.0.0/bits/stl_tempbuf.h" 3
}
# 70 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
namespace std {
# 84 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _Tp> inline const _Tp &
# 86 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__median(const _Tp &__a, const _Tp &__b, const _Tp &__c)
# 87 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 90 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__a < __b) {
# 91 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__b < __c) {
# 92 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __b; } else {
# 93 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__a < __c) {
# 94 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __c; } else {
# 96 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __a; } } } else {
# 97 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__a < __c) {
# 98 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __a; } else {
# 99 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__b < __c) {
# 100 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __c; } else {
# 102 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __b; } } }
# 103 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 118 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _Tp, class _Compare> inline const _Tp &
# 120 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__median(const _Tp &__a, const _Tp &__b, const _Tp &__c, _Compare __comp)
# 121 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 124 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(__a, __b)) {
# 125 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(__b, __c)) {
# 126 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __b; } else {
# 127 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(__a, __c)) {
# 128 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __c; } else {
# 130 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __a; } } } else {
# 131 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(__a, __c)) {
# 132 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __a; } else {
# 133 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(__b, __c)) {
# 134 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __c; } else {
# 136 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __b; } } }
# 137 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 150 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _Function> _Function
# 152 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for_each(_InputIterator __first, _InputIterator __last, _Function __f)
# 153 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 156 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 157 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 158 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__f(*__first); }
# 159 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __f;
# 160 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 167 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _Tp> inline _InputIterator
# 169 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find(_InputIterator __first, _InputIterator __last, const _Tp &
# 170 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val, input_iterator_tag)
# 171 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 172 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first != __last) && (!(*__first == __val))) {
# 173 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first; }
# 174 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first;
# 175 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 182 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _Predicate> inline _InputIterator
# 184 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find_if(_InputIterator __first, _InputIterator __last, _Predicate
# 185 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred, input_iterator_tag)
# 186 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 187 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first != __last) && (!(__pred(*__first)))) {
# 188 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first; }
# 189 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first;
# 190 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 197 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Tp> _RandomAccessIterator
# 199 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp &
# 200 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val, random_access_iterator_tag)
# 201 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 203 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = ((__last - __first) >> 2);
# 205 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __trip_count > 0; --__trip_count)
# 206 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 207 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == __val) {
# 208 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 209 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 211 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == __val) {
# 212 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 213 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 215 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == __val) {
# 216 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 217 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 219 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == __val) {
# 220 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 221 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 222 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 224 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
switch (__last - __first)
# 225 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 226 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
case 3:
# 227 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == __val) {
# 228 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 229 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 230 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
case 2:
# 231 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == __val) {
# 232 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 233 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 234 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
case 1:
# 235 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == __val) {
# 236 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 237 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 238 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
case 0:
# 239 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
default:
# 240 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last;
# 241 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 242 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 249 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Predicate> _RandomAccessIterator
# 251 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate
# 252 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred, random_access_iterator_tag)
# 253 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 255 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = ((__last - __first) >> 2);
# 257 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __trip_count > 0; --__trip_count)
# 258 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 259 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 260 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 261 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 263 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 264 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 265 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 267 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 268 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 269 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 271 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 272 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 273 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 274 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 276 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
switch (__last - __first)
# 277 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 278 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
case 3:
# 279 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 280 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 281 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 282 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
case 2:
# 283 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 284 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 285 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 286 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
case 1:
# 287 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 288 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 289 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 290 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
case 0:
# 291 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
default:
# 292 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last;
# 293 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 294 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 304 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _Tp> inline _InputIterator
# 306 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find(_InputIterator __first, _InputIterator __last, const _Tp &
# 307 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val)
# 308 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 313 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 314 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::find(__first, __last, __val, std::__iterator_category(__first));
# 316 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 326 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _Predicate> inline _InputIterator
# 328 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find_if(_InputIterator __first, _InputIterator __last, _Predicate
# 329 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred)
# 330 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 335 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 336 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::find_if(__first, __last, __pred, std::__iterator_category(__first));
# 338 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 348 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator> _ForwardIterator
# 350 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
# 351 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 356 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 357 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 358 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last; }
# 359 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __next = __first;
# 360 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__next != __last)
# 361 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 362 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == *__next) {
# 363 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 364 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __next;
# 365 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 366 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last;
# 367 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 379 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _BinaryPredicate> _ForwardIterator
# 381 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate
# 382 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__binary_pred)
# 383 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 389 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 390 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 391 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last; }
# 392 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __next = __first;
# 393 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__next != __last)
# 394 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 395 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__binary_pred(*__first, *__next)) {
# 396 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 397 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __next;
# 398 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 399 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last;
# 400 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 410 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _Tp> typename iterator_traits< _InputIterator> ::difference_type
# 412 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
count(_InputIterator __first, _InputIterator __last, const _Tp &__value)
# 413 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 419 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 420 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _InputIterator> ::difference_type __n = 0;
# 421 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 422 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == __value) {
# 423 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__n; } }
# 424 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __n;
# 425 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 435 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _Predicate> typename iterator_traits< _InputIterator> ::difference_type
# 437 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
# 438 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 443 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 444 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _InputIterator> ::difference_type __n = 0;
# 445 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 446 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 447 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__n; } }
# 448 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __n;
# 449 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 474 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator1
# 476 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 477 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2)
# 478 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 485 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 486 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 488 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__first1 == __last1) || (__first2 == __last2)) {
# 489 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first1; }
# 492 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator2 __tmp(__first2);
# 493 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__tmp;
# 494 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__tmp == __last2) {
# 495 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::find(__first1, __last1, *__first2); }
# 498 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator2 __p1; auto _ForwardIterator2 __p;
# 499 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__p1 = __first2; ++__p1;
# 500 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator1 __current = __first1;
# 502 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first1 != __last1)
# 503 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 504 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first1 = std::find(__first1, __last1, *__first2);
# 505 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first1 == __last1) {
# 506 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; }
# 508 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__p = __p1;
# 509 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__current = __first1;
# 510 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (++__current == __last1) {
# 511 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; }
# 513 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (*__current == *__p)
# 514 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 515 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (++__p == __last2) {
# 516 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first1; }
# 517 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (++__current == __last1) {
# 518 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; }
# 519 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 520 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 521 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 522 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first1;
# 523 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 545 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator1, class _ForwardIterator2, class
# 546 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BinaryPredicate> _ForwardIterator1
# 548 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 549 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2, _BinaryPredicate
# 550 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__predicate)
# 551 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 558 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 559 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 562 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__first1 == __last1) || (__first2 == __last2)) {
# 563 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first1; }
# 566 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator2 __tmp(__first2);
# 567 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__tmp;
# 568 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__tmp == __last2)
# 569 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 570 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (!(__predicate(*__first1, *__first2)))) {
# 571 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1; }
# 572 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first1;
# 573 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 576 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator2 __p1; auto _ForwardIterator2 __p;
# 577 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__p1 = __first2; ++__p1;
# 578 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator1 __current = __first1;
# 580 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first1 != __last1)
# 581 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 582 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first1 != __last1)
# 583 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 584 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__predicate(*__first1, *__first2)) {
# 585 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
break; }
# 586 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 587 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 588 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (!(__predicate(*__first1, *__first2)))) {
# 589 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1; }
# 590 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first1 == __last1) {
# 591 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; }
# 593 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__p = __p1;
# 594 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__current = __first1;
# 595 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (++__current == __last1) {
# 596 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; }
# 598 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__predicate(*__current, *__p))
# 599 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 600 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (++__p == __last2) {
# 601 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first1; }
# 602 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (++__current == __last1) {
# 603 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; }
# 604 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 605 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 606 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 607 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first1;
# 608 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 623 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Integer, class _Tp> _ForwardIterator
# 625 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer
# 626 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__count, const _Tp &__val)
# 627 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 633 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 635 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__count <= 0) {
# 636 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; } else
# 638 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 639 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = std::find(__first, __last, __val);
# 640 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first != __last)
# 641 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 643 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _ForwardIterator> ::difference_type __n = (__count);
# 644 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __i = __first;
# 645 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__i;
# 646 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (((__i != __last) && (__n != 1)) && (*__i == __val))
# 647 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 648 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__i;
# 649 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__n;
# 650 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 651 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__n == 1) {
# 652 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; } else {
# 654 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = std::find(__i, __last, __val); }
# 655 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 656 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last;
# 657 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 658 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 675 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Integer, class _Tp, class
# 676 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BinaryPredicate> _ForwardIterator
# 678 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer
# 679 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__count, const _Tp &__val, _BinaryPredicate
# 680 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__binary_pred)
# 681 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 686 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 688 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__count <= 0) {
# 689 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; } else
# 691 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 692 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first != __last)
# 693 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 694 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__binary_pred(*__first, __val)) {
# 695 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
break; }
# 696 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 697 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 698 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first != __last)
# 699 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 701 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _ForwardIterator> ::difference_type __n = (__count);
# 702 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __i = __first;
# 703 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__i;
# 704 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (((__i != __last) && (__n != 1)) && (__binary_pred(*__i, __val)))
# 705 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 706 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__i;
# 707 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__n;
# 708 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 709 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__n == 1) {
# 710 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; } else
# 712 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 713 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__i != __last)
# 714 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 715 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__binary_pred(*__i, __val)) {
# 716 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
break; }
# 717 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__i;
# 718 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 719 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __i;
# 720 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 721 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 722 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last;
# 723 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 724 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 737 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2
# 739 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 740 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2)
# 741 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 753 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 755 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first1 != __last1; (++__first1), (++__first2)) {
# 756 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__first1, __first2); }
# 757 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first2;
# 758 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 775 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _OutputIterator, class
# 776 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_UnaryOperation> _OutputIterator
# 778 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
transform(_InputIterator __first, _InputIterator __last, _OutputIterator
# 779 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _UnaryOperation __unary_op)
# 780 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 786 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 788 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; (++__first), (++__result)) {
# 789 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = __unary_op(*__first); }
# 790 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 791 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 810 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 811 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator, class _BinaryOperation> _OutputIterator
# 813 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
transform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 814 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _OutputIterator __result, _BinaryOperation
# 815 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__binary_op)
# 816 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 823 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 825 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first1 != __last1; ((++__first1), (++__first2)), (++__result)) {
# 826 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = __binary_op(*__first1, *__first2); }
# 827 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 828 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 842 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp> void
# 844 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 845 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__old_value, const _Tp &__new_value)
# 846 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 854 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 856 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 857 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first == __old_value) {
# 858 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__first) = __new_value; } }
# 859 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 873 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Predicate, class _Tp> void
# 875 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 876 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred, const _Tp &__new_value)
# 877 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 885 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 887 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 888 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 889 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__first) = __new_value; } }
# 890 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 906 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _OutputIterator, class _Tp> _OutputIterator
# 908 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
replace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 909 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, const _Tp &
# 910 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__old_value, const _Tp &__new_value)
# 911 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 918 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 920 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; (++__first), (++__result)) {
# 921 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = (*__first == __old_value) ? __new_value : (*__first); }
# 922 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 923 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 939 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _OutputIterator, class
# 940 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Predicate, class _Tp> _OutputIterator
# 942 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator
# 943 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Predicate
# 944 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred, const _Tp &__new_value)
# 945 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 952 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 954 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; (++__first), (++__result)) {
# 955 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = (__pred(*__first)) ? __new_value : (*__first); }
# 956 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 957 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 970 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Generator> void
# 972 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
generate(_ForwardIterator __first, _ForwardIterator __last, _Generator
# 973 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__gen)
# 974 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 979 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 981 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 982 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__first) = __gen(); }
# 983 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 996 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _OutputIterator, class _Size, class _Generator> _OutputIterator
# 998 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
# 999 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1005 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __n > 0; (--__n), (++__first)) {
# 1006 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__first) = __gen(); }
# 1007 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first;
# 1008 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1023 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _OutputIterator, class _Tp> _OutputIterator
# 1025 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 1026 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, const _Tp &__value)
# 1027 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1034 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1036 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 1037 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(*__first == __value))
# 1038 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1039 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first;
# 1040 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 1041 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 1042 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 1043 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1059 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _OutputIterator, class
# 1060 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Predicate> _OutputIterator
# 1062 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator
# 1063 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Predicate __pred)
# 1064 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1071 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1073 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 1074 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(__pred(*__first)))
# 1075 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1076 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first;
# 1077 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 1078 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 1079 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 1080 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1098 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp> _ForwardIterator
# 1100 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1101 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__value)
# 1102 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1108 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1110 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = std::find(__first, __last, __value);
# 1111 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __i = __first;
# 1112 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return (__first == __last) ? __first : (std::remove_copy(++__i, __last, __first, __value));
# 1115 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1133 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Predicate> _ForwardIterator
# 1135 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 1136 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred)
# 1137 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1143 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1145 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = std::find_if(__first, __last, __pred);
# 1146 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __i = __first;
# 1147 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return (__first == __last) ? __first : (std::remove_copy_if(++__i, __last, __first, __pred));
# 1150 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1159 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _OutputIterator> _OutputIterator
# 1161 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 1162 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, output_iterator_tag)
# 1164 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1166 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _InputIterator> ::value_type __value = (*__first);
# 1167 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = __value;
# 1168 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 1169 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(__value == *__first))
# 1170 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1171 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__value = *__first;
# 1172 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*(++__result)) = __value;
# 1173 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 1174 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return ++__result;
# 1175 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1184 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _ForwardIterator> _ForwardIterator
# 1186 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator
# 1187 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, forward_iterator_tag)
# 1189 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1191 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first;
# 1192 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 1193 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(*__result == *__first)) {
# 1194 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*(++__result)) = *__first; } }
# 1195 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return ++__result;
# 1196 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1206 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _OutputIterator, class
# 1207 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BinaryPredicate> _OutputIterator
# 1209 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 1210 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _BinaryPredicate
# 1211 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__binary_pred, output_iterator_tag)
# 1213 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1219 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _InputIterator> ::value_type __value = (*__first);
# 1220 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = __value;
# 1221 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 1222 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(__binary_pred(__value, *__first)))
# 1223 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1224 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__value = *__first;
# 1225 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*(++__result)) = __value;
# 1226 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 1227 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return ++__result;
# 1228 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1238 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _ForwardIterator, class
# 1239 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BinaryPredicate> _ForwardIterator
# 1241 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator
# 1242 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _BinaryPredicate
# 1243 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__binary_pred, forward_iterator_tag)
# 1245 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1251 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first;
# 1252 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 1253 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(__binary_pred(*__result, *__first))) { (*(++__result)) = *__first; } }
# 1254 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return ++__result;
# 1255 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1270 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _OutputIterator> inline _OutputIterator
# 1272 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 1273 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result)
# 1274 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1281 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1284 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _OutputIterator> ::iterator_category _IterType;
# 1286 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) { return __result; }
# 1287 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::__unique_copy(__first, __last, __result, _IterType());
# 1288 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1305 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _OutputIterator, class
# 1306 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BinaryPredicate> inline _OutputIterator
# 1308 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator
# 1309 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _BinaryPredicate
# 1310 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__binary_pred)
# 1311 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1316 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1319 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _OutputIterator> ::iterator_category _IterType;
# 1321 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) { return __result; }
# 1322 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::__unique_copy(__first, __last, __result, __binary_pred, _IterType());
# 1324 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1339 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator> _ForwardIterator
# 1341 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
unique(_ForwardIterator __first, _ForwardIterator __last)
# 1342 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1348 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1351 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = std::adjacent_find(__first, __last);
# 1352 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 1353 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last; }
# 1356 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __dest = __first;
# 1357 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1358 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 1359 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(*__dest == *__first)) {
# 1360 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*(++__dest)) = *__first; } }
# 1361 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return ++__dest;
# 1362 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1378 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _BinaryPredicate> _ForwardIterator
# 1380 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate
# 1381 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__binary_pred)
# 1382 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1389 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1392 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = std::adjacent_find(__first, __last, __binary_pred);
# 1393 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 1394 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last; }
# 1397 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __dest = __first;
# 1398 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1399 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 1400 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(__binary_pred(*__dest, *__first))) {
# 1401 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*(++__dest)) = *__first; } }
# 1402 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return ++__dest;
# 1403 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1412 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator> void
# 1414 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag)
# 1416 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1417 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (true) {
# 1418 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__first == __last) || (__first == --__last)) {
# 1419 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; } else
# 1421 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1422 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__first, __last);
# 1423 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1424 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 1425 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1434 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> void
# 1436 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
# 1438 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1439 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 1440 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 1441 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last;
# 1442 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first < __last)
# 1443 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1444 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__first, __last);
# 1445 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1446 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last;
# 1447 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1448 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1461 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator> inline void
# 1463 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
# 1464 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1468 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1469 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__reverse(__first, __last, std::__iterator_category(__first));
# 1470 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1487 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator, class _OutputIterator> _OutputIterator
# 1489 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator
# 1490 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result)
# 1491 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1497 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1499 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first != __last)
# 1500 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1501 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last;
# 1502 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__last;
# 1503 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 1504 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1505 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 1506 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1515 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _EuclideanRingElement> _EuclideanRingElement
# 1517 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
# 1518 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1519 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__n != 0)
# 1520 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1521 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _EuclideanRingElement __t = (__m % __n);
# 1522 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__m = __n;
# 1523 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__n = __t;
# 1524 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1525 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __m;
# 1526 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1533 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator> void
# 1535 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__rotate(_ForwardIterator __first, _ForwardIterator
# 1536 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _ForwardIterator
# 1537 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, forward_iterator_tag)
# 1539 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1540 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__first == __middle) || (__last == __middle)) {
# 1541 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 1543 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __first2 = __middle;
# 1544 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
do
# 1545 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1546 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
swap(*__first, *__first2);
# 1547 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1548 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 1549 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __middle) {
# 1550 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle = __first2; }
# 1551 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} while (__first2 != __last);
# 1554 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2 = __middle;
# 1556 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first2 != __last)
# 1557 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1558 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
swap(*__first, *__first2);
# 1559 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1560 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 1561 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __middle) {
# 1562 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle = __first2; } else {
# 1563 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first2 == __last) {
# 1564 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2 = __middle; } }
# 1565 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1566 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1573 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator> void
# 1575 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__rotate(_BidirectionalIterator __first, _BidirectionalIterator
# 1576 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 1577 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, bidirectional_iterator_tag)
# 1579 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1584 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__first == __middle) || (__last == __middle)) {
# 1585 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 1587 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__reverse(__first, __middle, bidirectional_iterator_tag());
# 1588 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__reverse(__middle, __last, bidirectional_iterator_tag());
# 1590 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first != __middle) && (__middle != __last))
# 1591 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1592 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
swap(*__first, *(--__last));
# 1593 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1594 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1596 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __middle) {
# 1597 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__reverse(__middle, __last, bidirectional_iterator_tag()); } else {
# 1599 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__reverse(__first, __middle, bidirectional_iterator_tag()); }
# 1600 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1607 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> void
# 1609 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__rotate(_RandomAccessIterator __first, _RandomAccessIterator
# 1610 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _RandomAccessIterator
# 1611 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, random_access_iterator_tag)
# 1613 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1618 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__first == __middle) || (__last == __middle)) {
# 1619 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 1622 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance;
# 1624 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 1626 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __n = (__last - __first);
# 1627 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __k = (__middle - __first);
# 1628 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __l = (__n - __k);
# 1630 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__k == __l)
# 1631 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1632 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::swap_ranges(__first, __middle, __middle);
# 1633 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return;
# 1634 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1636 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __d = (__gcd(__n, __k));
# 1638 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_Distance __i = 0; __i < __d; __i++)
# 1639 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1640 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _ValueType __tmp = (*__first);
# 1641 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __p = __first;
# 1643 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__k < __l)
# 1644 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1645 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_Distance __j = 0; __j < __l / __d; __j++)
# 1646 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1647 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__p > __first + __l)
# 1648 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1649 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__p) = *(__p - __l);
# 1650 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__p -= __l;
# 1651 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1653 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__p) = *(__p + __k);
# 1654 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__p += __k;
# 1655 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1656 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 1658 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1659 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_Distance __j = 0; __j < __k / __d - 1; __j++)
# 1660 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1661 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__p < __last - __k)
# 1662 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1663 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__p) = *(__p + __k);
# 1664 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__p += __k;
# 1665 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1666 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__p) = *(__p - __l);
# 1667 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__p -= __l;
# 1668 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1669 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1671 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__p) = __tmp;
# 1672 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1673 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1674 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1694 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator> inline void
# 1696 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator
# 1697 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 1698 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1702 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1703 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1706 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::iterator_category _IterType;
# 1707 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__rotate(__first, __middle, __last, _IterType());
# 1708 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1727 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _OutputIterator> _OutputIterator
# 1729 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator
# 1730 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _OutputIterator __result)
# 1731 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1736 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1737 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1739 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__first, __middle, copy(__middle, __last, __result));
# 1740 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1752 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> inline void
# 1754 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 1755 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1759 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1761 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first != __last) {
# 1762 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = (__first + 1); __i != __last; ++__i) {
# 1763 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__i, __first + std::rand() % ((__i - __first) + 1)); } }
# 1764 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1779 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _RandomNumberGenerator> void
# 1781 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &
# 1782 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__rand)
# 1783 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1787 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1789 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 1790 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 1791 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = (__first + 1); __i != __last; ++__i) {
# 1792 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__i, __first + __rand((__i - __first) + 1)); }
# 1793 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1801 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Predicate> _ForwardIterator
# 1803 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 1804 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred, forward_iterator_tag)
# 1806 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1807 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 1808 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 1810 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__pred(*__first)) {
# 1811 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (++__first == __last) {
# 1812 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; } }
# 1814 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __next = __first;
# 1816 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__next != __last) {
# 1817 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__next))
# 1818 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1819 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
swap(*__first, *__next);
# 1820 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1821 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 1823 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first;
# 1824 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1831 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator, class _Predicate> _BidirectionalIterator
# 1833 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate
# 1834 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred, bidirectional_iterator_tag)
# 1836 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1837 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (true)
# 1838 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1839 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (true) {
# 1840 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 1841 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; } else {
# 1842 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first)) {
# 1843 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first; } else {
# 1845 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
break; } } }
# 1846 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last;
# 1847 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (true) {
# 1848 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 1849 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; } else {
# 1850 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(__pred(*__last))) {
# 1851 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last; } else {
# 1853 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
break; } } }
# 1854 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__first, __last);
# 1855 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 1856 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1857 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1873 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Predicate> inline _ForwardIterator
# 1875 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 1876 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred)
# 1877 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1883 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1885 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::__partition(__first, __last, __pred, std::__iterator_category(__first));
# 1887 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1895 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Predicate, class _Distance> _ForwardIterator
# 1897 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__inplace_stable_partition(_ForwardIterator __first, _ForwardIterator
# 1898 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Predicate
# 1899 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred, _Distance __len)
# 1900 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1901 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len == 1) {
# 1902 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return (__pred(*__first)) ? __last : __first; }
# 1903 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __middle = __first;
# 1904 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__middle, __len / 2);
# 1905 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __begin = (std::__inplace_stable_partition(__first, __middle, __pred, __len / 2));
# 1909 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __end = (std::__inplace_stable_partition(__middle, __last, __pred, __len - __len / 2));
# 1913 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::rotate(__begin, __middle, __end);
# 1914 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__begin, std::distance(__middle, __end));
# 1915 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __begin;
# 1916 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1923 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Pointer, class _Predicate, class
# 1924 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Distance> _ForwardIterator
# 1926 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__stable_partition_adaptive(_ForwardIterator __first, _ForwardIterator
# 1927 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Predicate
# 1928 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred, _Distance __len, _Pointer
# 1929 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer, _Distance
# 1930 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer_size)
# 1931 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1932 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len <= __buffer_size)
# 1933 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1934 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __result1 = __first;
# 1935 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Pointer __result2 = __buffer;
# 1936 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first != __last; ++__first) {
# 1937 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__pred(*__first))
# 1938 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1939 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result1) = *__first;
# 1940 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result1;
# 1941 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 1943 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1944 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result2) = *__first;
# 1945 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result2;
# 1946 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 1947 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::copy(__buffer, __result2, __result1);
# 1948 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result1;
# 1949 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 1951 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1952 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __middle = __first;
# 1953 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__middle, __len / 2);
# 1954 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __begin = (std::__stable_partition_adaptive(__first, __middle, __pred, __len / 2, __buffer, __buffer_size));
# 1958 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __end = (std::__stable_partition_adaptive(__middle, __last, __pred, __len - __len / 2, __buffer, __buffer_size));
# 1962 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::rotate(__begin, __middle, __end);
# 1963 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__begin, std::distance(__middle, __end));
# 1964 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __begin;
# 1965 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1966 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 1984 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Predicate> _ForwardIterator
# 1986 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate
# 1987 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pred)
# 1988 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 1994 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 1996 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 1997 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; } else
# 1999 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2001 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2003 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 2005 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Temporary_buffer< _ForwardIterator, typename iterator_traits< _ForwardIterator> ::value_type> __buf(__first, __last);
# 2007 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__buf.size()) > 0) {
# 2008 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::__stable_partition_adaptive(__first, __last, __pred, ((_DistanceType)((__buf.requested_size()))), (__buf.begin()), (__buf.size())); } else {
# 2013 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::__inplace_stable_partition(__first, __last, __pred, ((_DistanceType)((__buf.requested_size())))); }
# 2016 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2017 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2024 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Tp> _RandomAccessIterator
# 2026 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator
# 2027 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Tp __pivot)
# 2028 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2029 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (true)
# 2030 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2031 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (*__first < __pivot) {
# 2032 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first; }
# 2033 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last;
# 2034 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__pivot < *__last) {
# 2035 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last; }
# 2036 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(__first < __last)) {
# 2037 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 2038 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__first, __last);
# 2039 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2040 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2041 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2048 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Tp, class _Compare> _RandomAccessIterator
# 2050 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator
# 2051 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Tp
# 2052 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__pivot, _Compare __comp)
# 2053 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2054 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (true)
# 2055 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2056 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__comp(*__first, __pivot)) {
# 2057 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first; }
# 2058 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last;
# 2059 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__comp(__pivot, *__last)) {
# 2060 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last; }
# 2061 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (!(__first < __last)) {
# 2062 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 2063 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__first, __last);
# 2064 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2065 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2066 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2074 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
enum __cuda__S_threshold { _S_threshold = 16};
# 2081 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Tp> void
# 2083 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)
# 2084 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2085 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __next = __last;
# 2086 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__next;
# 2087 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__val < *__next)
# 2088 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2089 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__last) = *__next;
# 2090 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last = __next;
# 2091 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__next;
# 2092 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2093 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__last) = __val;
# 2094 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2101 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Tp, class _Compare> void
# 2103 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val, _Compare
# 2104 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 2105 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2106 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __next = __last;
# 2107 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__next;
# 2108 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__comp(__val, *__next))
# 2109 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2110 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__last) = *__next;
# 2111 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last = __next;
# 2112 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__next;
# 2113 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2114 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__last) = __val;
# 2115 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2122 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> void
# 2124 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2125 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 2126 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2127 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 2128 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 2130 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = (__first + 1); __i != __last; ++__i)
# 2131 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2133 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _RandomAccessIterator> ::value_type __val = (*__i);
# 2134 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__val < *__first)
# 2135 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2136 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::copy_backward(__first, __i, __i + 1);
# 2137 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__first) = __val;
# 2138 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 2140 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__unguarded_linear_insert(__i, __val); }
# 2141 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2142 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2149 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Compare> void
# 2151 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2152 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Compare __comp)
# 2153 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2154 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) { return; }
# 2156 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = (__first + 1); __i != __last; ++__i)
# 2157 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2159 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto typename iterator_traits< _RandomAccessIterator> ::value_type __val = (*__i);
# 2160 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(__val, *__first))
# 2161 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2162 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::copy_backward(__first, __i, __i + 1);
# 2163 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__first) = __val;
# 2164 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 2166 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__unguarded_linear_insert(__i, __val, __comp); }
# 2167 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2168 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2175 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> inline void
# 2177 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2178 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 2179 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2181 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 2183 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = __first; __i != __last; ++__i) {
# 2184 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__unguarded_linear_insert(__i, ((_ValueType)(*__i))); }
# 2185 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2192 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Compare> inline void
# 2194 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2195 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Compare __comp)
# 2196 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2198 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 2200 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = __first; __i != __last; ++__i) {
# 2201 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__unguarded_linear_insert(__i, ((_ValueType)(*__i)), __comp); }
# 2202 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2209 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> void
# 2211 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2212 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 2213 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2214 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__last - __first > ((int)_S_threshold))
# 2215 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2216 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __first + ((int)_S_threshold));
# 2217 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__unguarded_insertion_sort(__first + ((int)_S_threshold), __last);
# 2218 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 2220 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last); }
# 2221 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2228 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Compare> void
# 2230 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2231 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Compare __comp)
# 2232 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2233 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__last - __first > ((int)_S_threshold))
# 2234 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2235 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __first + ((int)_S_threshold), __comp);
# 2236 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__unguarded_insertion_sort(__first + ((int)_S_threshold), __last, __comp);
# 2238 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 2240 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last, __comp); }
# 2241 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2248 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _Size> inline _Size
# 2250 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__lg(_Size __n)
# 2251 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2252 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Size __k;
# 2253 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (__k = 0; __n != 1; __n >>= 1) {
# 2254 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__k; }
# 2255 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __k;
# 2256 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2273 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> void
# 2275 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2276 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _RandomAccessIterator
# 2277 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 2278 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2280 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 2286 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2287 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2289 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::make_heap(__first, __middle);
# 2290 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = __middle; __i < __last; ++__i) {
# 2291 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__i < *__first) {
# 2292 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__pop_heap(__first, __middle, __i, ((_ValueType)(*__i))); } }
# 2293 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::sort_heap(__first, __middle);
# 2294 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2314 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Compare> void
# 2316 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2317 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _RandomAccessIterator
# 2318 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Compare
# 2319 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 2320 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2322 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 2329 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2330 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2332 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::make_heap(__first, __middle, __comp);
# 2333 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_RandomAccessIterator __i = __middle; __i < __last; ++__i) {
# 2334 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__i, *__first)) {
# 2335 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__pop_heap(__first, __middle, __i, ((_ValueType)(*__i)), __comp); } }
# 2336 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::sort_heap(__first, __middle, __comp);
# 2337 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2356 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _RandomAccessIterator> _RandomAccessIterator
# 2358 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator
# 2359 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result_first, _RandomAccessIterator
# 2360 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result_last)
# 2361 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2363 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType;
# 2365 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _OutputValueType;
# 2367 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 2375 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2376 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2378 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__result_first == __result_last) {
# 2379 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result_last; }
# 2380 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __result_real_last = __result_first;
# 2381 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first != __last) && (__result_real_last != __result_last))
# 2382 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2383 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result_real_last) = *__first;
# 2384 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result_real_last;
# 2385 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2386 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2387 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::make_heap(__result_first, __result_real_last);
# 2388 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first != __last)
# 2389 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2390 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first < *__result_first) {
# 2391 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__adjust_heap(__result_first, ((_DistanceType)(0)), ((_DistanceType)(__result_real_last - __result_first)), ((_InputValueType)(*__first))); }
# 2395 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2396 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2397 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::sort_heap(__result_first, __result_real_last);
# 2398 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result_real_last;
# 2399 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2420 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _RandomAccessIterator, class _Compare> _RandomAccessIterator
# 2422 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator
# 2423 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result_first, _RandomAccessIterator
# 2424 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result_last, _Compare
# 2425 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 2426 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2428 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType;
# 2430 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _OutputValueType;
# 2432 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 2442 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2443 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2445 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__result_first == __result_last) {
# 2446 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result_last; }
# 2447 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __result_real_last = __result_first;
# 2448 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first != __last) && (__result_real_last != __result_last))
# 2449 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2450 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result_real_last) = *__first;
# 2451 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result_real_last;
# 2452 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2453 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2454 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::make_heap(__result_first, __result_real_last, __comp);
# 2455 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__first != __last)
# 2456 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2457 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first, *__result_first)) {
# 2458 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__adjust_heap(__result_first, ((_DistanceType)(0)), ((_DistanceType)(__result_real_last - __result_first)), ((_InputValueType)(*__first)), __comp); }
# 2463 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2464 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2465 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::sort_heap(__result_first, __result_real_last, __comp);
# 2466 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result_real_last;
# 2467 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2474 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Size> void
# 2476 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator
# 2477 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Size
# 2478 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__depth_limit)
# 2479 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2481 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 2483 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__last - __first > ((int)_S_threshold))
# 2484 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2485 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__depth_limit == 0)
# 2486 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2487 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::partial_sort(__first, __last, __last);
# 2488 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return;
# 2489 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2490 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__depth_limit;
# 2491 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __cut = (std::__unguarded_partition(__first, __last, ((_ValueType)(std::__median(*__first, *(__first + (__last - __first) / 2), *(__last - 1))))));
# 2500 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__introsort_loop(__cut, __last, __depth_limit);
# 2501 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last = __cut;
# 2502 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2503 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2510 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Size, class _Compare> void
# 2512 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator
# 2513 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Size
# 2514 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__depth_limit, _Compare __comp)
# 2515 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2517 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 2519 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__last - __first > ((int)_S_threshold))
# 2520 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2521 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__depth_limit == 0)
# 2522 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2523 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::partial_sort(__first, __last, __last, __comp);
# 2524 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return;
# 2525 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2526 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__depth_limit;
# 2527 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __cut = (std::__unguarded_partition(__first, __last, ((_ValueType)(std::__median(*__first, *(__first + (__last - __first) / 2), *(__last - 1), __comp))), __comp));
# 2537 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__introsort_loop(__cut, __last, __depth_limit, __comp);
# 2538 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last = __cut;
# 2539 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2540 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2555 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> inline void
# 2557 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 2558 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2560 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 2566 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2568 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first != __last)
# 2569 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2570 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__introsort_loop(__first, __last, __lg(__last - __first) * 2);
# 2571 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__final_insertion_sort(__first, __last);
# 2572 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2573 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2589 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Compare> inline void
# 2591 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 2592 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 2593 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2595 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 2602 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2604 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first != __last)
# 2605 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2606 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__introsort_loop(__first, __last, __lg(__last - __first) * 2, __comp);
# 2608 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__final_insertion_sort(__first, __last, __comp);
# 2609 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2610 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2622 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp> _ForwardIterator
# 2624 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2625 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val)
# 2626 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2628 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2630 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 2640 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2642 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __len = (std::distance(__first, __last));
# 2643 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __half;
# 2644 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __middle;
# 2646 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__len > 0)
# 2647 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2648 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__half = __len >> 1;
# 2649 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle = __first;
# 2650 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__middle, __half);
# 2651 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__middle < __val)
# 2652 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2653 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __middle;
# 2654 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2655 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = (__len - __half) - 1;
# 2656 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 2658 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = __half; }
# 2659 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2660 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first;
# 2661 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2677 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator
# 2679 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2680 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val, _Compare __comp)
# 2681 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2683 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2685 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 2691 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2693 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __len = (std::distance(__first, __last));
# 2694 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __half;
# 2695 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __middle;
# 2697 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__len > 0)
# 2698 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2699 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__half = __len >> 1;
# 2700 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle = __first;
# 2701 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__middle, __half);
# 2702 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__middle, __val))
# 2703 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2704 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __middle;
# 2705 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2706 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = (__len - __half) - 1;
# 2707 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 2709 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = __half; }
# 2710 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2711 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first;
# 2712 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2724 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp> _ForwardIterator
# 2726 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2727 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val)
# 2728 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2730 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2732 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 2739 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2741 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __len = (std::distance(__first, __last));
# 2742 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __half;
# 2743 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __middle;
# 2745 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__len > 0)
# 2746 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2747 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__half = __len >> 1;
# 2748 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle = __first;
# 2749 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__middle, __half);
# 2750 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__val < *__middle) {
# 2751 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = __half; } else
# 2753 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2754 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __middle;
# 2755 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2756 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = (__len - __half) - 1;
# 2757 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2758 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2759 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first;
# 2760 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2776 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator
# 2778 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2779 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val, _Compare __comp)
# 2780 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2782 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 2784 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 2790 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2792 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __len = (std::distance(__first, __last));
# 2793 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __half;
# 2794 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __middle;
# 2796 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__len > 0)
# 2797 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2798 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__half = __len >> 1;
# 2799 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle = __first;
# 2800 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__middle, __half);
# 2801 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(__val, *__middle)) {
# 2802 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = __half; } else
# 2804 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2805 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __middle;
# 2806 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 2807 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = (__len - __half) - 1;
# 2808 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2809 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2810 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first;
# 2811 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2818 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator, class _Distance> void
# 2820 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator
# 2821 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 2822 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Distance
# 2823 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len1, _Distance __len2)
# 2824 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2825 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__len1 == 0) || (__len2 == 0)) {
# 2826 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 2827 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len1 + __len2 == 2)
# 2828 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2829 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__middle < *__first) {
# 2830 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__first, __middle); }
# 2831 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return;
# 2832 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2833 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __first_cut = __first;
# 2834 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __second_cut = __middle;
# 2835 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __len11 = 0;
# 2836 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __len22 = 0;
# 2837 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len1 > __len2)
# 2838 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2839 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len11 = __len1 / 2;
# 2840 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__first_cut, __len11);
# 2841 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__second_cut = std::lower_bound(__middle, __last, *__first_cut);
# 2842 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len22 = std::distance(__middle, __second_cut);
# 2843 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 2845 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2846 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len22 = __len2 / 2;
# 2847 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__second_cut, __len22);
# 2848 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first_cut = std::upper_bound(__first, __middle, *__second_cut);
# 2849 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len11 = std::distance(__first, __first_cut);
# 2850 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2851 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::rotate(__first_cut, __middle, __second_cut);
# 2852 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __new_middle = __first_cut;
# 2853 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__new_middle, std::distance(__middle, __second_cut));
# 2854 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_without_buffer(__first, __first_cut, __new_middle, __len11, __len22);
# 2856 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_without_buffer(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22);
# 2858 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2865 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator, class _Distance, class
# 2866 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Compare> void
# 2868 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator
# 2869 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 2870 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Distance
# 2871 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len1, _Distance __len2, _Compare
# 2872 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 2873 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2874 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__len1 == 0) || (__len2 == 0)) {
# 2875 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 2876 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len1 + __len2 == 2)
# 2877 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2878 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__middle, *__first)) {
# 2879 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__first, __middle); }
# 2880 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return;
# 2881 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2882 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __first_cut = __first;
# 2883 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __second_cut = __middle;
# 2884 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __len11 = 0;
# 2885 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __len22 = 0;
# 2886 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len1 > __len2)
# 2887 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2888 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len11 = __len1 / 2;
# 2889 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__first_cut, __len11);
# 2890 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__second_cut = std::lower_bound(__middle, __last, *__first_cut, __comp);
# 2892 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len22 = std::distance(__middle, __second_cut);
# 2893 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 2895 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2896 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len22 = __len2 / 2;
# 2897 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__second_cut, __len22);
# 2898 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first_cut = std::upper_bound(__first, __middle, *__second_cut, __comp);
# 2900 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len11 = std::distance(__first, __first_cut);
# 2901 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2902 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::rotate(__first_cut, __middle, __second_cut);
# 2903 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __new_middle = __first_cut;
# 2904 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__new_middle, std::distance(__middle, __second_cut));
# 2905 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_without_buffer(__first, __first_cut, __new_middle, __len11, __len22, __comp);
# 2907 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_without_buffer(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __comp);
# 2909 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2916 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> void
# 2918 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2919 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 2920 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2921 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__last - __first < 15)
# 2922 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2923 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last);
# 2924 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return;
# 2925 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2926 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __middle = (__first + (__last - __first) / 2);
# 2927 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__inplace_stable_sort(__first, __middle);
# 2928 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__inplace_stable_sort(__middle, __last);
# 2929 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_without_buffer(__first, __middle, __last, __middle - __first, __last - __middle);
# 2932 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2939 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Compare> void
# 2941 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 2942 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Compare __comp)
# 2943 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2944 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__last - __first < 15)
# 2945 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2946 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last, __comp);
# 2947 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return;
# 2948 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2949 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __middle = (__first + (__last - __first) / 2);
# 2950 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__inplace_stable_sort(__first, __middle, __comp);
# 2951 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__inplace_stable_sort(__middle, __last, __comp);
# 2952 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_without_buffer(__first, __middle, __last, __middle - __first, __last - __middle, __comp);
# 2956 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 2974 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 2975 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator> _OutputIterator
# 2977 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 2978 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 2979 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result)
# 2980 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2991 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2992 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 2994 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2))
# 2995 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2996 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first2 < *__first1)
# 2997 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 2998 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first2;
# 2999 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 3000 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3002 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3003 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 3004 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 3005 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3006 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 3007 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3008 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 3010 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3032 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 3033 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator, class _Compare> _OutputIterator
# 3035 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 3036 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 3037 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Compare __comp)
# 3038 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3050 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3051 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3053 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2))
# 3054 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3055 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first2, *__first1))
# 3056 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3057 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first2;
# 3058 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 3059 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3061 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3062 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 3063 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 3064 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3065 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 3066 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3067 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 3069 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3071 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator1, class _RandomAccessIterator2, class
# 3072 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Distance> void
# 3074 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1
# 3075 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _RandomAccessIterator2
# 3076 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Distance
# 3077 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__step_size)
# 3078 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3079 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __two_step = (2 * __step_size);
# 3081 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__last - __first >= __two_step)
# 3082 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3083 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result = std::merge(__first, __first + __step_size, __first + __step_size, __first + __two_step, __result);
# 3086 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first += __two_step;
# 3087 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3089 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__step_size = std::min(((_Distance)(__last - __first)), __step_size);
# 3090 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::merge(__first, __first + __step_size, __first + __step_size, __last, __result);
# 3092 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3094 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator1, class _RandomAccessIterator2, class
# 3095 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Distance, class _Compare> void
# 3097 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1
# 3098 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _RandomAccessIterator2
# 3099 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Distance __step_size, _Compare
# 3100 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 3101 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3102 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __two_step = (2 * __step_size);
# 3104 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__last - __first >= __two_step)
# 3105 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3106 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result = std::merge(__first, __first + __step_size, __first + __step_size, __first + __two_step, __result, __comp);
# 3110 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first += __two_step;
# 3111 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3112 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__step_size = std::min(((_Distance)(__last - __first)), __step_size);
# 3114 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::merge(__first, __first + __step_size, __first + __step_size, __last, __result, __comp);
# 3118 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3120 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
enum __cuda__S_chunk_size { _S_chunk_size = 7};
# 3122 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Distance> void
# 3124 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 3125 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Distance
# 3126 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__chunk_size)
# 3127 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3128 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__last - __first >= __chunk_size)
# 3129 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3130 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __first + __chunk_size);
# 3131 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first += __chunk_size;
# 3132 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3133 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last);
# 3134 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3136 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Distance, class _Compare> void
# 3138 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator
# 3139 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Distance
# 3140 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__chunk_size, _Compare __comp)
# 3141 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3142 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__last - __first >= __chunk_size)
# 3143 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3144 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __first + __chunk_size, __comp);
# 3145 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first += __chunk_size;
# 3146 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3147 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last, __comp);
# 3148 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3150 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Pointer> void
# 3152 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator
# 3153 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Pointer
# 3154 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer)
# 3155 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3157 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance;
# 3159 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __len = (__last - __first);
# 3160 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Pointer __buffer_last = (__buffer + __len);
# 3162 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __step_size = _S_chunk_size;
# 3163 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__chunk_insertion_sort(__first, __last, __step_size);
# 3165 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__step_size < __len)
# 3166 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3167 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_sort_loop(__first, __last, __buffer, __step_size);
# 3168 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__step_size *= 2;
# 3169 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
# 3170 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__step_size *= 2;
# 3171 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3172 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3174 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Pointer, class _Compare> void
# 3176 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator
# 3177 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Pointer
# 3178 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer, _Compare __comp)
# 3179 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3181 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance;
# 3183 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __len = (__last - __first);
# 3184 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Pointer __buffer_last = (__buffer + __len);
# 3186 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __step_size = _S_chunk_size;
# 3187 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__chunk_insertion_sort(__first, __last, __step_size, __comp);
# 3189 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__step_size < __len)
# 3190 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3191 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_sort_loop(__first, __last, __buffer, __step_size, __comp);
# 3193 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__step_size *= 2;
# 3194 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size, __comp);
# 3196 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__step_size *= 2;
# 3197 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3198 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3205 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator1, class _BidirectionalIterator2, class
# 3206 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BidirectionalIterator3> _BidirectionalIterator3
# 3208 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1
# 3209 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last1, _BidirectionalIterator2
# 3210 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _BidirectionalIterator2
# 3211 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last2, _BidirectionalIterator3
# 3212 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result)
# 3213 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3214 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first1 == __last1) {
# 3215 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy_backward(__first2, __last2, __result); }
# 3216 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first2 == __last2) {
# 3217 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy_backward(__first1, __last1, __result); }
# 3218 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last1;
# 3219 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last2;
# 3220 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (true)
# 3221 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3222 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__last2 < *__last1)
# 3223 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3224 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*(--__result)) = *__last1;
# 3225 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first1 == __last1) {
# 3226 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy_backward(__first2, ++__last2, __result); }
# 3227 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last1;
# 3228 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3230 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3231 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*(--__result)) = *__last2;
# 3232 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first2 == __last2) {
# 3233 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy_backward(__first1, ++__last1, __result); }
# 3234 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last2;
# 3235 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3236 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3237 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3244 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator1, class _BidirectionalIterator2, class
# 3245 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BidirectionalIterator3, class _Compare> _BidirectionalIterator3
# 3247 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1
# 3248 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last1, _BidirectionalIterator2
# 3249 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _BidirectionalIterator2
# 3250 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last2, _BidirectionalIterator3
# 3251 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Compare
# 3252 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 3253 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3254 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first1 == __last1) {
# 3255 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy_backward(__first2, __last2, __result); }
# 3256 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first2 == __last2) {
# 3257 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy_backward(__first1, __last1, __result); }
# 3258 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last1;
# 3259 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last2;
# 3260 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (true)
# 3261 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3262 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__last2, *__last1))
# 3263 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3264 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*(--__result)) = *__last1;
# 3265 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first1 == __last1) {
# 3266 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy_backward(__first2, ++__last2, __result); }
# 3267 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last1;
# 3268 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3270 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3271 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*(--__result)) = *__last2;
# 3272 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first2 == __last2) {
# 3273 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy_backward(__first1, ++__last1, __result); }
# 3274 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__last2;
# 3275 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3276 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3277 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3284 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator1, class _BidirectionalIterator2, class
# 3285 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Distance> _BidirectionalIterator1
# 3287 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__rotate_adaptive(_BidirectionalIterator1 __first, _BidirectionalIterator1
# 3288 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _BidirectionalIterator1
# 3289 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Distance
# 3290 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len1, _Distance __len2, _BidirectionalIterator2
# 3291 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer, _Distance
# 3292 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer_size)
# 3293 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3294 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator2 __buffer_end;
# 3295 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__len1 > __len2) && (__len2 <= __buffer_size))
# 3296 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3297 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer_end = std::copy(__middle, __last, __buffer);
# 3298 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::copy_backward(__first, __middle, __last);
# 3299 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__buffer, __buffer_end, __first);
# 3300 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 3301 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len1 <= __buffer_size)
# 3302 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3303 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer_end = std::copy(__first, __middle, __buffer);
# 3304 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::copy(__middle, __last, __first);
# 3305 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy_backward(__buffer, __buffer_end, __last);
# 3306 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3308 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3309 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::rotate(__first, __middle, __last);
# 3310 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__first, std::distance(__middle, __last));
# 3311 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first;
# 3312 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 3313 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3320 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator, class _Distance, class
# 3321 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Pointer> void
# 3323 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator
# 3324 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 3325 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Distance
# 3326 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len1, _Distance __len2, _Pointer
# 3327 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer, _Distance __buffer_size)
# 3328 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3329 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__len1 <= __len2) && (__len1 <= __buffer_size))
# 3330 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3331 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Pointer __buffer_end = (std::copy(__first, __middle, __buffer));
# 3332 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::merge(__buffer, __buffer_end, __middle, __last, __first);
# 3333 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 3334 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len2 <= __buffer_size)
# 3335 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3336 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Pointer __buffer_end = (std::copy(__middle, __last, __buffer));
# 3337 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_backward(__first, __middle, __buffer, __buffer_end, __last);
# 3339 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3341 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3342 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __first_cut = __first;
# 3343 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __second_cut = __middle;
# 3344 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __len11 = 0;
# 3345 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __len22 = 0;
# 3346 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len1 > __len2)
# 3347 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3348 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len11 = __len1 / 2;
# 3349 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__first_cut, __len11);
# 3350 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__second_cut = std::lower_bound(__middle, __last, *__first_cut);
# 3352 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len22 = std::distance(__middle, __second_cut);
# 3353 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3355 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3356 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len22 = __len2 / 2;
# 3357 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__second_cut, __len22);
# 3358 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first_cut = std::upper_bound(__first, __middle, *__second_cut);
# 3360 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len11 = std::distance(__first, __first_cut);
# 3361 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3362 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __new_middle = (std::__rotate_adaptive(__first_cut, __middle, __second_cut, __len1 - __len11, __len22, __buffer, __buffer_size));
# 3366 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_adaptive(__first, __first_cut, __new_middle, __len11, __len22, __buffer, __buffer_size);
# 3368 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __buffer, __buffer_size);
# 3371 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 3372 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3379 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator, class _Distance, class _Pointer, class
# 3380 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Compare> void
# 3382 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator
# 3383 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 3384 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Distance
# 3385 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len1, _Distance __len2, _Pointer
# 3386 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer, _Distance __buffer_size, _Compare
# 3387 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 3388 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3389 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__len1 <= __len2) && (__len1 <= __buffer_size))
# 3390 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3391 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Pointer __buffer_end = (std::copy(__first, __middle, __buffer));
# 3392 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::merge(__buffer, __buffer_end, __middle, __last, __first, __comp);
# 3393 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 3394 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len2 <= __buffer_size)
# 3395 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3396 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Pointer __buffer_end = (std::copy(__middle, __last, __buffer));
# 3397 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_backward(__first, __middle, __buffer, __buffer_end, __last, __comp);
# 3399 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3401 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3402 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __first_cut = __first;
# 3403 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __second_cut = __middle;
# 3404 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __len11 = 0;
# 3405 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Distance __len22 = 0;
# 3406 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len1 > __len2)
# 3407 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3408 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len11 = __len1 / 2;
# 3409 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__first_cut, __len11);
# 3410 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__second_cut = std::lower_bound(__middle, __last, *__first_cut, __comp);
# 3412 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len22 = std::distance(__middle, __second_cut);
# 3413 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3415 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3416 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len22 = __len2 / 2;
# 3417 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__second_cut, __len22);
# 3418 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first_cut = std::upper_bound(__first, __middle, *__second_cut, __comp);
# 3420 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len11 = std::distance(__first, __first_cut);
# 3421 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3422 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __new_middle = (std::__rotate_adaptive(__first_cut, __middle, __second_cut, __len1 - __len11, __len22, __buffer, __buffer_size));
# 3426 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_adaptive(__first, __first_cut, __new_middle, __len11, __len22, __buffer, __buffer_size, __comp);
# 3428 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __buffer, __buffer_size, __comp);
# 3432 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 3433 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3452 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator> void
# 3454 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator
# 3455 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 3456 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 3457 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3459 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _BidirectionalIterator> ::value_type _ValueType;
# 3461 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _BidirectionalIterator> ::difference_type _DistanceType;
# 3467 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3468 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3470 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__first == __middle) || (__middle == __last)) {
# 3471 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 3473 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __len1 = (std::distance(__first, __middle));
# 3474 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __len2 = (std::distance(__middle, __last));
# 3476 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Temporary_buffer< _BidirectionalIterator, typename iterator_traits< _BidirectionalIterator> ::value_type> __buf(__first, __last);
# 3478 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__buf.begin()) == 0) {
# 3479 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_without_buffer(__first, __middle, __last, __len1, __len2); } else {
# 3481 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_adaptive(__first, __middle, __last, __len1, __len2, (__buf.begin()), ((_DistanceType)((__buf.size())))); }
# 3483 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3506 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator, class _Compare> void
# 3508 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator
# 3509 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle, _BidirectionalIterator
# 3510 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Compare
# 3511 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 3512 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3514 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _BidirectionalIterator> ::value_type _ValueType;
# 3516 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _BidirectionalIterator> ::difference_type _DistanceType;
# 3523 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3524 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3526 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__first == __middle) || (__middle == __last)) {
# 3527 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return; }
# 3529 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _DistanceType __len1 = (std::distance(__first, __middle));
# 3530 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _DistanceType __len2 = (std::distance(__middle, __last));
# 3532 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Temporary_buffer< _BidirectionalIterator, typename iterator_traits< _BidirectionalIterator> ::value_type> __buf(__first, __last);
# 3534 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((__buf.begin()) == 0) {
# 3535 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_without_buffer(__first, __middle, __last, __len1, __len2, __comp); } else {
# 3538 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_adaptive(__first, __middle, __last, __len1, __len2, (__buf.begin()), ((_DistanceType)((__buf.size()))), __comp); }
# 3541 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3543 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Pointer, class
# 3544 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Distance> void
# 3546 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator
# 3547 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Pointer
# 3548 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer, _Distance __buffer_size)
# 3549 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3550 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __len = (((__last - __first) + 1) / 2);
# 3551 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _RandomAccessIterator __middle = (__first + __len);
# 3552 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len > __buffer_size)
# 3553 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3554 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__stable_sort_adaptive(__first, __middle, __buffer, __buffer_size);
# 3556 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__stable_sort_adaptive(__middle, __last, __buffer, __buffer_size);
# 3558 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3560 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3561 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_sort_with_buffer(__first, __middle, __buffer);
# 3562 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_sort_with_buffer(__middle, __last, __buffer);
# 3563 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3564 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_adaptive(__first, __middle, __last, ((_Distance)(__middle - __first)), ((_Distance)(__last - __middle)), __buffer, __buffer_size);
# 3568 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3570 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Pointer, class
# 3571 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Distance, class _Compare> void
# 3573 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator
# 3574 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Pointer
# 3575 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__buffer, _Distance __buffer_size, _Compare
# 3576 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 3577 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3578 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _Distance __len = (((__last - __first) + 1) / 2);
# 3579 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto const _RandomAccessIterator __middle = (__first + __len);
# 3580 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__len > __buffer_size)
# 3581 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3582 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__stable_sort_adaptive(__first, __middle, __buffer, __buffer_size, __comp);
# 3584 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__stable_sort_adaptive(__middle, __last, __buffer, __buffer_size, __comp);
# 3586 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 3588 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3589 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
# 3590 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
# 3591 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3592 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__merge_adaptive(__first, __middle, __last, ((_Distance)(__middle - __first)), ((_Distance)(__last - __middle)), __buffer, __buffer_size, __comp);
# 3597 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3615 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> inline void
# 3617 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
# 3618 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3620 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 3622 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 3628 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3631 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Temporary_buffer< _RandomAccessIterator, typename iterator_traits< _RandomAccessIterator> ::value_type> buf(__first, __last);
# 3632 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((buf.begin()) == 0) {
# 3633 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__inplace_stable_sort(__first, __last); } else {
# 3635 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__stable_sort_adaptive(__first, __last, (buf.begin()), ((_DistanceType)((buf.size())))); }
# 3637 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3656 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Compare> inline void
# 3658 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare
# 3659 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 3660 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3662 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 3664 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType;
# 3672 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3674 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _Temporary_buffer< _RandomAccessIterator, typename iterator_traits< _RandomAccessIterator> ::value_type> buf(__first, __last);
# 3675 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if ((buf.begin()) == 0) {
# 3676 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__inplace_stable_sort(__first, __last, __comp); } else {
# 3678 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__stable_sort_adaptive(__first, __last, (buf.begin()), ((_DistanceType)((buf.size()))), __comp); }
# 3680 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3697 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator> void
# 3699 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
nth_element(_RandomAccessIterator __first, _RandomAccessIterator
# 3700 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__nth, _RandomAccessIterator
# 3701 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 3702 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3704 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 3710 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3711 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3713 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__last - __first > 3)
# 3714 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3715 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __cut = (std::__unguarded_partition(__first, __last, ((_ValueType)(std::__median(*__first, *(__first + (__last - __first) / 2), *(__last - 1))))));
# 3724 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__cut <= __nth) {
# 3725 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __cut; } else {
# 3727 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last = __cut; }
# 3728 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3729 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last);
# 3730 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3748 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _RandomAccessIterator, class _Compare> void
# 3750 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
nth_element(_RandomAccessIterator __first, _RandomAccessIterator
# 3751 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__nth, _RandomAccessIterator
# 3752 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Compare
# 3753 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 3754 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3756 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType;
# 3763 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3764 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3766 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__last - __first > 3)
# 3767 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3768 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RandomAccessIterator __cut = (std::__unguarded_partition(__first, __last, ((_ValueType)(std::__median(*__first, *(__first + (__last - __first) / 2), *(__last - 1), __comp))), __comp));
# 3777 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__cut <= __nth) {
# 3778 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __cut; } else {
# 3780 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last = __cut; }
# 3781 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3782 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::__insertion_sort(__first, __last, __comp);
# 3783 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3801 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp> pair< _ForwardIterator, _ForwardIterator>
# 3803 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 3804 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val)
# 3805 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3807 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 3809 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 3816 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3818 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __len = (std::distance(__first, __last));
# 3819 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __half;
# 3820 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __middle; auto _ForwardIterator __left; auto _ForwardIterator __right;
# 3822 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__len > 0)
# 3823 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3824 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__half = __len >> 1;
# 3825 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle = __first;
# 3826 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__middle, __half);
# 3827 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__middle < __val)
# 3828 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3829 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __middle;
# 3830 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 3831 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = (__len - __half) - 1;
# 3832 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 3833 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__val < *__middle) {
# 3834 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = __half; } else
# 3836 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3837 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__left = std::lower_bound(__first, __middle, __val);
# 3838 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__first, __len);
# 3839 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__right = std::upper_bound(++__middle, __first, __val);
# 3840 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return pair< _ForwardIterator, _ForwardIterator> (__left, __right);
# 3841 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 3842 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3843 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return pair< _ForwardIterator, _ForwardIterator> (__first, __first);
# 3844 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3863 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp, class _Compare> pair< _ForwardIterator, _ForwardIterator>
# 3865 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 3866 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val, _Compare
# 3867 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 3868 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3870 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType;
# 3872 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType;
# 3880 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3882 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __len = (std::distance(__first, __last));
# 3883 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _DistanceType __half;
# 3884 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __middle; auto _ForwardIterator __left; auto _ForwardIterator __right;
# 3886 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (__len > 0)
# 3887 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3888 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__half = __len >> 1;
# 3889 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__middle = __first;
# 3890 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__middle, __half);
# 3891 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__middle, __val))
# 3892 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3893 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first = __middle;
# 3894 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first;
# 3895 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = (__len - __half) - 1;
# 3896 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 3897 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(__val, *__middle)) {
# 3898 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__len = __half; } else
# 3900 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3901 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__left = std::lower_bound(__first, __middle, __val, __comp);
# 3902 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__first, __len);
# 3903 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__right = std::upper_bound(++__middle, __first, __val, __comp);
# 3904 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return pair< _ForwardIterator, _ForwardIterator> (__left, __right);
# 3905 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 3906 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3907 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return pair< _ForwardIterator, _ForwardIterator> (__first, __first);
# 3908 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3921 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp> bool
# 3923 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 3924 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val)
# 3925 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3932 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3934 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __i = (std::lower_bound(__first, __last, __val));
# 3935 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return (__i != __last) && (!(__val < *__i));
# 3936 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3953 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Tp, class _Compare> bool
# 3955 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 3956 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__val, _Compare __comp)
# 3957 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 3964 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 3966 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __i = (std::lower_bound(__first, __last, __val, __comp));
# 3967 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return (__i != __last) && (!(__comp(__val, *__i)));
# 3968 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 3991 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2> bool
# 3993 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 3994 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2)
# 3995 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4004 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4005 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4007 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 4008 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first2 < *__first1) {
# 4009 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; } else {
# 4010 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first1 < *__first2) {
# 4011 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1; } else {
# 4013 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(++__first1), (++__first2); } } }
# 4015 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first2 == __last2;
# 4016 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4037 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 4038 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_Compare> bool
# 4040 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4041 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _Compare __comp)
# 4042 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4052 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4053 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4055 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 4056 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first2, *__first1)) {
# 4057 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; } else {
# 4058 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first1, *__first2)) {
# 4059 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1; } else {
# 4061 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(++__first1), (++__first2); } } }
# 4063 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first2 == __last2;
# 4064 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4083 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 4084 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator> _OutputIterator
# 4086 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4087 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4088 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result)
# 4089 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4100 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4101 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4103 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2))
# 4104 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4105 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first1 < *__first2)
# 4106 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4107 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4108 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4109 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 4110 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first2 < *__first1)
# 4111 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4112 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first2;
# 4113 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4114 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 4116 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4117 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4118 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4119 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4120 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 4121 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4122 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4123 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 4125 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4145 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 4146 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator, class _Compare> _OutputIterator
# 4148 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4149 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4150 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Compare __comp)
# 4151 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4163 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4164 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4166 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2))
# 4167 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4168 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first1, *__first2))
# 4169 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4170 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4171 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4172 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 4173 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first2, *__first1))
# 4174 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4175 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first2;
# 4176 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4177 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 4179 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4180 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4181 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4182 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4183 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} }
# 4184 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4185 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4186 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 4188 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4206 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 4207 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator> _OutputIterator
# 4209 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4210 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4211 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result)
# 4212 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4223 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4224 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4226 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 4227 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first1 < *__first2) {
# 4228 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1; } else {
# 4229 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first2 < *__first1) {
# 4230 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2; } else
# 4232 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4233 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4234 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4235 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4236 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4237 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} } }
# 4238 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 4239 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4260 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 4261 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator, class _Compare> _OutputIterator
# 4263 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4264 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4265 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Compare __comp)
# 4266 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4278 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4279 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4281 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 4282 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first1, *__first2)) {
# 4283 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1; } else {
# 4284 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first2, *__first1)) {
# 4285 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2; } else
# 4287 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4288 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4289 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4290 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4291 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4292 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} } }
# 4293 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 4294 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4314 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 4315 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator> _OutputIterator
# 4317 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4318 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4319 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result)
# 4320 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4331 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4332 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4334 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 4335 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first1 < *__first2)
# 4336 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4337 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4338 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4339 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4340 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 4341 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first2 < *__first1) {
# 4342 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2; } else
# 4344 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4345 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4346 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4347 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} } }
# 4348 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__first1, __last1, __result);
# 4349 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4372 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 4373 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator, class _Compare> _OutputIterator
# 4375 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4376 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4377 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Compare __comp)
# 4378 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4390 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4391 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4393 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 4394 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first1, *__first2))
# 4395 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4396 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4397 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4398 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4399 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 4400 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first2, *__first1)) {
# 4401 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2; } else
# 4403 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4404 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4405 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4406 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} } }
# 4407 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__first1, __last1, __result);
# 4408 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4426 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 4427 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator> _OutputIterator
# 4429 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4430 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4431 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result)
# 4432 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4443 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4444 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4446 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 4447 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first1 < *__first2)
# 4448 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4449 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4450 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4451 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4452 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 4453 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first2 < *__first1)
# 4454 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4455 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first2;
# 4456 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4457 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4458 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 4460 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4461 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4462 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4463 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} } }
# 4464 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 4466 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4487 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator1, class _InputIterator2, class
# 4488 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_OutputIterator, class _Compare> _OutputIterator
# 4490 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2
# 4491 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _InputIterator2 __last2, _OutputIterator
# 4492 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result, _Compare
# 4493 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 4494 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4506 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4507 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4509 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while ((__first1 != __last1) && (__first2 != __last2)) {
# 4510 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first1, *__first2))
# 4511 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4512 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first1;
# 4513 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4514 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4515 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else {
# 4516 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first2, *__first1))
# 4517 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4518 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
(*__result) = *__first2;
# 4519 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4520 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__result;
# 4521 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} else
# 4523 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4524 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4525 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first2;
# 4526 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
} } }
# 4527 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
# 4529 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4540 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator> _ForwardIterator
# 4542 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
max_element(_ForwardIterator __first, _ForwardIterator __last)
# 4543 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4548 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4550 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 4551 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 4552 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __result = __first;
# 4553 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 4554 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__result < *__first) {
# 4555 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result = __first; } }
# 4556 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 4557 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4567 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Compare> _ForwardIterator
# 4569 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare
# 4570 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 4571 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4577 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4579 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) { return __first; }
# 4580 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __result = __first;
# 4581 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 4582 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__result, *__first)) { __result = __first; } }
# 4583 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 4584 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4592 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator> _ForwardIterator
# 4594 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
min_element(_ForwardIterator __first, _ForwardIterator __last)
# 4595 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4600 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4602 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 4603 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 4604 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __result = __first;
# 4605 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 4606 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first < *__result) {
# 4607 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result = __first; } }
# 4608 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 4609 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4619 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator, class _Compare> _ForwardIterator
# 4621 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare
# 4622 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 4623 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4629 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4631 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 4632 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first; }
# 4633 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator __result = __first;
# 4634 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (++__first != __last) {
# 4635 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first, *__result)) {
# 4636 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result = __first; } }
# 4637 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 4638 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4654 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator> bool
# 4656 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 4657 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 4658 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4664 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4666 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 4667 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; }
# 4668 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __i = __first;
# 4669 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__i;
# 4670 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__i == __last) {
# 4671 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; }
# 4672 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__i = __last;
# 4673 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__i;
# 4675 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; ;)
# 4676 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4677 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __ii = __i;
# 4678 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__i;
# 4679 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__i < *__ii)
# 4680 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4681 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __j = __last;
# 4682 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (!(*__i < *(--__j)))
# 4683 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{ }
# 4684 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__i, __j);
# 4685 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::reverse(__ii, __last);
# 4686 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return true;
# 4687 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4688 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__i == __first)
# 4689 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4690 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::reverse(__first, __last);
# 4691 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false;
# 4692 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4693 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4694 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4710 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator, class _Compare> bool
# 4712 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 4713 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Compare __comp)
# 4714 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4721 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4723 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 4724 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; }
# 4725 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __i = __first;
# 4726 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__i;
# 4727 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__i == __last) {
# 4728 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; }
# 4729 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__i = __last;
# 4730 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__i;
# 4732 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; ;)
# 4733 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4734 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __ii = __i;
# 4735 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__i;
# 4736 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__i, *__ii))
# 4737 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4738 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __j = __last;
# 4739 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (!(__comp(*__i, *(--__j))))
# 4740 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{ }
# 4741 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__i, __j);
# 4742 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::reverse(__ii, __last);
# 4743 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return true;
# 4744 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4745 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__i == __first)
# 4746 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4747 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::reverse(__first, __last);
# 4748 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false;
# 4749 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4750 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4751 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4765 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator> bool
# 4767 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 4768 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last)
# 4769 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4775 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4777 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 4778 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; }
# 4779 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __i = __first;
# 4780 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__i;
# 4781 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__i == __last) {
# 4782 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; }
# 4783 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__i = __last;
# 4784 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__i;
# 4786 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; ;)
# 4787 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4788 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __ii = __i;
# 4789 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__i;
# 4790 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__ii < *__i)
# 4791 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4792 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __j = __last;
# 4793 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (!(*(--__j) < *__i))
# 4794 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{ }
# 4795 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__i, __j);
# 4796 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::reverse(__ii, __last);
# 4797 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return true;
# 4798 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4799 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__i == __first)
# 4800 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4801 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::reverse(__first, __last);
# 4802 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false;
# 4803 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4804 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4805 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4821 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator, class _Compare> bool
# 4823 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator
# 4824 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last, _Compare __comp)
# 4825 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4832 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4834 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first == __last) {
# 4835 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; }
# 4836 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __i = __first;
# 4837 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__i;
# 4838 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__i == __last) {
# 4839 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false; }
# 4840 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__i = __last;
# 4841 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__i;
# 4843 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; ;)
# 4844 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4845 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __ii = __i;
# 4846 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
--__i;
# 4847 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__ii, *__i))
# 4848 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4849 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator __j = __last;
# 4850 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (!(__comp(*(--__j), *__i)))
# 4851 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{ }
# 4852 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::iter_swap(__i, __j);
# 4853 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::reverse(__ii, __last);
# 4854 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return true;
# 4855 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4856 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__i == __first)
# 4857 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4858 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::reverse(__first, __last);
# 4859 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return false;
# 4860 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4861 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4862 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4880 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _ForwardIterator> _InputIterator
# 4882 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator
# 4883 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _ForwardIterator __last2)
# 4884 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4891 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4892 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4894 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first1 != __last1; ++__first1) {
# 4895 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) {
# 4896 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (*__first1 == *__iter) {
# 4897 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first1; } } }
# 4898 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1;
# 4899 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4916 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _InputIterator, class _ForwardIterator, class
# 4917 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BinaryPredicate> _InputIterator
# 4919 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator
# 4920 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _ForwardIterator __last2, _BinaryPredicate
# 4921 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 4922 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4929 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4930 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 4932 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (; __first1 != __last1; ++__first1) {
# 4933 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) {
# 4934 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__comp(*__first1, *__iter)) {
# 4935 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __first1; } } }
# 4936 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1;
# 4937 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4946 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator1
# 4948 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 4949 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag)
# 4951 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4952 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first2 == __last2) {
# 4953 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; } else
# 4955 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4956 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator1 __result = __last1;
# 4957 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (1)
# 4958 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4959 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator1 __new_result = (std::search(__first1, __last1, __first2, __last2));
# 4961 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__new_result == __last1) {
# 4962 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result; } else
# 4964 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4965 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result = __new_result;
# 4966 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first1 = __new_result;
# 4967 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4968 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4969 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4970 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4971 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4973 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator1, class _ForwardIterator2, class
# 4974 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BinaryPredicate> _ForwardIterator1
# 4976 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 4977 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate
# 4979 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 4980 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4981 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__first2 == __last2) {
# 4982 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; } else
# 4984 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4985 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator1 __result = __last1;
# 4986 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
while (1)
# 4987 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4988 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _ForwardIterator1 __new_result = (std::search(__first1, __last1, __first2, __last2, __comp));
# 4990 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__new_result == __last1) {
# 4991 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result; } else
# 4993 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 4994 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__result = __new_result;
# 4995 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first1 = __new_result;
# 4996 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
++__first1;
# 4997 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4998 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 4999 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 5000 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 5003 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator1, class _BidirectionalIterator2> _BidirectionalIterator1
# 5005 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1
# 5006 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last1, _BidirectionalIterator2
# 5007 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _BidirectionalIterator2
# 5008 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last2, bidirectional_iterator_tag, bidirectional_iterator_tag)
# 5010 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 5017 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef reverse_iterator< _BidirectionalIterator1> _RevIterator1;
# 5018 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef reverse_iterator< _BidirectionalIterator2> _RevIterator2;
# 5020 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RevIterator1 __rlast1(__first1);
# 5021 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RevIterator2 __rlast2(__first2);
# 5022 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RevIterator1 __rresult = std::search(((_RevIterator1)(__last1)), __rlast1, ((_RevIterator2)(__last2)), __rlast2);
# 5025 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__rresult == __rlast1) {
# 5026 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; } else
# 5028 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 5029 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator1 __result = ((__rresult.base()));
# 5030 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__result, -std::distance(__first2, __last2));
# 5031 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 5032 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 5033 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 5035 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _BidirectionalIterator1, class _BidirectionalIterator2, class
# 5036 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BinaryPredicate> _BidirectionalIterator1
# 5038 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1
# 5039 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last1, _BidirectionalIterator2
# 5040 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _BidirectionalIterator2
# 5041 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate
# 5043 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 5044 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 5051 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef reverse_iterator< _BidirectionalIterator1> _RevIterator1;
# 5052 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
typedef reverse_iterator< _BidirectionalIterator2> _RevIterator2;
# 5054 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RevIterator1 __rlast1(__first1);
# 5055 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RevIterator2 __rlast2(__first2);
# 5056 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _RevIterator1 __rresult = std::search(((_RevIterator1)(__last1)), __rlast1, ((_RevIterator2)(__last2)), __rlast2, __comp);
# 5060 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
if (__rresult == __rlast1) {
# 5061 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __last1; } else
# 5063 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 5064 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
auto _BidirectionalIterator1 __result = ((__rresult.base()));
# 5065 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
std::advance(__result, -std::distance(__first2, __last2));
# 5066 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return __result;
# 5067 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 5068 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 5096 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1
# 5098 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 5099 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2)
# 5100 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 5107 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 5108 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 5110 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2));
# 5113 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 5141 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
template<class _ForwardIterator1, class _ForwardIterator2, class
# 5142 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
_BinaryPredicate> inline _ForwardIterator1
# 5144 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2
# 5145 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__first2, _ForwardIterator2 __last2, _BinaryPredicate
# 5146 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
__comp)
# 5147 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
{
# 5154 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 5155 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
;
# 5157 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __comp);
# 5161 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 5163 "/usr/include/c++/4.0.0/bits/stl_algo.h" 3
}
# 48 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
namespace std {
# 50 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _Type> inline bool
# 52 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__is_null_pointer(_Type *__ptr)
# 53 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ return __ptr == 0; }
# 55 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _Type> inline bool
# 57 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__is_null_pointer(_Type)
# 58 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ return false; }
# 60 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 63 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_max_size = (((npos - sizeof(_Rep_base)) / sizeof(_CharT) - 1) / 4);
# 65 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> const _CharT
# 68 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_terminal = (_CharT());
# 70 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 72 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::npos;
# 76 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 78 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_empty_rep_storage[];
# 86 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 87 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _InIterator> _CharT *
# 90 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, input_iterator_tag)
# 92 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 94 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__beg == __end) && (__a == _Alloc())) {
# 95 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return ((_S_empty_rep())._M_refdata()); }
# 98 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _CharT __buf[128];
# 99 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto size_type __len = 0;
# 100 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
while ((__beg != __end) && (__len < sizeof(__buf) / sizeof(_CharT)))
# 101 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 102 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(__buf[__len++]) = *__beg;
# 103 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
++__beg;
# 104 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 105 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _Rep *__r = (_Rep::_S_create(__len, ((size_type)(0)), __a));
# 106 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(__r->_M_refdata(), __buf, __len);
# 107 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
try
# 108 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 109 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
while (__beg != __end)
# 110 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 111 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__len == (__r->_M_capacity))
# 112 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 114 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _Rep *__another = (_Rep::_S_create(__len + 1, __len, __a));
# 115 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
# 116 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r->_M_destroy(__a);
# 117 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r = __another;
# 118 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 119 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(__r->_M_refdata()[__len++]) = *__beg;
# 120 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
++__beg;
# 121 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 122 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 123 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
catch (...)
# 124 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 125 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r->_M_destroy(__a);
# 126 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
throw;
# 127 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 128 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r->_M_set_length_and_sharable(__len);
# 129 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __r->_M_refdata();
# 130 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 132 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 133 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _InIterator> _CharT *
# 136 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_S_construct(_InIterator __beg, _InIterator __end, const _Alloc &__a, forward_iterator_tag)
# 138 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 140 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__beg == __end) && (__a == _Alloc())) {
# 141 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return ((_S_empty_rep())._M_refdata()); }
# 144 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__builtin_expect((__is_null_pointer(__beg)) && (__beg != __end), 0)) {
# 145 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__throw_logic_error("basic_string::_S_construct NULL not valid"); }
# 147 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __dnew = (static_cast< size_type>((std::distance(__beg, __end))));
# 150 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _Rep *__r = (_Rep::_S_create(__dnew, ((size_type)(0)), __a));
# 151 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
try
# 152 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ _S_copy_chars(__r->_M_refdata(), __beg, __end); }
# 153 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
catch (...)
# 154 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 155 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r->_M_destroy(__a);
# 156 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
throw;
# 157 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 158 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r->_M_set_length_and_sharable(__dnew);
# 159 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __r->_M_refdata();
# 160 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 162 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> _CharT *
# 165 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_S_construct(size_type __n, _CharT __c, const _Alloc &__a)
# 166 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 168 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__n == 0) && (__a == _Alloc())) {
# 169 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return ((_S_empty_rep())._M_refdata()); }
# 172 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _Rep *__r = (_Rep::_S_create(__n, ((size_type)(0)), __a));
# 173 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__n) {
# 174 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_assign(__r->_M_refdata(), __n, __c); }
# 176 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r->_M_set_length_and_sharable(__n);
# 177 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __r->_M_refdata();
# 178 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 180 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 182 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const std::basic_string< _CharT, _Traits, _Alloc> &__str) : _M_dataplus((*__str._M_rep())._M_grab(((_Alloc)(__str.get_allocator())), __str.get_allocator()), __str.get_allocator())
# 186 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ }
# 188 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 190 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const _Alloc &__a) : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
# 192 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ }
# 194 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 196 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n) : _M_dataplus(_S_construct(((&__str)->_M_data()) + __str._M_check(__pos, "basic_string::basic_string"), (((&__str)->_M_data()) + __str._M_limit(__pos, __n)) + __pos, _Alloc()), _Alloc())
# 202 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ }
# 204 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 206 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos, size_type
# 207 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n, const _Alloc &__a) : _M_dataplus(_S_construct(((&__str)->_M_data()) + __str._M_check(__pos, "basic_string::basic_string"), (((&__str)->_M_data()) + __str._M_limit(__pos, __n)) + __pos, __a), __a)
# 213 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ }
# 216 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 218 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const _CharT *__s, size_type __n, const _Alloc &__a) : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
# 220 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ }
# 223 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 225 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::basic_string(const _CharT *__s, const _Alloc &__a) : _M_dataplus(_S_construct(__s, (__s) ? (__s + _Traits::length(__s)) : (__s + npos), __a), __a)
# 228 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ }
# 230 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 232 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::basic_string(size_type __n, _CharT __c, const _Alloc &__a) : _M_dataplus(_S_construct(__n, __c, __a), __a)
# 234 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ }
# 237 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 238 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _InputIterator>
# 240 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc &__a) : _M_dataplus(_S_construct(__beg, __end, __a), __a)
# 242 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{ }
# 244 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 247 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::assign(const std::basic_string< _CharT, _Traits, _Alloc> &__str)
# 248 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 249 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (this->_M_rep() != __str._M_rep())
# 250 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 252 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const allocator_type __a = (this->get_allocator());
# 253 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _CharT *__tmp = (*__str._M_rep())._M_grab(__a, __str.get_allocator());
# 254 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_dispose(__a);
# 255 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_data(__tmp);
# 256 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 257 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 258 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 260 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 263 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::assign(const _CharT *__s, size_type __n)
# 264 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 265 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 266 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check_length(this->size(), __n, "basic_string::assign");
# 267 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (this->_M_disjunct(__s) || (*this->_M_rep())._M_is_shared()) {
# 268 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return this->_M_replace_safe(((size_type)(0)), this->size(), __s, __n); } else
# 270 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 272 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __pos = (__s - _M_data());
# 273 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__pos >= __n) {
# 274 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(_M_data(), __s, __n); } else {
# 275 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__pos) {
# 276 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_move(_M_data(), __s, __n); } }
# 277 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_set_length_and_sharable(__n);
# 278 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 279 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 280 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 282 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 285 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::append(size_type __n, _CharT __c)
# 286 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 287 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__n)
# 288 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 289 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check_length(((size_type)(0)), __n, "basic_string::append");
# 290 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __len = (__n + this->size());
# 291 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__len > this->capacity()) || (*this->_M_rep())._M_is_shared()) {
# 292 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->reserve(__len); }
# 293 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_assign(_M_data() + this->size(), __n, __c);
# 294 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_set_length_and_sharable(__len);
# 295 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 296 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 297 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 299 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 302 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::append(const _CharT *__s, size_type __n)
# 303 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 304 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 305 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__n)
# 306 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 307 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check_length(((size_type)(0)), __n, "basic_string::append");
# 308 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __len = (__n + this->size());
# 309 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__len > this->capacity()) || (*this->_M_rep())._M_is_shared())
# 310 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 311 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (this->_M_disjunct(__s)) {
# 312 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->reserve(__len); } else
# 314 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 315 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __off = (__s - _M_data());
# 316 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->reserve(__len);
# 317 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__s = _M_data() + __off;
# 318 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 319 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 320 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(_M_data() + this->size(), __s, __n);
# 321 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_set_length_and_sharable(__len);
# 322 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 323 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 324 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 326 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 329 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::append(const std::basic_string< _CharT, _Traits, _Alloc> &__str)
# 330 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 331 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __size = (__str.size());
# 332 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__size)
# 333 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 334 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __len = (__size + this->size());
# 335 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__len > this->capacity()) || (*this->_M_rep())._M_is_shared()) {
# 336 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->reserve(__len); }
# 337 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(_M_data() + this->size(), ((&__str)->_M_data()), __size);
# 338 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_set_length_and_sharable(__len);
# 339 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 340 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 341 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 343 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 346 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::append(const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type __pos, size_type __n)
# 347 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 348 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__str._M_check(__pos, "basic_string::append");
# 349 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n = __str._M_limit(__pos, __n);
# 350 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__n)
# 351 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 352 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __len = (__n + this->size());
# 353 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__len > this->capacity()) || (*this->_M_rep())._M_is_shared()) {
# 354 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->reserve(__len); }
# 355 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(_M_data() + this->size(), ((&__str)->_M_data()) + __pos, __n);
# 356 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_set_length_and_sharable(__len);
# 357 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 358 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 359 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 361 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 364 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::insert(size_type __pos, const _CharT *__s, size_type __n)
# 365 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 366 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 367 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check(__pos, "basic_string::insert");
# 368 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check_length(((size_type)(0)), __n, "basic_string::insert");
# 369 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (this->_M_disjunct(__s) || (*this->_M_rep())._M_is_shared()) {
# 370 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return this->_M_replace_safe(__pos, ((size_type)(0)), __s, __n); } else
# 372 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 374 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __off = (__s - _M_data());
# 375 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_mutate(__pos, 0, __n);
# 376 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__s = _M_data() + __off;
# 377 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _CharT *__p = (_M_data() + __pos);
# 378 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__s + __n <= __p) {
# 379 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(__p, __s, __n); } else {
# 380 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__s >= __p) {
# 381 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(__p, __s + __n, __n); } else
# 383 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 384 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __nleft = (__p - __s);
# 385 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(__p, __s, __nleft);
# 386 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(__p + __nleft, __p + __n, __n - __nleft);
# 387 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} }
# 388 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 389 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 390 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 392 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 395 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::replace(size_type __pos, size_type __n1, const _CharT *__s, size_type
# 396 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n2)
# 397 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 398 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 399 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check(__pos, "basic_string::replace");
# 400 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n1 = this->_M_limit(__pos, __n1);
# 401 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check_length(__n1, __n2, "basic_string::replace");
# 402 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto bool __left;
# 403 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (this->_M_disjunct(__s) || (*this->_M_rep())._M_is_shared()) {
# 404 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return this->_M_replace_safe(__pos, __n1, __s, __n2); } else {
# 405 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__left = __s + __n2 <= _M_data() + __pos) || ((_M_data() + __pos) + __n1 <= __s))
# 407 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 409 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto size_type __off = (__s - _M_data());
# 410 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__left ? __off : (__off += __n2 - __n1);
# 411 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_mutate(__pos, __n1, __n2);
# 412 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(_M_data() + __pos, _M_data() + __off, __n2);
# 413 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 414 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} else
# 416 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 418 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const std::basic_string< _CharT, _Traits, _Alloc> __tmp(__s, __n2);
# 419 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return this->_M_replace_safe(__pos, __n1, (__tmp._M_data()), __n2);
# 420 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} }
# 421 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 423 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> void
# 426 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_M_destroy(const _Alloc &__a) throw()
# 427 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 428 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __size = (sizeof(_Rep_base) + ((this->_M_capacity) + 1) * sizeof(_CharT));
# 430 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(((_Raw_bytes_alloc)(__a)).deallocate(reinterpret_cast< char *>(this), __size));
# 431 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 433 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> void
# 436 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_M_leak_hard()
# 437 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 439 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (this->_M_rep() == &(_S_empty_rep())) {
# 440 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return; }
# 442 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((*this->_M_rep())._M_is_shared()) {
# 443 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_mutate(0, 0, 0); }
# 444 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_set_leaked();
# 445 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 447 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> void
# 450 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_M_mutate(size_type __pos, size_type __len1, size_type __len2)
# 451 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 452 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __old_size = (this->size());
# 453 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __new_size = ((__old_size + __len2) - __len1);
# 454 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __how_much = ((__old_size - __pos) - __len1);
# 456 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__new_size > this->capacity()) || (*this->_M_rep())._M_is_shared())
# 457 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 459 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const allocator_type __a = (this->get_allocator());
# 460 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _Rep *__r = (_Rep::_S_create(__new_size, this->capacity(), __a));
# 462 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__pos) {
# 463 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(__r->_M_refdata(), _M_data(), __pos); }
# 464 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__how_much) {
# 465 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy((__r->_M_refdata() + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much); }
# 468 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_dispose(__a);
# 469 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_data(__r->_M_refdata());
# 470 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} else {
# 471 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__how_much && (__len1 != __len2))
# 472 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 474 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_move((_M_data() + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much);
# 476 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} }
# 477 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_set_length_and_sharable(__new_size);
# 478 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 480 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> void
# 483 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::reserve(size_type __res)
# 484 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 485 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__res != this->capacity()) || (*this->_M_rep())._M_is_shared())
# 486 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 488 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__res < this->size()) {
# 489 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__res = this->size(); }
# 490 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const allocator_type __a = (this->get_allocator());
# 491 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _CharT *__tmp = (*this->_M_rep())._M_clone(__a, __res - this->size());
# 492 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_dispose(__a);
# 493 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_data(__tmp);
# 494 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 495 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 497 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> void
# 500 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::swap(std::basic_string< _CharT, _Traits, _Alloc> &__s)
# 501 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 502 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((*this->_M_rep())._M_is_leaked()) {
# 503 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this->_M_rep())._M_set_sharable(); }
# 504 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((*__s._M_rep())._M_is_leaked()) {
# 505 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*__s._M_rep())._M_set_sharable(); }
# 506 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (this->get_allocator() == __s.get_allocator())
# 507 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 508 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _CharT *__tmp = (_M_data());
# 509 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_data(((&__s)->_M_data()));
# 510 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
((&__s)->_M_data(__tmp));
# 511 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} else
# 514 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 515 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const std::basic_string< _CharT, _Traits, _Alloc> __tmp1(this->_M_ibegin(), this->_M_iend(), __s.get_allocator());
# 517 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const std::basic_string< _CharT, _Traits, _Alloc> __tmp2(__s._M_ibegin(), __s._M_iend(), this->get_allocator());
# 519 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(*this) = __tmp2;
# 520 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__s = __tmp1;
# 521 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 522 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 524 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> struct basic_string< _CharT, _Traits, _Alloc> ::_Rep *
# 527 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_create(size_type __capacity, size_type __old_capacity, const _Alloc &
# 528 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__alloc)
# 529 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 532 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__capacity > _S_max_size) {
# 533 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__throw_length_error("basic_string::_S_create"); }
# 558 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __pagesize = 4096;
# 559 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __malloc_header_size = ((4) * sizeof(void *));
# 567 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__capacity > __old_capacity) && (__capacity < 2 * __old_capacity)) {
# 568 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__capacity = 2 * __old_capacity; }
# 573 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto size_type __size = ((__capacity + 1) * sizeof(_CharT) + sizeof(_Rep));
# 575 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __adj_size = (__size + __malloc_header_size);
# 576 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__adj_size > __pagesize) && (__capacity > __old_capacity))
# 577 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 578 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __extra = (__pagesize - __adj_size % __pagesize);
# 579 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__capacity += __extra / sizeof(_CharT);
# 581 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__capacity > _S_max_size) {
# 582 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__capacity = _S_max_size; }
# 583 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
# 584 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 588 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto void *__place = ((((_Raw_bytes_alloc)(__alloc)).allocate(__size)));
# 589 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _Rep *__p = (new (__place) _Rep);
# 590 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(__p->_M_capacity) = __capacity;
# 591 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __p;
# 592 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 594 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> _CharT *
# 597 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_M_clone(const _Alloc &__alloc, size_type __res)
# 598 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 600 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __requested_cap = ((this->_M_length) + __res);
# 601 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto _Rep *__r = (_S_create(__requested_cap, this->_M_capacity, __alloc));
# 603 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (this->_M_length) {
# 604 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(__r->_M_refdata(), this->_M_refdata(), this->_M_length); }
# 606 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r->_M_set_length_and_sharable(this->_M_length);
# 607 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __r->_M_refdata();
# 608 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 610 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> void
# 613 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::resize(size_type __n, _CharT __c)
# 614 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 615 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __size = (this->size());
# 616 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check_length(__size, __n, "basic_string::resize");
# 617 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__size < __n) {
# 618 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(this->append(__n - __size, __c)); } else {
# 619 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__n < __size) {
# 620 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(this->erase(__n)); } }
# 622 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 624 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc>
# 625 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _InputIterator> basic_string< _CharT, _Traits, _Alloc> &
# 628 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, _InputIterator
# 629 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__k2, __false_type)
# 630 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 631 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const std::basic_string< _CharT, _Traits, _Alloc> __s(__k1, __k2);
# 632 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __n1 = (__i2 - __i1);
# 633 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
# 634 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return this->_M_replace_safe(__i1 - this->_M_ibegin(), __n1, (__s._M_data()), __s.size());
# 636 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 638 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 641 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT
# 642 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__c)
# 643 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 644 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
# 645 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_mutate(__pos1, __n1, __n2);
# 646 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__n2) {
# 647 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_assign(_M_data() + __pos1, __n2, __c); }
# 648 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 649 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 651 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc> &
# 654 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_M_replace_safe(size_type __pos1, size_type __n1, const _CharT *__s, size_type
# 655 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n2)
# 656 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 657 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_mutate(__pos1, __n1, __n2);
# 658 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__n2) {
# 659 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(_M_data() + __pos1, __s, __n2); }
# 660 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return *this;
# 661 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 663 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>
# 665 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
operator+(const _CharT *__lhs, const basic_string< _CharT, _Traits, _Alloc> &
# 666 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__rhs)
# 667 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 668 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 669 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
typedef basic_string< _CharT, _Traits, _Alloc> __string_type;
# 670 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type;
# 671 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const __size_type __len = (_Traits::length(__lhs));
# 672 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto __string_type __str;
# 673 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(__str.reserve(__len + (__rhs.size())));
# 674 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(__str.append(__lhs, __len));
# 675 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(__str.append(__rhs));
# 676 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __str;
# 677 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 679 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_string< _CharT, _Traits, _Alloc>
# 681 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
operator+(_CharT __lhs, const basic_string< _CharT, _Traits, _Alloc> &__rhs)
# 682 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 683 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
typedef basic_string< _CharT, _Traits, _Alloc> __string_type;
# 684 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type;
# 685 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto __string_type __str;
# 686 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const __size_type __len = ((__rhs.size()));
# 687 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(__str.reserve(__len + 1));
# 688 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(__str.append(((__size_type)(1)), __lhs));
# 689 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
(__str.append(__rhs));
# 690 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __str;
# 691 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 693 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 696 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::copy(_CharT *__s, size_type __n, size_type __pos) const
# 697 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 698 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check(__pos, "basic_string::copy");
# 699 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n = this->_M_limit(__pos, __n);
# 700 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 701 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__n) {
# 702 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
_M_copy(__s, _M_data() + __pos, __n); }
# 704 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __n;
# 705 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 707 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 710 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::find(const _CharT *__s, size_type __pos, size_type __n) const
# 711 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 712 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 713 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto size_type __ret = npos;
# 714 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __size = (this->size());
# 715 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__pos + __n <= __size)
# 716 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 717 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const _CharT *__data = (_M_data());
# 718 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const _CharT *__p = (std::search(__data + __pos, __data + __size, __s, __s + __n, _Traits::eq));
# 720 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if ((__p != __data + __size) || (__n == 0)) {
# 721 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__ret = __p - __data; }
# 722 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 723 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __ret;
# 724 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 726 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 729 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::find(_CharT __c, size_type __pos) const
# 730 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 731 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto size_type __ret = npos;
# 732 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __size = (this->size());
# 733 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__pos < __size)
# 734 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 735 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const _CharT *__data = (_M_data());
# 736 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __n = (__size - __pos);
# 737 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const _CharT *__p = (_Traits::find(__data + __pos, __n, __c));
# 738 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__p) {
# 739 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__ret = __p - __data; }
# 740 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 741 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __ret;
# 742 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 744 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 747 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::rfind(const _CharT *__s, size_type __pos, size_type __n) const
# 748 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 749 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 750 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __size = (this->size());
# 751 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__n <= __size)
# 752 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 753 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__pos = std::min(((size_type)(__size - __n)), __pos);
# 754 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const _CharT *__data = (_M_data());
# 755 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
do
# 756 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 757 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (_Traits::compare(__data + __pos, __s, __n) == 0) {
# 758 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __pos; }
# 759 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} while (__pos-- > 0);
# 761 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 762 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return npos;
# 763 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 765 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 768 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::rfind(_CharT __c, size_type __pos) const
# 769 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 770 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto size_type __size = this->size();
# 771 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__size)
# 772 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 773 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (--__size > __pos) {
# 774 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__size = __pos; }
# 775 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
for (++__size; __size-- > 0;) {
# 776 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (_Traits::eq((_M_data())[__size], __c)) {
# 777 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __size; } }
# 778 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 779 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return npos;
# 780 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 782 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 785 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::find_first_of(const _CharT *__s, size_type __pos, size_type __n) const
# 786 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 787 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 788 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
for (; __n && (__pos < this->size()); ++__pos)
# 789 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 790 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const _CharT *__p = (_Traits::find(__s, __n, (_M_data())[__pos]));
# 791 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__p) {
# 792 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __pos; }
# 793 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 794 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return npos;
# 795 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 797 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 800 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::find_last_of(const _CharT *__s, size_type __pos, size_type __n) const
# 801 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 802 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 803 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto size_type __size = this->size();
# 804 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__size && __n)
# 805 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 806 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (--__size > __pos) {
# 807 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__size = __pos; }
# 808 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
do
# 809 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 810 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (_Traits::find(__s, __n, (_M_data())[__size])) {
# 811 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __size; }
# 812 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} while (__size-- != 0);
# 814 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 815 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return npos;
# 816 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 818 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 821 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const
# 822 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 823 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 824 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
for (; __pos < this->size(); ++__pos) {
# 825 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (!(_Traits::find(__s, __n, (_M_data())[__pos]))) {
# 826 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __pos; } }
# 827 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return npos;
# 828 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 830 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 833 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const
# 834 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 835 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
for (; __pos < this->size(); ++__pos) {
# 836 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (!(_Traits::eq((_M_data())[__pos], __c))) {
# 837 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __pos; } }
# 838 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return npos;
# 839 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 841 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 844 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const
# 845 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 846 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 847 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto size_type __size = this->size();
# 848 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__size)
# 849 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 850 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (--__size > __pos) {
# 851 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__size = __pos; }
# 852 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
do
# 853 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 854 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (!(_Traits::find(__s, __n, (_M_data())[__size]))) {
# 855 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __size; }
# 856 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} while (__size--);
# 858 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 859 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return npos;
# 860 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 862 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 865 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const
# 866 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 867 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto size_type __size = this->size();
# 868 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (__size)
# 869 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 870 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (--__size > __pos) {
# 871 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__size = __pos; }
# 872 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
do
# 873 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 874 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (!(_Traits::eq((_M_data())[__size], __c))) {
# 875 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __size; }
# 876 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
} while (__size--);
# 878 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 879 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return npos;
# 880 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 882 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> int
# 885 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n, const std::basic_string< _CharT, _Traits, _Alloc> &__str) const
# 886 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 887 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check(__pos, "basic_string::compare");
# 888 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n = this->_M_limit(__pos, __n);
# 889 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __osize = (__str.size());
# 890 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __len = (std::min(__n, __osize));
# 891 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto int __r = (_Traits::compare(_M_data() + __pos, __str.data(), __len));
# 892 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (!(__r)) {
# 893 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r = __n - __osize; }
# 894 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __r;
# 895 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 897 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> int
# 900 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos1, size_type __n1, const std::basic_string< _CharT, _Traits, _Alloc> &__str, size_type
# 901 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__pos2, size_type __n2) const
# 902 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 903 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check(__pos1, "basic_string::compare");
# 904 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__str._M_check(__pos2, "basic_string::compare");
# 905 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n1 = this->_M_limit(__pos1, __n1);
# 906 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n2 = __str._M_limit(__pos2, __n2);
# 907 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __len = (std::min(__n1, __n2));
# 908 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto int __r = (_Traits::compare(_M_data() + __pos1, __str.data() + __pos2, __len));
# 910 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (!(__r)) {
# 911 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r = __n1 - __n2; }
# 912 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __r;
# 913 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 915 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> int
# 918 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::compare(const _CharT *__s) const
# 919 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 920 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 921 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __size = (this->size());
# 922 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __osize = (_Traits::length(__s));
# 923 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __len = (std::min(__size, __osize));
# 924 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto int __r = (_Traits::compare(_M_data(), __s, __len));
# 925 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (!(__r)) {
# 926 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r = __size - __osize; }
# 927 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __r;
# 928 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 930 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> int
# 933 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s) const
# 934 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 935 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 936 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check(__pos, "basic_string::compare");
# 937 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n1 = this->_M_limit(__pos, __n1);
# 938 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __osize = (_Traits::length(__s));
# 939 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __len = (std::min(__n1, __osize));
# 940 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto int __r = (_Traits::compare(_M_data() + __pos, __s, __len));
# 941 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (!(__r)) {
# 942 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r = __n1 - __osize; }
# 943 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __r;
# 944 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 946 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> int
# 949 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s, size_type
# 950 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n2) const
# 951 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
{
# 952 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
;
# 953 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
this->_M_check(__pos, "basic_string::compare");
# 954 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__n1 = this->_M_limit(__pos, __n1);
# 955 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto const size_type __len = (std::min(__n1, __n2));
# 956 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
auto int __r = (_Traits::compare(_M_data() + __pos, __s, __len));
# 957 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
if (!(__r)) {
# 958 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
__r = __n1 - __n2; }
# 959 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
return __r;
# 960 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 966 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template class basic_string< char, char_traits< char> , allocator< char> > ;
# 967 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 970 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const basic_string< char, char_traits< char> , allocator< char> > &);
# 973 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &, char);
# 976 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 981 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template class basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 982 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 985 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 988 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &, wchar_t);
# 991 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 996 "/usr/include/c++/4.0.0/bits/basic_string.tcc" 3
}
# 51 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
namespace std {
# 67 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
class locale {
# 72 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
public: typedef int category;
# 75 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
class facet;
# 76 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
class id;
# 77 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
class _Impl;
# 79 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
friend class facet;
# 80 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
friend class _Impl;
# 82 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet> friend inline bool has_facet(const locale &) throw();
# 86 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet> friend inline const _Facet &use_facet(const locale &);
# 90 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Cache> friend struct __use_cache;
# 105 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const category none = (0);
# 106 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const category ctype = (1L << 0);
# 107 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const category numeric = (1L << 1);
# 108 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const category collate = (1L << 2);
# 109 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const category time = (1L << 3);
# 110 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const category monetary = (1L << 4);
# 111 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const category messages = (1L << 5);
# 112 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const category all = ((((((ctype) | (numeric)) | (collate)) | (time)) | (monetary)) | (messages));
# 124 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
locale() throw();
# 133 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
locale(const locale &) throw();
# 144 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
explicit locale(const char *);
# 158 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
locale(const locale &, const char *, category);
# 171 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
locale(const locale &, const locale &, category);
# 183 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet> locale(const locale &, _Facet *);
# 187 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
~locale() throw();
# 198 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
const locale &operator=(const locale &) throw();
# 212 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet> locale combine(const locale &) const;
# 222 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
string name() const;
# 232 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
bool operator==(const locale &) const throw();
# 241 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
bool operator!=(const locale &__other) const throw()
# 242 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ return !this->operator==(__other); }
# 259 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Char, class _Traits, class _Alloc> bool operator()(const basic_string< _Char, _Traits, _Alloc> &, const basic_string< _Char, _Traits, _Alloc> &) const;
# 276 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static locale global(const locale &);
# 282 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const locale &classic();
# 286 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
private: _Impl *_M_impl;
# 289 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static _Impl *_S_classic;
# 292 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static _Impl *_S_global;
# 298 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const char *const *const _S_categories;
# 310 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const size_t _S_categories_size = (6 + 0);
# 313 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static __gthread_once_t _S_once;
# 317 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
explicit locale(_Impl *) throw();
# 320 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static void _S_initialize();
# 323 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static void _S_initialize_once();
# 326 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static category _S_normalize_category(category);
# 329 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void _M_coalesce(const locale &, const locale &, category);
# 330 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
};
# 343 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
class locale::facet {
# 346 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
friend class locale;
# 347 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
friend class locale::_Impl;
# 349 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
mutable _Atomic_word _M_refcount;
# 352 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static __c_locale _S_c_locale;
# 355 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const char _S_c_name[2];
# 358 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static __gthread_once_t _S_once;
# 362 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static void _S_initialize_once();
# 375 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = (0)) throw() : _M_refcount(((__refs) ? 1 : 0))
# 376 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ }
# 380 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
virtual ~facet();
# 383 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static void _S_create_c_locale(__c_locale &, const char *, __c_locale = 0);
# 387 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static __c_locale _S_clone_c_locale(__c_locale &);
# 390 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static void _S_destroy_c_locale(__c_locale &);
# 395 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static __c_locale _S_get_c_locale();
# 398 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const char *_S_get_c_name();
# 402 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
private: void _M_add_reference() const throw()
# 403 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ __gnu_cxx::__atomic_add(&(this->_M_refcount), 1); }
# 406 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void _M_remove_reference() const throw()
# 407 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{
# 408 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
if (__gnu_cxx::__exchange_and_add(&(this->_M_refcount), -1) == 1)
# 409 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{
# 410 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
try
# 411 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ delete this; }
# 412 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
catch (...)
# 413 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ }
# 414 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
}
# 415 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
}
# 417 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
facet(const locale::facet &);
# 420 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
locale::facet &operator=(const locale::facet &);
# 421 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
};
# 434 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
class locale::id {
# 437 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
friend class locale;
# 438 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
friend class locale::_Impl;
# 440 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet> friend inline const _Facet &use_facet(const locale &);
# 444 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet> friend inline bool has_facet(const locale &) throw();
# 451 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
mutable size_t _M_index;
# 454 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static _Atomic_word _S_refcount;
# 457 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void operator=(const locale::id &);
# 459 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
id(const locale::id &);
# 465 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
public: id() { }
# 468 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
size_t _M_id() const;
# 469 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
};
# 473 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
class locale::_Impl {
# 477 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
friend class locale;
# 478 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
friend class locale::facet;
# 480 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet> friend inline bool has_facet(const locale &) throw();
# 484 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet> friend inline const _Facet &use_facet(const locale &);
# 488 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Cache> friend struct __use_cache;
# 493 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
_Atomic_word _M_refcount;
# 494 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
const locale::facet **_M_facets;
# 495 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
size_t _M_facets_size;
# 496 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
const locale::facet **_M_caches;
# 497 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
char **_M_names;
# 498 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const locale::id *const _S_id_ctype[];
# 499 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const locale::id *const _S_id_numeric[];
# 500 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const locale::id *const _S_id_collate[];
# 501 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const locale::id *const _S_id_time[];
# 502 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const locale::id *const _S_id_monetary[];
# 503 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const locale::id *const _S_id_messages[];
# 504 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
static const locale::id *const *const _S_facet_categories[];
# 507 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void _M_add_reference() throw()
# 508 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ __gnu_cxx::__atomic_add(&(this->_M_refcount), 1); }
# 511 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void _M_remove_reference() throw()
# 512 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{
# 513 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
if (__gnu_cxx::__exchange_and_add(&(this->_M_refcount), -1) == 1)
# 514 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{
# 515 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
try
# 516 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ delete this; }
# 517 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
catch (...)
# 518 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ }
# 519 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
}
# 520 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
}
# 522 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
_Impl(const locale::_Impl &, size_t);
# 523 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
_Impl(const char *, size_t);
# 524 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
_Impl(size_t) throw();
# 526 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
~_Impl() throw();
# 528 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
_Impl(const locale::_Impl &);
# 531 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void operator=(const locale::_Impl &);
# 534 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
bool _M_check_same_name()
# 535 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{
# 536 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
auto bool __ret = true;
# 537 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
if ((this->_M_names)[1]) {
# 539 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
for (size_t __i = (0); __ret && (__i < ((locale::_S_categories_size) - (1))); ++__i) {
# 540 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
__ret = std::strcmp((this->_M_names)[__i], (this->_M_names)[__i + (1)]) == 0; } }
# 541 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
return __ret;
# 542 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
}
# 545 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void _M_replace_categories(const locale::_Impl *, locale::category);
# 548 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void _M_replace_category(const locale::_Impl *, const locale::id *const *);
# 551 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void _M_replace_facet(const locale::_Impl *, const locale::id *);
# 554 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void _M_install_facet(const locale::id *, const locale::facet *);
# 556 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet> void
# 557 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
_M_init_facet(_Facet *
# 558 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
__facet)
# 559 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ this->_M_install_facet(&_Facet::id, __facet); }
# 562 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
void _M_install_cache(const locale::facet *__cache, size_t __index) throw()
# 563 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{
# 564 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
__cache->_M_add_reference();
# 565 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
((this->_M_caches)[__index]) = __cache;
# 566 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
}
# 567 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
};
# 569 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
template<class _Facet>
# 570 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
locale::locale(const locale &__other, _Facet *__f)
# 571 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{
# 572 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
(this->_M_impl) = (new _Impl(*(__other._M_impl), 1));
# 574 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
try
# 575 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{ (*(this->_M_impl))._M_install_facet(&_Facet::id, __f); }
# 576 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
catch (...)
# 577 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
{
# 578 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
(*(this->_M_impl))._M_remove_reference();
# 579 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
throw;
# 580 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
}
# 581 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
delete [] (((*(this->_M_impl))._M_names)[0]);
# 582 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
(((*(this->_M_impl))._M_names)[0]) = (0);
# 583 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
}
# 584 "/usr/include/c++/4.0.0/bits/locale_classes.h" 3
}
# 49 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
namespace std {
# 55 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
enum _Ios_Fmtflags {
# 57 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_boolalpha = 1,
# 58 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_dec,
# 59 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_fixed = 4,
# 60 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_hex = 8,
# 61 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_internal = 16,
# 62 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_left = 32,
# 63 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_oct = 64,
# 64 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_right = 128,
# 65 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_scientific = 256,
# 66 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_showbase = 512,
# 67 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_showpoint = 1024,
# 68 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_showpos = 2048,
# 69 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_skipws = 4096,
# 70 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_unitbuf = 8192,
# 71 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_uppercase = 16384,
# 72 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_adjustfield = 176,
# 73 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_basefield = 74,
# 74 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_floatfield = 260,
# 75 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_ios_fmtflags_end = 65536
# 76 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 79 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 80 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 83 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 84 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 87 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 88 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 91 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 92 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __a = ((__a) | __b); }
# 95 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 96 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __a = ((__a) & __b); }
# 99 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 100 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __a = ((__a) ^ __b); }
# 103 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Fmtflags operator~(_Ios_Fmtflags __a)
# 104 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); }
# 107 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
enum _Ios_Openmode {
# 109 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_app = 1,
# 110 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_ate,
# 111 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_bin = 4,
# 112 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_in = 8,
# 113 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_out = 16,
# 114 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_trunc = 32,
# 115 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_ios_openmode_end = 65536
# 116 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 119 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b)
# 120 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 123 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b)
# 124 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 127 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b)
# 128 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 131 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 132 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __a = ((__a) | __b); }
# 135 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 136 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __a = ((__a) & __b); }
# 139 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 140 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __a = ((__a) ^ __b); }
# 143 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Openmode operator~(_Ios_Openmode __a)
# 144 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); }
# 147 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
enum _Ios_Iostate {
# 149 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_goodbit,
# 150 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_badbit,
# 151 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_eofbit,
# 152 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_failbit = 4,
# 153 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_ios_iostate_end = 65536
# 154 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 157 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b)
# 158 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 161 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b)
# 162 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 165 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b)
# 166 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 169 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 170 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __a = ((__a) | __b); }
# 173 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 174 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __a = ((__a) & __b); }
# 177 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 178 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __a = ((__a) ^ __b); }
# 181 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline _Ios_Iostate operator~(_Ios_Iostate __a)
# 182 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); }
# 184 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
enum _Ios_Seekdir {
# 186 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_beg,
# 187 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_cur,
# 188 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_end,
# 189 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_S_ios_seekdir_end = 65536
# 190 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 201 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
class ios_base {
# 207 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
public: class failure : public exception {
# 213 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
public: explicit failure(const string &) throw();
# 218 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
virtual ~failure() throw();
# 221 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
virtual const char *what() const throw();
# 224 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
private: string _M_msg;
# 225 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 253 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags;
# 256 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags boolalpha = ((fmtflags)__ios_flags::_S_boolalpha);
# 259 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags dec = ((fmtflags)__ios_flags::_S_dec);
# 262 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags fixed = ((fmtflags)__ios_flags::_S_fixed);
# 265 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags hex = ((fmtflags)__ios_flags::_S_hex);
# 270 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags internal = ((fmtflags)__ios_flags::_S_internal);
# 274 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags left = ((fmtflags)__ios_flags::_S_left);
# 277 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags oct = ((fmtflags)__ios_flags::_S_oct);
# 281 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags right = ((fmtflags)__ios_flags::_S_right);
# 284 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags scientific = ((fmtflags)__ios_flags::_S_scientific);
# 288 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags showbase = ((fmtflags)__ios_flags::_S_showbase);
# 292 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags showpoint = ((fmtflags)__ios_flags::_S_showpoint);
# 295 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags showpos = ((fmtflags)__ios_flags::_S_showpos);
# 298 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags skipws = ((fmtflags)__ios_flags::_S_skipws);
# 301 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags unitbuf = ((fmtflags)__ios_flags::_S_unitbuf);
# 305 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags uppercase = ((fmtflags)__ios_flags::_S_uppercase);
# 308 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags adjustfield = ((fmtflags)__ios_flags::_S_adjustfield);
# 311 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags basefield = ((fmtflags)__ios_flags::_S_basefield);
# 314 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const fmtflags floatfield = ((fmtflags)__ios_flags::_S_floatfield);
# 328 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef _Ios_Iostate iostate;
# 332 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const iostate badbit = ((iostate)__ios_flags::_S_badbit);
# 335 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const iostate eofbit = ((iostate)__ios_flags::_S_eofbit);
# 340 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const iostate failbit = ((iostate)__ios_flags::_S_failbit);
# 343 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const iostate goodbit = ((iostate)0);
# 359 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef _Ios_Openmode openmode;
# 362 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const openmode app = ((openmode)__ios_flags::_S_app);
# 365 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const openmode ate = ((openmode)__ios_flags::_S_ate);
# 371 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const openmode binary = ((openmode)__ios_flags::_S_bin);
# 374 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const openmode in = ((openmode)__ios_flags::_S_in);
# 377 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const openmode out = ((openmode)__ios_flags::_S_out);
# 380 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const openmode trunc = ((openmode)__ios_flags::_S_trunc);
# 392 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir;
# 395 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const seekdir beg = ((seekdir)0);
# 398 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const seekdir cur = ((seekdir)1);
# 401 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const seekdir end = ((seekdir)2);
# 404 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef int io_state;
# 405 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef int open_mode;
# 406 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef int seek_dir;
# 408 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef std::streampos streampos;
# 409 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef std::streamoff streamoff;
# 418 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
enum event {
# 420 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
erase_event,
# 421 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
imbue_event,
# 422 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
copyfmt_event
# 423 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 435 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
typedef void (*event_callback)(event, ios_base &, int);
# 448 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
void register_callback(event_callback, int);
# 457 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
protected: streamsize _M_precision;
# 458 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
streamsize _M_width;
# 459 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
fmtflags _M_flags;
# 460 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
iostate _M_exception;
# 461 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
iostate _M_streambuf_state;
# 466 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
struct _Callback_list {
# 469 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_Callback_list *_M_next;
# 470 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
event_callback _M_fn;
# 471 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
int _M_index;
# 472 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_Atomic_word _M_refcount;
# 474 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 475 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount((0))
# 476 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ }
# 479 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
void _M_add_reference() { __gnu_cxx::__atomic_add(&(this->_M_refcount), 1); }
# 483 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
int _M_remove_reference()
# 484 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{ return __gnu_cxx::__exchange_and_add(&(this->_M_refcount), -1); }
# 485 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 487 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_Callback_list *_M_callbacks;
# 490 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
void _M_call_callbacks(event) throw();
# 493 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
void _M_dispose_callbacks();
# 496 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
struct _Words {
# 498 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
void *_M_pword;
# 499 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
long _M_iword;
# 500 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_Words() : _M_pword((0)), _M_iword((0)) { }
# 501 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 504 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_Words _M_word_zero;
# 508 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static const int _S_local_word_size = 8;
# 509 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_Words _M_local_word[_S_local_word_size];
# 512 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
int _M_word_size;
# 513 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_Words *_M_word;
# 516 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
_Words &_M_grow_words(int, bool);
# 519 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
locale _M_ios_locale;
# 522 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
void _M_init();
# 530 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
public: class Init {
# 532 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
friend class ios_base;
# 534 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
public: Init();
# 535 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
~Init();
# 538 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
private: static _Atomic_word _S_refcount;
# 539 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static bool _S_synced_with_stdio;
# 540 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 548 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
fmtflags flags() const { return this->_M_flags; }
# 558 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl)
# 559 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 560 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
auto fmtflags __old = (this->_M_flags);
# 561 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
(this->_M_flags) = __fmtfl;
# 562 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __old;
# 563 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 574 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl)
# 575 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 576 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
auto fmtflags __old = (this->_M_flags);
# 577 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
((this->_M_flags) |= __fmtfl);
# 578 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __old;
# 579 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 591 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask)
# 592 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 593 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
auto fmtflags __old = (this->_M_flags);
# 594 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
((this->_M_flags) &= (~__mask));
# 595 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
((this->_M_flags) |= (__fmtfl & __mask));
# 596 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __old;
# 597 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 606 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
void unsetf(fmtflags __mask) { ((this->_M_flags) &= (~__mask)); }
# 618 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
streamsize precision() const { return this->_M_precision; }
# 626 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
streamsize precision(streamsize __prec)
# 627 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 628 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
auto streamsize __old = (this->_M_precision);
# 629 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
(this->_M_precision) = __prec;
# 630 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __old;
# 631 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 640 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
streamsize width() const { return this->_M_width; }
# 648 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
streamsize width(streamsize __wide)
# 649 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 650 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
auto streamsize __old = (this->_M_width);
# 651 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
(this->_M_width) = __wide;
# 652 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __old;
# 653 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 667 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static bool sync_with_stdio(bool = true);
# 679 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
locale imbue(const locale &);
# 690 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
locale getloc() const { return this->_M_ios_locale; }
# 700 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
const locale &_M_getloc() const { return this->_M_ios_locale; }
# 718 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
static int xalloc() throw();
# 734 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
long &iword(int __ix)
# 735 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 736 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
auto _Words &__word = ((__ix < this->_M_word_size) ? ((this->_M_word)[__ix]) : this->_M_grow_words(__ix, true));
# 738 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __word._M_iword;
# 739 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 755 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
void *&pword(int __ix)
# 756 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 757 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
auto _Words &__word = ((__ix < this->_M_word_size) ? ((this->_M_word)[__ix]) : this->_M_grow_words(__ix, false));
# 759 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __word._M_pword;
# 760 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 771 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
virtual ~ios_base();
# 774 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
protected: ios_base();
# 779 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
private: ios_base(const ios_base &);
# 782 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
ios_base &operator=(const ios_base &);
# 783 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
};
# 788 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &boolalpha(ios_base &__base)
# 789 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 790 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::boolalpha);
# 791 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 792 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 796 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &noboolalpha(ios_base &__base)
# 797 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 798 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.unsetf(ios_base::boolalpha);
# 799 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 800 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 804 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &showbase(ios_base &__base)
# 805 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 806 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::showbase);
# 807 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 808 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 812 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &noshowbase(ios_base &__base)
# 813 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 814 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.unsetf(ios_base::showbase);
# 815 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 816 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 820 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &showpoint(ios_base &__base)
# 821 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 822 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::showpoint);
# 823 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 824 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 828 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &noshowpoint(ios_base &__base)
# 829 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 830 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.unsetf(ios_base::showpoint);
# 831 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 832 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 836 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &showpos(ios_base &__base)
# 837 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 838 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::showpos);
# 839 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 840 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 844 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &noshowpos(ios_base &__base)
# 845 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 846 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.unsetf(ios_base::showpos);
# 847 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 848 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 852 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &skipws(ios_base &__base)
# 853 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 854 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::skipws);
# 855 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 856 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 860 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &noskipws(ios_base &__base)
# 861 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 862 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.unsetf(ios_base::skipws);
# 863 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 864 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 868 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &uppercase(ios_base &__base)
# 869 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 870 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::uppercase);
# 871 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 872 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 876 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &nouppercase(ios_base &__base)
# 877 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 878 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.unsetf(ios_base::uppercase);
# 879 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 880 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 884 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &unitbuf(ios_base &__base)
# 885 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 886 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::unitbuf);
# 887 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 888 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 892 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &nounitbuf(ios_base &__base)
# 893 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 894 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.unsetf(ios_base::unitbuf);
# 895 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 896 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 901 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &internal(ios_base &__base)
# 902 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 903 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::internal, ios_base::adjustfield);
# 904 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 905 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 909 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &left(ios_base &__base)
# 910 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 911 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::left, ios_base::adjustfield);
# 912 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 913 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 917 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &right(ios_base &__base)
# 918 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 919 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::right, ios_base::adjustfield);
# 920 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 921 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 926 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &dec(ios_base &__base)
# 927 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 928 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::dec, ios_base::basefield);
# 929 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 930 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 934 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &hex(ios_base &__base)
# 935 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 936 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::hex, ios_base::basefield);
# 937 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 938 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 942 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &oct(ios_base &__base)
# 943 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 944 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::oct, ios_base::basefield);
# 945 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 946 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 951 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &fixed(ios_base &__base)
# 952 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 953 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::fixed, ios_base::floatfield);
# 954 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 955 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 959 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
inline ios_base &scientific(ios_base &__base)
# 960 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
{
# 961 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
__base.setf(ios_base::scientific, ios_base::floatfield);
# 962 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
return __base;
# 963 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 964 "/usr/include/c++/4.0.0/bits/ios_base.h" 3
}
# 49 "/usr/include/c++/4.0.0/streambuf" 3
namespace std {
# 56 "/usr/include/c++/4.0.0/streambuf" 3
template<class _CharT, class _Traits> extern streamsize __copy_streambufs(basic_streambuf< _CharT, _Traits> *, basic_streambuf< _CharT, _Traits> *);
# 121 "/usr/include/c++/4.0.0/streambuf" 3
template<class _CharT, class _Traits>
# 122 "/usr/include/c++/4.0.0/streambuf" 3
class basic_streambuf {
# 131 "/usr/include/c++/4.0.0/streambuf" 3
public: typedef _CharT char_type;
# 132 "/usr/include/c++/4.0.0/streambuf" 3
typedef _Traits traits_type;
# 133 "/usr/include/c++/4.0.0/streambuf" 3
typedef typename _Traits::int_type int_type;
# 134 "/usr/include/c++/4.0.0/streambuf" 3
typedef typename _Traits::pos_type pos_type;
# 135 "/usr/include/c++/4.0.0/streambuf" 3
typedef typename _Traits::off_type off_type;
# 144 "/usr/include/c++/4.0.0/streambuf" 3
typedef std::basic_streambuf< _CharT, _Traits> __streambuf_type;
# 147 "/usr/include/c++/4.0.0/streambuf" 3
friend class basic_ios< _CharT, _Traits> ;
# 148 "/usr/include/c++/4.0.0/streambuf" 3
friend class basic_istream< _CharT, _Traits> ;
# 149 "/usr/include/c++/4.0.0/streambuf" 3
friend class basic_ostream< _CharT, _Traits> ;
# 150 "/usr/include/c++/4.0.0/streambuf" 3
friend class istreambuf_iterator< _CharT, _Traits> ;
# 151 "/usr/include/c++/4.0.0/streambuf" 3
friend class ostreambuf_iterator< _CharT, _Traits> ;
# 154 "/usr/include/c++/4.0.0/streambuf" 3
friend streamsize __copy_streambufs(__streambuf_type *, __streambuf_type *);
# 157 "/usr/include/c++/4.0.0/streambuf" 3
template<class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2> &getline(basic_istream< _CharT2, _Traits2> &, basic_string< _CharT2, _Traits2, _Alloc> &, _CharT2);
# 173 "/usr/include/c++/4.0.0/streambuf" 3
protected: char_type *_M_in_beg;
# 174 "/usr/include/c++/4.0.0/streambuf" 3
char_type *_M_in_cur;
# 175 "/usr/include/c++/4.0.0/streambuf" 3
char_type *_M_in_end;
# 176 "/usr/include/c++/4.0.0/streambuf" 3
char_type *_M_out_beg;
# 177 "/usr/include/c++/4.0.0/streambuf" 3
char_type *_M_out_cur;
# 178 "/usr/include/c++/4.0.0/streambuf" 3
char_type *_M_out_end;
# 185 "/usr/include/c++/4.0.0/streambuf" 3
locale _M_buf_locale;
# 190 "/usr/include/c++/4.0.0/streambuf" 3
public: virtual ~basic_streambuf()
# 191 "/usr/include/c++/4.0.0/streambuf" 3
{ }
# 202 "/usr/include/c++/4.0.0/streambuf" 3
locale pubimbue(const locale &__loc)
# 203 "/usr/include/c++/4.0.0/streambuf" 3
{
# 204 "/usr/include/c++/4.0.0/streambuf" 3
auto locale __tmp(this->getloc());
# 205 "/usr/include/c++/4.0.0/streambuf" 3
this->imbue(__loc);
# 206 "/usr/include/c++/4.0.0/streambuf" 3
((this->_M_buf_locale) = __loc);
# 207 "/usr/include/c++/4.0.0/streambuf" 3
return __tmp;
# 208 "/usr/include/c++/4.0.0/streambuf" 3
}
# 219 "/usr/include/c++/4.0.0/streambuf" 3
locale getloc() const
# 220 "/usr/include/c++/4.0.0/streambuf" 3
{ return this->_M_buf_locale; }
# 232 "/usr/include/c++/4.0.0/streambuf" 3
__streambuf_type *pubsetbuf(char_type *__s, streamsize __n)
# 233 "/usr/include/c++/4.0.0/streambuf" 3
{ return this->setbuf(__s, __n); }
# 236 "/usr/include/c++/4.0.0/streambuf" 3
pos_type pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode
# 237 "/usr/include/c++/4.0.0/streambuf" 3
__mode = (_S_in | _S_out))
# 238 "/usr/include/c++/4.0.0/streambuf" 3
{ return this->seekoff(__off, __way, __mode); }
# 241 "/usr/include/c++/4.0.0/streambuf" 3
pos_type pubseekpos(pos_type __sp, ios_base::openmode
# 242 "/usr/include/c++/4.0.0/streambuf" 3
__mode = (_S_in | _S_out))
# 243 "/usr/include/c++/4.0.0/streambuf" 3
{ return this->seekpos(__sp, __mode); }
# 246 "/usr/include/c++/4.0.0/streambuf" 3
int pubsync() { return this->sync(); }
# 259 "/usr/include/c++/4.0.0/streambuf" 3
streamsize in_avail()
# 260 "/usr/include/c++/4.0.0/streambuf" 3
{
# 261 "/usr/include/c++/4.0.0/streambuf" 3
auto const streamsize __ret = (this->egptr() - this->gptr());
# 262 "/usr/include/c++/4.0.0/streambuf" 3
return (__ret) ? __ret : this->showmanyc();
# 263 "/usr/include/c++/4.0.0/streambuf" 3
}
# 273 "/usr/include/c++/4.0.0/streambuf" 3
int_type snextc()
# 274 "/usr/include/c++/4.0.0/streambuf" 3
{
# 275 "/usr/include/c++/4.0.0/streambuf" 3
auto int_type __ret = (_Traits::eof());
# 276 "/usr/include/c++/4.0.0/streambuf" 3
if (__builtin_expect(!(_Traits::eq_int_type(this->sbumpc(), __ret)), true)) {
# 278 "/usr/include/c++/4.0.0/streambuf" 3
__ret = this->sgetc(); }
# 279 "/usr/include/c++/4.0.0/streambuf" 3
return __ret;
# 280 "/usr/include/c++/4.0.0/streambuf" 3
}
# 291 "/usr/include/c++/4.0.0/streambuf" 3
int_type sbumpc()
# 292 "/usr/include/c++/4.0.0/streambuf" 3
{
# 293 "/usr/include/c++/4.0.0/streambuf" 3
auto int_type __ret;
# 294 "/usr/include/c++/4.0.0/streambuf" 3
if (__builtin_expect(this->gptr() < this->egptr(), true))
# 295 "/usr/include/c++/4.0.0/streambuf" 3
{
# 296 "/usr/include/c++/4.0.0/streambuf" 3
__ret = _Traits::to_int_type(*this->gptr());
# 297 "/usr/include/c++/4.0.0/streambuf" 3
this->gbump(1);
# 298 "/usr/include/c++/4.0.0/streambuf" 3
} else {
# 300 "/usr/include/c++/4.0.0/streambuf" 3
__ret = this->uflow(); }
# 301 "/usr/include/c++/4.0.0/streambuf" 3
return __ret;
# 302 "/usr/include/c++/4.0.0/streambuf" 3
}
# 313 "/usr/include/c++/4.0.0/streambuf" 3
int_type sgetc()
# 314 "/usr/include/c++/4.0.0/streambuf" 3
{
# 315 "/usr/include/c++/4.0.0/streambuf" 3
auto int_type __ret;
# 316 "/usr/include/c++/4.0.0/streambuf" 3
if (__builtin_expect(this->gptr() < this->egptr(), true)) {
# 317 "/usr/include/c++/4.0.0/streambuf" 3
__ret = _Traits::to_int_type(*this->gptr()); } else {
# 319 "/usr/include/c++/4.0.0/streambuf" 3
__ret = this->underflow(); }
# 320 "/usr/include/c++/4.0.0/streambuf" 3
return __ret;
# 321 "/usr/include/c++/4.0.0/streambuf" 3
}
# 332 "/usr/include/c++/4.0.0/streambuf" 3
streamsize sgetn(char_type *__s, streamsize __n)
# 333 "/usr/include/c++/4.0.0/streambuf" 3
{ return this->xsgetn(__s, __n); }
# 346 "/usr/include/c++/4.0.0/streambuf" 3
int_type sputbackc(char_type __c)
# 347 "/usr/include/c++/4.0.0/streambuf" 3
{
# 348 "/usr/include/c++/4.0.0/streambuf" 3
auto int_type __ret;
# 349 "/usr/include/c++/4.0.0/streambuf" 3
auto const bool __testpos = (this->eback() < this->gptr());
# 350 "/usr/include/c++/4.0.0/streambuf" 3
if (__builtin_expect((!__testpos) || (!(_Traits::eq(__c, this->gptr()[-1]))), false)) {
# 352 "/usr/include/c++/4.0.0/streambuf" 3
__ret = this->pbackfail(_Traits::to_int_type(__c)); } else
# 354 "/usr/include/c++/4.0.0/streambuf" 3
{
# 355 "/usr/include/c++/4.0.0/streambuf" 3
this->gbump(-1);
# 356 "/usr/include/c++/4.0.0/streambuf" 3
__ret = _Traits::to_int_type(*this->gptr());
# 357 "/usr/include/c++/4.0.0/streambuf" 3
}
# 358 "/usr/include/c++/4.0.0/streambuf" 3
return __ret;
# 359 "/usr/include/c++/4.0.0/streambuf" 3
}
# 371 "/usr/include/c++/4.0.0/streambuf" 3
int_type sungetc()
# 372 "/usr/include/c++/4.0.0/streambuf" 3
{
# 373 "/usr/include/c++/4.0.0/streambuf" 3
auto int_type __ret;
# 374 "/usr/include/c++/4.0.0/streambuf" 3
if (__builtin_expect(this->eback() < this->gptr(), true))
# 375 "/usr/include/c++/4.0.0/streambuf" 3
{
# 376 "/usr/include/c++/4.0.0/streambuf" 3
this->gbump(-1);
# 377 "/usr/include/c++/4.0.0/streambuf" 3
__ret = _Traits::to_int_type(*this->gptr());
# 378 "/usr/include/c++/4.0.0/streambuf" 3
} else {
# 380 "/usr/include/c++/4.0.0/streambuf" 3
__ret = this->pbackfail(); }
# 381 "/usr/include/c++/4.0.0/streambuf" 3
return __ret;
# 382 "/usr/include/c++/4.0.0/streambuf" 3
}
# 398 "/usr/include/c++/4.0.0/streambuf" 3
int_type sputc(char_type __c)
# 399 "/usr/include/c++/4.0.0/streambuf" 3
{
# 400 "/usr/include/c++/4.0.0/streambuf" 3
auto int_type __ret;
# 401 "/usr/include/c++/4.0.0/streambuf" 3
if (__builtin_expect(this->pptr() < this->epptr(), true))
# 402 "/usr/include/c++/4.0.0/streambuf" 3
{
# 403 "/usr/include/c++/4.0.0/streambuf" 3
(*this->pptr()) = __c;
# 404 "/usr/include/c++/4.0.0/streambuf" 3
this->pbump(1);
# 405 "/usr/include/c++/4.0.0/streambuf" 3
__ret = _Traits::to_int_type(__c);
# 406 "/usr/include/c++/4.0.0/streambuf" 3
} else {
# 408 "/usr/include/c++/4.0.0/streambuf" 3
__ret = this->overflow(_Traits::to_int_type(__c)); }
# 409 "/usr/include/c++/4.0.0/streambuf" 3
return __ret;
# 410 "/usr/include/c++/4.0.0/streambuf" 3
}
# 424 "/usr/include/c++/4.0.0/streambuf" 3
streamsize sputn(const char_type *__s, streamsize __n)
# 425 "/usr/include/c++/4.0.0/streambuf" 3
{ return this->xsputn(__s, __n); }
# 437 "/usr/include/c++/4.0.0/streambuf" 3
protected: basic_streambuf() : _M_in_beg((0)), _M_in_cur((0)), _M_in_end((0)), _M_out_beg((0)), _M_out_cur((0)), _M_out_end((0)), _M_buf_locale()
# 441 "/usr/include/c++/4.0.0/streambuf" 3
{ }
# 456 "/usr/include/c++/4.0.0/streambuf" 3
char_type *eback() const { return this->_M_in_beg; }
# 459 "/usr/include/c++/4.0.0/streambuf" 3
char_type *gptr() const { return this->_M_in_cur; }
# 462 "/usr/include/c++/4.0.0/streambuf" 3
char_type *egptr() const { return this->_M_in_end; }
# 472 "/usr/include/c++/4.0.0/streambuf" 3
void gbump(int __n) { (this->_M_in_cur) += __n; }
# 483 "/usr/include/c++/4.0.0/streambuf" 3
void setg(char_type *__gbeg, char_type *__gnext, char_type *__gend)
# 484 "/usr/include/c++/4.0.0/streambuf" 3
{
# 485 "/usr/include/c++/4.0.0/streambuf" 3
(this->_M_in_beg) = __gbeg;
# 486 "/usr/include/c++/4.0.0/streambuf" 3
(this->_M_in_cur) = __gnext;
# 487 "/usr/include/c++/4.0.0/streambuf" 3
(this->_M_in_end) = __gend;
# 488 "/usr/include/c++/4.0.0/streambuf" 3
}
# 503 "/usr/include/c++/4.0.0/streambuf" 3
char_type *pbase() const { return this->_M_out_beg; }
# 506 "/usr/include/c++/4.0.0/streambuf" 3
char_type *pptr() const { return this->_M_out_cur; }
# 509 "/usr/include/c++/4.0.0/streambuf" 3
char_type *epptr() const { return this->_M_out_end; }
# 519 "/usr/include/c++/4.0.0/streambuf" 3
void pbump(int __n) { (this->_M_out_cur) += __n; }
# 529 "/usr/include/c++/4.0.0/streambuf" 3
void setp(char_type *__pbeg, char_type *__pend)
# 530 "/usr/include/c++/4.0.0/streambuf" 3
{
# 531 "/usr/include/c++/4.0.0/streambuf" 3
(this->_M_out_beg) = ((this->_M_out_cur) = __pbeg);
# 532 "/usr/include/c++/4.0.0/streambuf" 3
(this->_M_out_end) = __pend;
# 533 "/usr/include/c++/4.0.0/streambuf" 3
}
# 550 "/usr/include/c++/4.0.0/streambuf" 3
virtual void imbue(const locale &)
# 551 "/usr/include/c++/4.0.0/streambuf" 3
{ }
# 565 "/usr/include/c++/4.0.0/streambuf" 3
virtual std::basic_streambuf< _CharT, _Traits> *setbuf(char_type *, streamsize)
# 566 "/usr/include/c++/4.0.0/streambuf" 3
{ return this; }
# 576 "/usr/include/c++/4.0.0/streambuf" 3
virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = (_S_in | _S_out))
# 578 "/usr/include/c++/4.0.0/streambuf" 3
{ return ((pos_type)(((off_type)(-1)))); }
# 588 "/usr/include/c++/4.0.0/streambuf" 3
virtual pos_type seekpos(pos_type, ios_base::openmode = (_S_in | _S_out))
# 590 "/usr/include/c++/4.0.0/streambuf" 3
{ return ((pos_type)(((off_type)(-1)))); }
# 601 "/usr/include/c++/4.0.0/streambuf" 3
virtual int sync() { return 0; }
# 623 "/usr/include/c++/4.0.0/streambuf" 3
virtual streamsize showmanyc() { return 0; }
# 639 "/usr/include/c++/4.0.0/streambuf" 3
virtual streamsize xsgetn(char_type *, streamsize);
# 661 "/usr/include/c++/4.0.0/streambuf" 3
virtual int_type underflow()
# 662 "/usr/include/c++/4.0.0/streambuf" 3
{ return _Traits::eof(); }
# 674 "/usr/include/c++/4.0.0/streambuf" 3
virtual int_type uflow()
# 675 "/usr/include/c++/4.0.0/streambuf" 3
{
# 676 "/usr/include/c++/4.0.0/streambuf" 3
auto int_type __ret = (_Traits::eof());
# 677 "/usr/include/c++/4.0.0/streambuf" 3
auto const bool __testeof = (_Traits::eq_int_type(this->underflow(), __ret));
# 679 "/usr/include/c++/4.0.0/streambuf" 3
if (!__testeof)
# 680 "/usr/include/c++/4.0.0/streambuf" 3
{
# 681 "/usr/include/c++/4.0.0/streambuf" 3
__ret = _Traits::to_int_type(*this->gptr());
# 682 "/usr/include/c++/4.0.0/streambuf" 3
this->gbump(1);
# 683 "/usr/include/c++/4.0.0/streambuf" 3
}
# 684 "/usr/include/c++/4.0.0/streambuf" 3
return __ret;
# 685 "/usr/include/c++/4.0.0/streambuf" 3
}
# 698 "/usr/include/c++/4.0.0/streambuf" 3
virtual int_type pbackfail(int_type = (_Traits::eof()))
# 699 "/usr/include/c++/4.0.0/streambuf" 3
{ return _Traits::eof(); }
# 716 "/usr/include/c++/4.0.0/streambuf" 3
virtual streamsize xsputn(const char_type *, streamsize);
# 741 "/usr/include/c++/4.0.0/streambuf" 3
virtual int_type overflow(int_type = (_Traits::eof()))
# 742 "/usr/include/c++/4.0.0/streambuf" 3
{ return _Traits::eof(); }
# 772 "/usr/include/c++/4.0.0/streambuf" 3
private: basic_streambuf(const __streambuf_type &__sb) : _M_in_beg((__sb._M_in_beg)), _M_in_cur((__sb._M_in_cur)), _M_in_end((__sb._M_in_end)), _M_out_beg((__sb._M_out_beg)), _M_out_cur((__sb._M_out_cur)), _M_out_end((__sb._M_out_cur)), _M_buf_locale(__sb._M_buf_locale)
# 777 "/usr/include/c++/4.0.0/streambuf" 3
{ }
# 780 "/usr/include/c++/4.0.0/streambuf" 3
__streambuf_type &operator=(const __streambuf_type &) { return *this; }
# 781 "/usr/include/c++/4.0.0/streambuf" 3
};
# 786 "/usr/include/c++/4.0.0/streambuf" 3
template<> streamsize __copy_streambufs(basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *);
# 791 "/usr/include/c++/4.0.0/streambuf" 3
template<> streamsize __copy_streambufs(basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *);
# 794 "/usr/include/c++/4.0.0/streambuf" 3
}
# 45 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
namespace std {
# 47 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
template<class _CharT, class _Traits> streamsize
# 50 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
basic_streambuf< _CharT, _Traits> ::xsgetn(char_type *__s, streamsize __n)
# 51 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 52 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto streamsize __ret = (0);
# 53 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
while (__ret < __n)
# 54 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 55 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto const size_t __buf_len = (this->egptr() - this->gptr());
# 56 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
if (__buf_len)
# 57 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 58 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto const size_t __remaining = (__n - __ret);
# 59 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto const size_t __len = (std::min(__buf_len, __remaining));
# 60 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
_Traits::copy(__s, this->gptr(), __len);
# 61 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
__ret += __len;
# 62 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
__s += __len;
# 63 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
this->gbump(__len);
# 64 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 66 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
if (__ret < __n)
# 67 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 68 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto const int_type __c = (this->uflow());
# 69 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
if (!(_Traits::eq_int_type(__c, _Traits::eof())))
# 70 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 71 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
_Traits::assign(*(__s++), _Traits::to_char_type(__c));
# 72 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
++__ret;
# 73 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
} else {
# 75 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
break; }
# 76 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 77 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 78 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
return __ret;
# 79 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 81 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
template<class _CharT, class _Traits> streamsize
# 84 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
basic_streambuf< _CharT, _Traits> ::xsputn(const char_type *__s, streamsize __n)
# 85 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 86 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto streamsize __ret = (0);
# 87 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
while (__ret < __n)
# 88 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 89 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto const size_t __buf_len = (this->epptr() - this->pptr());
# 90 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
if (__buf_len)
# 91 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 92 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto const size_t __remaining = (__n - __ret);
# 93 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto const size_t __len = (std::min(__buf_len, __remaining));
# 94 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
_Traits::copy(this->pptr(), __s, __len);
# 95 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
__ret += __len;
# 96 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
__s += __len;
# 97 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
this->pbump(__len);
# 98 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 100 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
if (__ret < __n)
# 101 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 102 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto int_type __c = this->overflow(_Traits::to_int_type(*__s));
# 103 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
if (!(_Traits::eq_int_type(__c, _Traits::eof())))
# 104 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 105 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
++__ret;
# 106 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
++__s;
# 107 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
} else {
# 109 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
break; }
# 110 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 111 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 112 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
return __ret;
# 113 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 118 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
template<class _CharT, class _Traits> streamsize
# 120 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
__copy_streambufs(basic_streambuf< _CharT, _Traits> *__sbin, basic_streambuf< _CharT, _Traits> *
# 121 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
__sbout)
# 122 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 123 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto streamsize __ret = (0);
# 124 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
auto typename _Traits::int_type __c = ((__sbin->sgetc()));
# 125 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
while (!(_Traits::eq_int_type(__c, _Traits::eof())))
# 126 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
{
# 127 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
__c = (__sbout->sputc(_Traits::to_char_type(__c)));
# 128 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
if (_Traits::eq_int_type(__c, _Traits::eof())) {
# 129 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
break; }
# 130 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
++__ret;
# 131 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
__c = (__sbin->snextc());
# 132 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 133 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
return __ret;
# 134 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 140 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
extern template class basic_streambuf< char, char_traits< char> > ;
# 141 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs< char, char_traits< char> > (basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *);
# 146 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
extern template class basic_streambuf< wchar_t, char_traits< wchar_t> > ;
# 147 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs< wchar_t, char_traits< wchar_t> > (basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *);
# 152 "/usr/include/c++/4.0.0/bits/streambuf.tcc" 3
}
# 46 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
namespace std {
# 50 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
template<class _CharT, class _Traits>
# 51 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
class istreambuf_iterator : public iterator< input_iterator_tag, _CharT, typename _Traits::off_type, _CharT *, _CharT &> {
# 59 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
public: typedef _CharT char_type;
# 60 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
typedef _Traits traits_type;
# 61 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
typedef typename _Traits::int_type int_type;
# 62 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
typedef basic_streambuf< _CharT, _Traits> streambuf_type;
# 63 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
typedef basic_istream< _CharT, _Traits> istream_type;
# 74 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
private: mutable streambuf_type *_M_sbuf;
# 75 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
mutable int_type _M_c;
# 79 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
public: istreambuf_iterator() throw() : _M_sbuf((0)), _M_c(_Traits::eof())
# 80 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ }
# 83 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
istreambuf_iterator(istream_type &__s) throw() : _M_sbuf(((__s.rdbuf()))), _M_c(_Traits::eof())
# 84 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ }
# 87 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
istreambuf_iterator(streambuf_type *__s) throw() : _M_sbuf(__s), _M_c(_Traits::eof())
# 88 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ }
# 94 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
char_type operator*() const
# 95 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 103 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
return _Traits::to_char_type(this->_M_get());
# 104 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 108 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
std::istreambuf_iterator< _CharT, _Traits> &operator++()
# 109 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 110 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
;
# 113 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
if (this->_M_sbuf)
# 114 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 115 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
((this->_M_sbuf)->sbumpc());
# 116 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
(this->_M_c) = _Traits::eof();
# 117 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 118 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
return *this;
# 119 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 123 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
std::istreambuf_iterator< _CharT, _Traits> operator++(int)
# 124 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 125 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
;
# 129 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
auto std::istreambuf_iterator< _CharT, _Traits> __old = *this;
# 130 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
if (this->_M_sbuf)
# 131 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 132 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
(__old._M_c) = ((this->_M_sbuf)->sbumpc());
# 133 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
(this->_M_c) = _Traits::eof();
# 134 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 135 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
return __old;
# 136 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 143 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
bool equal(const std::istreambuf_iterator< _CharT, _Traits> &__b) const
# 144 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 145 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
auto const bool __thiseof = this->_M_at_eof();
# 146 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
auto const bool __beof = __b._M_at_eof();
# 147 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
return (__thiseof && __beof) || ((!__thiseof) && (!__beof));
# 148 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 152 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
private: int_type _M_get() const
# 153 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 154 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
auto const int_type __eof = (_Traits::eof());
# 155 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
auto int_type __ret = __eof;
# 156 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
if (this->_M_sbuf)
# 157 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 158 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
if (!(_Traits::eq_int_type(this->_M_c, __eof))) {
# 159 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
__ret = (this->_M_c); } else {
# 160 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
if (!(_Traits::eq_int_type(__ret = ((this->_M_sbuf)->sgetc()), __eof))) {
# 162 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
(this->_M_c) = __ret; } else {
# 164 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
(this->_M_sbuf) = 0; } }
# 165 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 166 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
return __ret;
# 167 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 170 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
bool _M_at_eof() const
# 171 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 172 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
auto const int_type __eof = (_Traits::eof());
# 173 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
return _Traits::eq_int_type(this->_M_get(), __eof);
# 174 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 175 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
};
# 177 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
template<class _CharT, class _Traits> inline bool
# 179 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
operator==(const istreambuf_iterator< _CharT, _Traits> &__a, const istreambuf_iterator< _CharT, _Traits> &
# 180 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
__b)
# 181 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ return (__a.equal(__b)); }
# 183 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
template<class _CharT, class _Traits> inline bool
# 185 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
operator!=(const istreambuf_iterator< _CharT, _Traits> &__a, const istreambuf_iterator< _CharT, _Traits> &
# 186 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
__b)
# 187 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ return !((__a.equal(__b))); }
# 190 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
template<class _CharT, class _Traits>
# 191 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
class ostreambuf_iterator : public iterator< output_iterator_tag, void, void, void, void> {
# 198 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
public: typedef _CharT char_type;
# 199 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
typedef _Traits traits_type;
# 200 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
typedef basic_streambuf< _CharT, _Traits> streambuf_type;
# 201 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
typedef basic_ostream< _CharT, _Traits> ostream_type;
# 205 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
private: streambuf_type *_M_sbuf;
# 206 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
bool _M_failed;
# 210 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
public: ostreambuf_iterator(ostream_type &__s) throw() : _M_sbuf(((__s.rdbuf()))), _M_failed((!(this->_M_sbuf)))
# 211 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ }
# 214 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
ostreambuf_iterator(streambuf_type *__s) throw() : _M_sbuf(__s), _M_failed((!(this->_M_sbuf)))
# 215 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ }
# 219 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
std::ostreambuf_iterator< _CharT, _Traits> &operator=(_CharT __c)
# 220 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 221 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
if ((!(this->_M_failed)) && (_Traits::eq_int_type(((this->_M_sbuf)->sputc(__c)), _Traits::eof()))) {
# 223 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
(this->_M_failed) = true; }
# 224 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
return *this;
# 225 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 229 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
std::ostreambuf_iterator< _CharT, _Traits> &operator*()
# 230 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ return *this; }
# 234 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
std::ostreambuf_iterator< _CharT, _Traits> &operator++(int)
# 235 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ return *this; }
# 239 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
std::ostreambuf_iterator< _CharT, _Traits> &operator++()
# 240 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ return *this; }
# 244 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
bool failed() const throw()
# 245 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{ return this->_M_failed; }
# 248 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
std::ostreambuf_iterator< _CharT, _Traits> &_M_put(const _CharT *__ws, streamsize __len)
# 249 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
{
# 250 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
if ((__builtin_expect(!(this->_M_failed), true)) && (__builtin_expect(((this->_M_sbuf)->sputn(__ws, __len)) != __len, false))) {
# 253 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
(this->_M_failed) = true; }
# 254 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
return *this;
# 255 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 256 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
};
# 257 "/usr/include/c++/4.0.0/bits/streambuf_iterator.h" 3
}
# 39 "/usr/include/wctype.h" 3
typedef __darwin_wctrans_t wctrans_t;
# 63 "/usr/include/wctype.h" 3
static inline int iswblank(wint_t _wc)
# 64 "/usr/include/wctype.h" 3
{
# 65 "/usr/include/wctype.h" 3
return __istype(_wc, 131072L);
# 66 "/usr/include/wctype.h" 3
}
# 70 "/usr/include/wctype.h" 3
static inline int iswascii(wint_t _wc)
# 71 "/usr/include/wctype.h" 3
{
# 72 "/usr/include/wctype.h" 3
return (_wc & (~127)) == 0;
# 73 "/usr/include/wctype.h" 3
}
# 76 "/usr/include/wctype.h" 3
static inline int iswhexnumber(wint_t _wc)
# 77 "/usr/include/wctype.h" 3
{
# 78 "/usr/include/wctype.h" 3
return __istype(_wc, 65536L);
# 79 "/usr/include/wctype.h" 3
}
# 82 "/usr/include/wctype.h" 3
static inline int iswideogram(wint_t _wc)
# 83 "/usr/include/wctype.h" 3
{
# 84 "/usr/include/wctype.h" 3
return __istype(_wc, 524288L);
# 85 "/usr/include/wctype.h" 3
}
# 88 "/usr/include/wctype.h" 3
static inline int iswnumber(wint_t _wc)
# 89 "/usr/include/wctype.h" 3
{
# 90 "/usr/include/wctype.h" 3
return __istype(_wc, 1024L);
# 91 "/usr/include/wctype.h" 3
}
# 94 "/usr/include/wctype.h" 3
static inline int iswphonogram(wint_t _wc)
# 95 "/usr/include/wctype.h" 3
{
# 96 "/usr/include/wctype.h" 3
return __istype(_wc, 2097152L);
# 97 "/usr/include/wctype.h" 3
}
# 100 "/usr/include/wctype.h" 3
static inline int iswrune(wint_t _wc)
# 101 "/usr/include/wctype.h" 3
{
# 102 "/usr/include/wctype.h" 3
return __istype(_wc, 4294967280UL);
# 103 "/usr/include/wctype.h" 3
}
# 106 "/usr/include/wctype.h" 3
static inline int iswspecial(wint_t _wc)
# 107 "/usr/include/wctype.h" 3
{
# 108 "/usr/include/wctype.h" 3
return __istype(_wc, 1048576L);
# 109 "/usr/include/wctype.h" 3
}
# 132 "/usr/include/wctype.h" 3
extern "C" wint_t nextwctype(wint_t, wctype_t);
# 134 "/usr/include/wctype.h" 3
extern "C" wint_t towctrans(wint_t, wctrans_t);
# 136 "/usr/include/wctype.h" 3
extern "C" wctrans_t wctrans(const char *);
# 79 "/usr/include/c++/4.0.0/cwctype" 3
namespace std {
# 83 "/usr/include/c++/4.0.0/cwctype" 3
using ::wctype_t;
# 84 "/usr/include/c++/4.0.0/cwctype" 3
using ::wctrans_t;
# 86 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswalnum;
# 87 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswalpha;
# 89 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswblank;
# 91 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswcntrl;
# 92 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswdigit;
# 93 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswgraph;
# 94 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswlower;
# 95 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswprint;
# 97 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswpunct;
# 98 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswspace;
# 99 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswupper;
# 100 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswxdigit;
# 101 "/usr/include/c++/4.0.0/cwctype" 3
using ::iswctype;
# 102 "/usr/include/c++/4.0.0/cwctype" 3
using ::towlower;
# 103 "/usr/include/c++/4.0.0/cwctype" 3
using ::towupper;
# 104 "/usr/include/c++/4.0.0/cwctype" 3
using ::towctrans;
# 105 "/usr/include/c++/4.0.0/cwctype" 3
using ::wctrans;
# 106 "/usr/include/c++/4.0.0/cwctype" 3
using ::wctype;
# 107 "/usr/include/c++/4.0.0/cwctype" 3
}
# 51 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
namespace std {
# 63 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _Tv> extern void __convert_to_v(const char *, _Tv &, ios_base::iostate &, const __c_locale &);
# 71 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &);
# 76 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &);
# 81 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &);
# 86 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _Traits>
# 87 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
struct __pad {
# 90 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static void _S_pad(ios_base &, _CharT, _CharT *, const _CharT *, const streamsize, const streamsize, const bool);
# 93 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 100 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> extern _CharT *__add_grouping(_CharT *, _CharT, const char *, size_t, const _CharT *, const _CharT *);
# 109 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline ostreambuf_iterator< _CharT, char_traits< _CharT> >
# 112 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__write(ostreambuf_iterator< _CharT> __s, const _CharT *__ws, int __len)
# 113 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 114 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__s._M_put(__ws, __len));
# 115 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return __s;
# 116 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 119 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _OutIter> inline _OutIter
# 122 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__write(_OutIter __s, const _CharT *__ws, int __len)
# 123 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 124 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
for (int __j = 0; __j < __len; (__j++), (++__s)) {
# 125 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(*__s) = __ws[__j]; }
# 126 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return __s;
# 127 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 38 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
struct ctype_base {
# 41 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
typedef const int *__to_type;
# 43 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
typedef unsigned long mask;
# 46 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask upper = (32768L);
# 47 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask lower = (4096L);
# 48 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask alpha = (256L);
# 49 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask digit = (1024L);
# 50 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask xdigit = (65536L);
# 51 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask space = (16384L);
# 52 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask print = (262144L);
# 53 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask graph = ((256L | 1024L) | 8192L);
# 54 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask cntrl = (512L);
# 55 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask punct = (8192L);
# 56 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
static const mask alnum = (256L | 1024L);
# 71 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_base.h" 3
};
# 144 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 145 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class __ctype_abstract_base : public locale::facet, public ctype_base {
# 150 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 163 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
bool is(mask __m, char_type __c) const
# 164 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_is(__m, __c)); }
# 180 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char_type *is(const char_type *__lo, const char_type *__hi, mask *__vec) const
# 181 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_is(__lo, __hi, __vec)); }
# 196 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char_type *scan_is(mask __m, const char_type *__lo, const char_type *__hi) const
# 197 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_scan_is(__m, __lo, __hi); }
# 212 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char_type *scan_not(mask __m, const char_type *__lo, const char_type *__hi) const
# 213 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_scan_not(__m, __lo, __hi); }
# 226 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type toupper(char_type __c) const
# 227 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_toupper(__c)); }
# 241 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const
# 242 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_toupper(__lo, __hi)); }
# 255 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type tolower(char_type __c) const
# 256 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_tolower(__c)); }
# 270 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const
# 271 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_tolower(__lo, __hi)); }
# 287 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type widen(char __c) const
# 288 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_widen(__c)); }
# 306 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const
# 307 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_widen(__lo, __hi, __to)); }
# 325 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const
# 326 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_narrow(__c, __dfault)); }
# 347 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char
# 348 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__dfault, char *__to) const
# 349 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_narrow(__lo, __hi, __dfault, __to)); }
# 353 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: explicit __ctype_abstract_base(size_t __refs = (0)) : locale::facet(__refs) { }
# 356 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual ~__ctype_abstract_base() { }
# 372 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual bool do_is(mask, char_type) const = 0;
# 391 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type *, const char_type *, mask *) const = 0;
# 410 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask, const char_type *, const char_type *) const = 0;
# 429 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask, const char_type *, const char_type *) const = 0;
# 447 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const = 0;
# 464 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const = 0;
# 480 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const = 0;
# 497 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const = 0;
# 516 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_widen(char) const = 0;
# 537 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char *do_widen(const char *, const char *, char_type *) const = 0;
# 559 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char do_narrow(char_type, char) const = 0;
# 583 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *, const char_type *, char, char *) const = 0;
# 585 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 605 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 606 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class ctype : public __ctype_abstract_base< _CharT> {
# 610 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 611 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef typename __ctype_abstract_base< _CharT> ::mask mask;
# 614 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static locale::id id;
# 617 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit ctype(size_t __refs = (0)) : __ctype_abstract_base< _CharT> (__refs) { }
# 621 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~ctype();
# 624 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual bool do_is(mask, char_type) const;
# 627 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type *, const char_type *, mask *) const;
# 630 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask, const char_type *, const char_type *) const;
# 633 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask, const char_type *, const char_type *) const;
# 637 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const;
# 640 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const;
# 643 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const;
# 646 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const;
# 649 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_widen(char) const;
# 652 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char *do_widen(const char *, const char *, char_type *) const;
# 655 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char do_narrow(char_type, char) const;
# 658 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *, const char_type *, char, char *) const;
# 660 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 662 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> locale::id
# 663 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
ctype< _CharT> ::id;
# 675 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> class ctype< char> : public locale::facet, public ctype_base {
# 680 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef char char_type;
# 684 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_ctype;
# 685 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
bool _M_del;
# 686 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__to_type _M_toupper;
# 687 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__to_type _M_tolower;
# 688 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const mask *_M_table;
# 689 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
mutable char _M_widen_ok;
# 690 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
mutable char _M_widen[(1 + (static_cast< unsigned char>((-1))))];
# 691 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
mutable char _M_narrow[(1 + (static_cast< unsigned char>((-1))))];
# 692 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
mutable char _M_narrow_ok;
# 697 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: static locale::id id;
# 699 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static const size_t table_size = (1 + (static_cast< unsigned char>((-1))));
# 712 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit ctype(const mask * = 0, bool = false, size_t = (0));
# 725 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit ctype(__c_locale, const mask * = 0, bool = false, size_t = (0));
# 738 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
inline bool is(mask, char) const;
# 753 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
inline const char *is(const char *, const char *, mask *) const;
# 767 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
inline const char *scan_is(mask, const char *, const char *) const;
# 781 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
inline const char *scan_not(mask, const char *, const char *) const;
# 796 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type toupper(char_type __c) const
# 797 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_toupper(__c); }
# 813 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const
# 814 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_toupper(__lo, __hi); }
# 829 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type tolower(char_type __c) const
# 830 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_tolower(__c); }
# 846 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const
# 847 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_tolower(__lo, __hi); }
# 866 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type widen(char __c) const
# 867 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 868 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (this->_M_widen_ok) {
# 869 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return (this->_M_widen)[static_cast< unsigned char>(__c)]; }
# 870 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
this->_M_widen_init();
# 871 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return this->do_widen(__c);
# 872 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 893 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const
# 894 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 895 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (this->_M_widen_ok == 1)
# 896 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 897 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
memcpy(__to, __lo, __hi - __lo);
# 898 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return __hi;
# 899 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 900 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (!(this->_M_widen_ok)) {
# 901 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
this->_M_widen_init(); }
# 902 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return this->do_widen(__lo, __hi, __to);
# 903 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 924 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const
# 925 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 926 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if ((this->_M_narrow)[static_cast< unsigned char>(__c)]) {
# 927 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return (this->_M_narrow)[static_cast< unsigned char>(__c)]; }
# 928 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
auto const char __t = this->do_narrow(__c, __dfault);
# 929 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (__t != __dfault) {
# 930 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
((this->_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }
# 931 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return __t;
# 932 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 957 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char
# 958 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__dfault, char *__to) const
# 959 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 960 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (__builtin_expect(this->_M_narrow_ok == 1, true))
# 961 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 962 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
memcpy(__to, __lo, __hi - __lo);
# 963 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return __hi;
# 964 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 965 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (!(this->_M_narrow_ok)) {
# 966 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
this->_M_narrow_init(); }
# 967 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return this->do_narrow(__lo, __hi, __dfault, __to);
# 968 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 974 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: const mask *table() const throw()
# 975 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->_M_table; }
# 979 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static const mask *classic_table() throw();
# 988 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual ~ctype();
# 1004 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const;
# 1021 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const;
# 1037 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const;
# 1054 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const;
# 1074 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const
# 1075 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return __c; }
# 1097 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__dest) const
# 1098 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 1099 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
memcpy(__dest, __lo, __hi - __lo);
# 1100 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return __hi;
# 1101 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 1123 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char) const
# 1124 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return __c; }
# 1149 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char, char *
# 1150 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__dest) const
# 1151 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 1152 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
memcpy(__dest, __lo, __hi - __lo);
# 1153 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return __hi;
# 1154 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 1158 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
private: void _M_widen_init() const
# 1159 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 1160 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
auto char __tmp[sizeof(char [(1 + (static_cast< unsigned char>((-1))))])];
# 1161 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
for (size_t __i = (0); __i < sizeof(this->_M_widen); ++__i) {
# 1162 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
((__tmp)[__i]) = __i; }
# 1163 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
this->do_widen(__tmp, __tmp + sizeof(__tmp), this->_M_widen);
# 1165 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_M_widen_ok) = (1);
# 1167 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (memcmp(__tmp, this->_M_widen, sizeof(this->_M_widen))) {
# 1168 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_M_widen_ok) = (2); }
# 1169 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 1174 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_narrow_init() const
# 1175 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 1176 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
auto char __tmp[sizeof(char [(1 + (static_cast< unsigned char>((-1))))])];
# 1177 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
for (size_t __i = (0); __i < sizeof(this->_M_narrow); ++__i) {
# 1178 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
((__tmp)[__i]) = __i; }
# 1179 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
this->do_narrow(__tmp, __tmp + sizeof(__tmp), 0, this->_M_narrow);
# 1181 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_M_narrow_ok) = (1);
# 1182 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (memcmp(__tmp, this->_M_narrow, sizeof(this->_M_narrow))) {
# 1183 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_M_narrow_ok) = (2); } else
# 1185 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 1188 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
auto char __c;
# 1189 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
this->do_narrow(__tmp, __tmp + 1, 1, &__c);
# 1190 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (__c == 1) {
# 1191 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_M_narrow_ok) = (2); }
# 1192 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 1193 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 1194 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 1198 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> const ctype< char> &use_facet< ctype< char> > (const locale &);
# 1213 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> class ctype< wchar_t> : public __ctype_abstract_base< wchar_t> {
# 1218 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef wchar_t char_type;
# 1219 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef wctype_t __wmask_type;
# 1222 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_ctype;
# 1225 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
bool _M_narrow_ok;
# 1226 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char _M_narrow[128];
# 1227 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
wint_t _M_widen[(1 + (static_cast< unsigned char>((-1))))];
# 1230 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
mask _M_bit[16];
# 1231 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__wmask_type _M_wmask[16];
# 1236 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: static locale::id id;
# 1246 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit ctype(size_t = (0));
# 1257 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit ctype(__c_locale, size_t = (0));
# 1261 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: __wmask_type _M_convert_to_wmask(const mask) const;
# 1265 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual ~ctype();
# 1281 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
inline virtual bool do_is(mask, char_type) const;
# 1300 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
inline virtual const char_type *do_is(const char_type *, const char_type *, mask *) const;
# 1318 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
inline virtual const char_type *do_scan_is(mask, const char_type *, const char_type *) const;
# 1336 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
inline virtual const char_type *do_scan_not(mask, const char_type *, const char_type *) const;
# 1353 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const;
# 1370 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const;
# 1386 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const;
# 1403 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const;
# 1423 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_widen(char) const;
# 1445 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char *do_widen(const char *, const char *, char_type *) const;
# 1468 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char do_narrow(char_type, char) const;
# 1494 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *, const char_type *, char, char *) const;
# 1499 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_initialize_ctype();
# 1500 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 1504 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> const ctype< wchar_t> &use_facet< ctype< wchar_t> > (const locale &);
# 39 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
inline bool ctype< char> ::is(mask __m, char __c) const
# 40 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
{
# 41 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
if (this->_M_table) {
# 42 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
return ((this->_M_table)[static_cast< unsigned char>(__c)]) & __m; } else {
# 44 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
return __istype(__c, __m); }
# 45 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
}
# 49 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const
# 50 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
{
# 51 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
if (this->_M_table) {
# 52 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
while (__low < __high) {
# 53 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
(*(__vec++)) = (this->_M_table)[static_cast< unsigned char>((*(__low++)))]; } } else {
# 55 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
for (; __low < __high; (++__vec), (++__low))
# 56 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
{
# 58 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
(*__vec) = __maskrune(*__low, ((((((((((upper) | (lower)) | (alpha)) | (digit)) | (xdigit)) | (space)) | (print)) | (graph)) | (cntrl)) | (punct)) | (alnum));
# 76 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
} }
# 77 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
return __high;
# 78 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
}
# 82 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const
# 83 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
{
# 84 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
if (this->_M_table) {
# 85 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
while ((__low < __high) && (!(((this->_M_table)[static_cast< unsigned char>((*__low))]) & __m))) {
# 87 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
++__low; } } else {
# 89 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
while ((__low < __high) && (!this->is(__m, *__low))) {
# 90 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
++__low; } }
# 91 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
return __low;
# 92 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
}
# 96 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const
# 97 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
{
# 98 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
if (this->_M_table) {
# 99 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
while ((__low < __high) && ((((this->_M_table)[static_cast< unsigned char>((*__low))]) & __m) != (0))) {
# 101 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
++__low; } } else {
# 103 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
while ((__low < __high) && (this->is(__m, *__low) != 0)) {
# 104 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
++__low; } }
# 105 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
return __low;
# 106 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
}
# 111 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
inline bool ctype< wchar_t> ::do_is(mask __m, wchar_t __c) const
# 112 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
{
# 113 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
return __istype(__c, __m);
# 114 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
}
# 118 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
inline const wchar_t *ctype< wchar_t> ::do_is(const wchar_t *__lo, const wchar_t *__hi, mask *__vec) const
# 119 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
{
# 120 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
for (; __lo < __hi; (++__vec), (++__lo)) {
# 121 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
(*__vec) = __maskrune(*__lo, ((((((((((upper) | (lower)) | (alpha)) | (digit)) | (xdigit)) | (space)) | (print)) | (graph)) | (cntrl)) | (punct)) | (alnum)); }
# 123 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
return __hi;
# 124 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
}
# 128 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
inline const wchar_t *ctype< wchar_t> ::do_scan_is(mask __m, const wchar_t *__lo, const wchar_t *__hi) const
# 129 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
{
# 130 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
while ((__lo < __hi) && (!(__istype(*__lo, __m)))) {
# 131 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
++__lo; }
# 132 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
return __lo;
# 133 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
}
# 137 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
inline const wchar_t *ctype< wchar_t> ::do_scan_not(mask __m, const char_type *__lo, const char_type *__hi) const
# 138 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
{
# 139 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
while ((__lo < __hi) && (__istype(*__lo, __m))) {
# 140 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
++__lo; }
# 141 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
return __lo;
# 142 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/ctype_inline.h" 3
}
# 1511 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 1512 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class ctype_byname : public ctype< _CharT> {
# 1515 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 1518 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit ctype_byname(const char *, size_t = (0));
# 1522 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~ctype_byname() { }
# 1523 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 1527 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> ctype_byname< char> ::ctype_byname(const char *, size_t);
# 1530 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> ctype_byname< wchar_t> ::ctype_byname(const char *, size_t);
# 48 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
class codecvt_base {
# 51 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
public: enum result {
# 53 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
ok,
# 54 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
partial,
# 55 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
error,
# 56 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
noconv
# 57 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
};
# 58 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
};
# 69 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
template<class _InternT, class _ExternT, class _StateT>
# 70 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
class __codecvt_abstract_base : public locale::facet, public codecvt_base {
# 75 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
public: typedef codecvt_base::result result;
# 76 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef _InternT intern_type;
# 77 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef _ExternT extern_type;
# 78 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef _StateT state_type;
# 118 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
result out(state_type &__state, const intern_type *__from, const intern_type *
# 119 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
__from_end, const intern_type *&__from_next, extern_type *
# 120 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
__to, extern_type *__to_end, extern_type *&
# 121 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
__to_next) const
# 122 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{
# 123 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
return this->do_out(__state, __from, __from_end, __from_next, __to, __to_end, __to_next);
# 125 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
}
# 157 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
result unshift(state_type &__state, extern_type *__to, extern_type *__to_end, extern_type *&
# 158 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
__to_next) const
# 159 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{ return this->do_unshift(__state, __to, __to_end, __to_next); }
# 198 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
result in(state_type &__state, const extern_type *__from, const extern_type *
# 199 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
__from_end, const extern_type *&__from_next, intern_type *
# 200 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
__to, intern_type *__to_end, intern_type *&
# 201 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
__to_next) const
# 202 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{
# 203 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
return this->do_in(__state, __from, __from_end, __from_next, __to, __to_end, __to_next);
# 205 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
}
# 208 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
int encoding() const throw()
# 209 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{ return this->do_encoding(); }
# 212 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
bool always_noconv() const throw()
# 213 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{ return this->do_always_noconv(); }
# 216 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
int length(state_type &__state, const extern_type *__from, const extern_type *
# 217 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
__end, size_t __max) const
# 218 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{ return this->do_length(__state, __from, __end, __max); }
# 221 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
int max_length() const throw()
# 222 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{ return this->do_max_length(); }
# 226 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
protected: explicit __codecvt_abstract_base(size_t __refs = (0)) : locale::facet(__refs) { }
# 229 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual ~__codecvt_abstract_base() { }
# 239 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_out(state_type &, const intern_type *, const intern_type *, const intern_type *&, extern_type *, extern_type *, extern_type *&) const = 0;
# 245 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_unshift(state_type &, extern_type *, extern_type *, extern_type *&) const = 0;
# 249 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_in(state_type &, const extern_type *, const extern_type *, const extern_type *&, intern_type *, intern_type *, intern_type *&) const = 0;
# 255 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_encoding() const throw() = 0;
# 258 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual bool do_always_noconv() const throw() = 0;
# 261 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_length(state_type &, const extern_type *, const extern_type *, size_t) const = 0;
# 265 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_max_length() const throw() = 0;
# 266 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
};
# 270 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
template<class _InternT, class _ExternT, class _StateT>
# 271 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
class codecvt : public __codecvt_abstract_base< _InternT, _ExternT, _StateT> {
# 276 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
public: typedef codecvt_base::result result;
# 277 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef _InternT intern_type;
# 278 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef _ExternT extern_type;
# 279 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef _StateT state_type;
# 282 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
protected: __c_locale _M_c_locale_codecvt;
# 285 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
public: static locale::id id;
# 288 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
explicit codecvt(size_t __refs = (0)) : __codecvt_abstract_base< _InternT, _ExternT, _StateT> (__refs)
# 289 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{ }
# 292 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
explicit codecvt(__c_locale, size_t = (0));
# 296 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
protected: virtual ~codecvt() { }
# 299 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_out(state_type &, const intern_type *, const intern_type *, const intern_type *&, extern_type *, extern_type *, extern_type *&) const;
# 305 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_unshift(state_type &, extern_type *, extern_type *, extern_type *&) const;
# 309 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_in(state_type &, const extern_type *, const extern_type *, const extern_type *&, intern_type *, intern_type *, intern_type *&) const;
# 315 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_encoding() const throw();
# 318 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual bool do_always_noconv() const throw();
# 321 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_length(state_type &, const extern_type *, const extern_type *, size_t) const;
# 325 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_max_length() const throw();
# 326 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
};
# 328 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
template<class _InternT, class _ExternT, class _StateT> locale::id
# 329 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
codecvt< _InternT, _ExternT, _StateT> ::id;
# 333 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
template<> class codecvt< char, char, __mbstate_t> : public __codecvt_abstract_base< char, char, __mbstate_t> {
# 338 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
public: typedef char intern_type;
# 339 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef char extern_type;
# 340 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef mbstate_t state_type;
# 343 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
protected: __c_locale _M_c_locale_codecvt;
# 346 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
public: static locale::id id;
# 349 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
explicit codecvt(size_t = (0));
# 352 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
explicit codecvt(__c_locale, size_t = (0));
# 356 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
protected: virtual ~codecvt();
# 359 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_out(state_type &, const intern_type *, const intern_type *, const intern_type *&, extern_type *, extern_type *, extern_type *&) const;
# 365 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_unshift(state_type &, extern_type *, extern_type *, extern_type *&) const;
# 369 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_in(state_type &, const extern_type *, const extern_type *, const extern_type *&, intern_type *, intern_type *, intern_type *&) const;
# 375 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_encoding() const throw();
# 378 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual bool do_always_noconv() const throw();
# 381 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_length(state_type &, const extern_type *, const extern_type *, size_t) const;
# 385 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_max_length() const throw();
# 386 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
};
# 391 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
template<> class codecvt< wchar_t, char, __mbstate_t> : public __codecvt_abstract_base< wchar_t, char, __mbstate_t> {
# 396 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
public: typedef wchar_t intern_type;
# 397 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef char extern_type;
# 398 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
typedef mbstate_t state_type;
# 401 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
protected: __c_locale _M_c_locale_codecvt;
# 404 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
public: static locale::id id;
# 407 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
explicit codecvt(size_t = (0));
# 410 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
explicit codecvt(__c_locale, size_t = (0));
# 414 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
protected: virtual ~codecvt();
# 417 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_out(state_type &, const intern_type *, const intern_type *, const intern_type *&, extern_type *, extern_type *, extern_type *&) const;
# 423 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_unshift(state_type &, extern_type *, extern_type *, extern_type *&) const;
# 428 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual result do_in(state_type &, const extern_type *, const extern_type *, const extern_type *&, intern_type *, intern_type *, intern_type *&) const;
# 435 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_encoding() const throw();
# 438 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual bool do_always_noconv() const throw();
# 441 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_length(state_type &, const extern_type *, const extern_type *, size_t) const;
# 445 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
virtual int do_max_length() const throw();
# 446 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
};
# 450 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
template<class _InternT, class _ExternT, class _StateT>
# 451 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
class codecvt_byname : public codecvt< _InternT, _ExternT, _StateT> {
# 455 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
public: explicit codecvt_byname(const char *__s, size_t __refs = (0)) : codecvt< _InternT, _ExternT, _StateT> (__refs)
# 457 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{
# 458 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
if ((std::strcmp(__s, "C") != 0) && (std::strcmp(__s, "POSIX") != 0))
# 459 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
{
# 460 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
(this->_S_destroy_c_locale((this->_M_c_locale_codecvt)));
# 461 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
(this->_S_create_c_locale((this->_M_c_locale_codecvt), __s));
# 462 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
}
# 463 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
}
# 467 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
protected: virtual ~codecvt_byname() { }
# 468 "/usr/include/c++/4.0.0/bits/codecvt.h" 3
};
# 1536 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class __num_base {
# 1542 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: enum __cuda__S_ominus {
# 1543 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_ominus,
# 1544 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_oplus,
# 1545 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_ox,
# 1546 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_oX,
# 1547 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_odigits,
# 1548 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_odigits_end = 20,
# 1549 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_oudigits = 20,
# 1550 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_oudigits_end = 36,
# 1551 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_oe = 18,
# 1552 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_oE = 34,
# 1553 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_oend = 36
# 1554 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 1561 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static const char *_S_atoms_out;
# 1565 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static const char *_S_atoms_in;
# 1568 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
enum __cuda__S_iminus {
# 1569 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_iminus,
# 1570 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_iplus,
# 1571 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_ix,
# 1572 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_iX,
# 1573 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_izero,
# 1574 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_ie = 18,
# 1575 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_iE = 24,
# 1576 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_iend = 26
# 1577 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 1582 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static void _S_format_float(const ios_base &, char *, char);
# 1583 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 1585 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 1586 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
struct __numpunct_cache : public locale::facet {
# 1588 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char *_M_grouping;
# 1589 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
size_t _M_grouping_size;
# 1590 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
bool _M_use_grouping;
# 1591 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_truename;
# 1592 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
size_t _M_truename_size;
# 1593 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_falsename;
# 1594 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
size_t _M_falsename_size;
# 1595 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_CharT _M_decimal_point;
# 1596 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_CharT _M_thousands_sep;
# 1602 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_CharT _M_atoms_out[__num_base::_S_oend];
# 1608 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_CharT _M_atoms_in[__num_base::_S_iend];
# 1610 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
bool _M_allocated;
# 1612 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__numpunct_cache(size_t __refs = (0)) : locale::facet(__refs), _M_grouping((__null)), _M_grouping_size((0)), _M_use_grouping(false), _M_truename((__null)), _M_truename_size((0)), _M_falsename((__null)), _M_falsename_size((0)), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_allocated(false)
# 1617 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 1619 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual ~__numpunct_cache();
# 1622 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_cache(const locale &);
# 1626 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
private: std::__numpunct_cache< _CharT> &operator=(const std::__numpunct_cache< _CharT> &);
# 1629 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit __numpunct_cache(const std::__numpunct_cache< _CharT> &);
# 1630 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 1632 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 1633 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__numpunct_cache< _CharT> ::~__numpunct_cache()
# 1634 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 1635 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (this->_M_allocated)
# 1636 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 1637 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
delete [] (this->_M_grouping);
# 1638 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
delete [] (this->_M_truename);
# 1639 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
delete [] (this->_M_falsename);
# 1640 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 1641 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 1656 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 1657 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class numpunct : public locale::facet {
# 1663 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 1664 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 1666 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef __numpunct_cache< _CharT> __cache_type;
# 1669 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: __cache_type *_M_data;
# 1673 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: static locale::id id;
# 1681 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit numpunct(size_t __refs = (0)) : locale::facet(__refs), _M_data((__null))
# 1682 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ this->_M_initialize_numpunct(); }
# 1694 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit numpunct(__cache_type *__cache, size_t __refs = (0)) : locale::facet(__refs), _M_data(__cache)
# 1696 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ this->_M_initialize_numpunct(); }
# 1708 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit numpunct(__c_locale __cloc, size_t __refs = (0)) : locale::facet(__refs), _M_data((__null))
# 1710 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ this->_M_initialize_numpunct(__cloc); }
# 1722 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type decimal_point() const
# 1723 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_decimal_point(); }
# 1735 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type thousands_sep() const
# 1736 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_thousands_sep(); }
# 1766 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string grouping() const
# 1767 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_grouping(); }
# 1779 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string_type truename() const
# 1780 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_truename(); }
# 1792 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string_type falsename() const
# 1793 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_falsename(); }
# 1798 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~numpunct();
# 1809 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_decimal_point() const
# 1810 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->_M_data)->_M_decimal_point; }
# 1821 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_thousands_sep() const
# 1822 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->_M_data)->_M_thousands_sep; }
# 1834 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual string do_grouping() const
# 1835 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((this->_M_data)->_M_grouping); }
# 1847 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual string_type do_truename() const
# 1848 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((this->_M_data)->_M_truename); }
# 1860 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual string_type do_falsename() const
# 1861 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((this->_M_data)->_M_falsename); }
# 1865 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_initialize_numpunct(__c_locale = 0);
# 1866 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 1868 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> locale::id
# 1869 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
numpunct< _CharT> ::id;
# 1872 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> numpunct< char> ::~numpunct();
# 1876 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale);
# 1880 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> numpunct< wchar_t> ::~numpunct();
# 1884 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale);
# 1888 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 1889 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class numpunct_byname : public numpunct< _CharT> {
# 1892 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 1893 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 1896 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit numpunct_byname(const char *__s, size_t __refs = (0)) : numpunct< _CharT> (__refs)
# 1898 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 1899 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if ((std::strcmp(__s, "C") != 0) && (std::strcmp(__s, "POSIX") != 0))
# 1900 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 1901 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
auto __c_locale __tmp;
# 1902 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_S_create_c_locale(__tmp, __s));
# 1903 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_M_initialize_numpunct(__tmp));
# 1904 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_S_destroy_c_locale(__tmp));
# 1905 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 1906 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 1910 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~numpunct_byname() { }
# 1911 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 1925 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _InIter>
# 1926 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class num_get : public locale::facet {
# 1932 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 1933 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef _InIter iter_type;
# 1937 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static locale::id id;
# 1947 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit num_get(size_t __refs = (0)) : locale::facet(__refs) { }
# 1973 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 1974 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, bool &__v) const
# 1975 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2009 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2010 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, long &__v) const
# 2011 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2014 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2015 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, unsigned short &__v) const
# 2016 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2019 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2020 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, unsigned &__v) const
# 2021 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2024 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2025 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, unsigned long &__v) const
# 2026 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2030 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2031 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, long long &__v) const
# 2032 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2035 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2036 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, unsigned long long &__v) const
# 2037 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2068 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2069 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, float &__v) const
# 2070 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2073 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2074 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, double &__v) const
# 2075 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2078 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2079 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, long double &__v) const
# 2080 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2110 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2111 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, void *&__v) const
# 2112 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__in, __end, __io, __err, __v)); }
# 2116 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~num_get() { }
# 2119 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type _M_extract_float(iter_type, iter_type, ios_base &, ios_base::iostate &, string &) const;
# 2122 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _ValueT> iter_type _M_extract_int(iter_type, iter_type, ios_base &, ios_base::iostate &, _ValueT &) const;
# 2143 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, bool &) const;
# 2147 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long &) const;
# 2150 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, unsigned short &) const;
# 2154 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, unsigned &) const;
# 2158 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, unsigned long &) const;
# 2163 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long long &) const;
# 2167 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, unsigned long long &) const;
# 2172 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, float &) const;
# 2176 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, double &) const;
# 2180 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long double &) const;
# 2184 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, void *&) const;
# 2187 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 2189 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _InIter> locale::id
# 2190 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
num_get< _CharT, _InIter> ::id;
# 2204 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _OutIter>
# 2205 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class num_put : public locale::facet {
# 2211 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 2212 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef _OutIter iter_type;
# 2216 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static locale::id id;
# 2226 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit num_put(size_t __refs = (0)) : locale::facet(__refs) { }
# 2244 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__f, char_type __fill, bool __v) const
# 2245 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __f, __fill, __v)); }
# 2286 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__f, char_type __fill, long __v) const
# 2287 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __f, __fill, __v)); }
# 2290 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__f, char_type __fill, unsigned long
# 2291 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__v) const
# 2292 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __f, __fill, __v)); }
# 2296 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__f, char_type __fill, long long __v) const
# 2297 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __f, __fill, __v)); }
# 2300 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__f, char_type __fill, unsigned long long
# 2301 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__v) const
# 2302 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __f, __fill, __v)); }
# 2349 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__f, char_type __fill, double __v) const
# 2350 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __f, __fill, __v)); }
# 2353 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__f, char_type __fill, long double
# 2354 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__v) const
# 2355 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __f, __fill, __v)); }
# 2374 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__f, char_type __fill, const void *
# 2375 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__v) const
# 2376 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __f, __fill, __v)); }
# 2379 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: template<class _ValueT> iter_type _M_insert_float(iter_type, ios_base &, char_type, char, _ValueT) const;
# 2385 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_group_float(const char *, size_t, char_type, const char_type *, char_type *, char_type *, int &) const;
# 2389 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _ValueT> iter_type _M_insert_int(iter_type, ios_base &, char_type, _ValueT) const;
# 2395 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_group_int(const char *, size_t, char_type, ios_base &, char_type *, char_type *, int &) const;
# 2400 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_pad(char_type, streamsize, ios_base &, char_type *, const char_type *, int &) const;
# 2405 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual ~num_put() { }
# 2422 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, ios_base &, char_type, bool) const;
# 2425 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, ios_base &, char_type, long) const;
# 2428 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, ios_base &, char_type, unsigned long) const;
# 2432 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, ios_base &, char_type, long long) const;
# 2435 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, ios_base &, char_type, unsigned long long) const;
# 2439 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, ios_base &, char_type, double) const;
# 2442 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, ios_base &, char_type, long double) const;
# 2445 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, ios_base &, char_type, const void *) const;
# 2447 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 2449 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _OutIter> locale::id
# 2450 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
num_put< _CharT, _OutIter> ::id;
# 2465 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 2466 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class collate : public locale::facet {
# 2472 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 2473 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 2479 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_collate;
# 2483 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: static locale::id id;
# 2493 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit collate(size_t __refs = (0)) : locale::facet(__refs), _M_c_locale_collate(_S_get_c_locale())
# 2495 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 2507 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit collate(__c_locale __cloc, size_t __refs = (0)) : locale::facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
# 2509 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 2524 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
int compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 2525 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__lo2, const _CharT *__hi2) const
# 2526 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 2543 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string_type transform(const _CharT *__lo, const _CharT *__hi) const
# 2544 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_transform(__lo, __hi); }
# 2557 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
long hash(const _CharT *__lo, const _CharT *__hi) const
# 2558 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_hash(__lo, __hi); }
# 2562 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
int _M_compare(const _CharT *, const _CharT *) const;
# 2565 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
size_t _M_transform(_CharT *, const _CharT *, size_t) const;
# 2570 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~collate()
# 2571 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ _S_destroy_c_locale(this->_M_c_locale_collate); }
# 2586 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual int do_compare(const _CharT *, const _CharT *, const _CharT *, const _CharT *) const;
# 2602 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual string_type do_transform(const _CharT *, const _CharT *) const;
# 2615 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual long do_hash(const _CharT *, const _CharT *) const;
# 2616 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 2618 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> locale::id
# 2619 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
collate< _CharT> ::id;
# 2624 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> int collate< char> ::_M_compare(const char *, const char *) const;
# 2628 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const;
# 2633 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const;
# 2637 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const;
# 2641 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 2642 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class collate_byname : public collate< _CharT> {
# 2647 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 2648 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 2652 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit collate_byname(const char *__s, size_t __refs = (0)) : collate< _CharT> (__refs)
# 2654 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2655 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if ((std::strcmp(__s, "C") != 0) && (std::strcmp(__s, "POSIX") != 0))
# 2656 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2657 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_S_destroy_c_locale((this->_M_c_locale_collate)));
# 2658 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_S_create_c_locale((this->_M_c_locale_collate), __s));
# 2659 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2660 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2664 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~collate_byname() { }
# 2665 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 2674 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class time_base {
# 2677 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: enum dateorder { no_order, dmy, mdy, ymd, ydm};
# 2678 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 2680 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 2681 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
struct __timepunct_cache : public locale::facet {
# 2684 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static const _CharT *_S_timezones[14];
# 2686 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_date_format;
# 2687 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_date_era_format;
# 2688 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_time_format;
# 2689 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_time_era_format;
# 2690 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_date_time_format;
# 2691 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_date_time_era_format;
# 2692 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_am;
# 2693 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_pm;
# 2694 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_am_pm_format;
# 2697 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_day1;
# 2698 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_day2;
# 2699 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_day3;
# 2700 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_day4;
# 2701 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_day5;
# 2702 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_day6;
# 2703 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_day7;
# 2706 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_aday1;
# 2707 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_aday2;
# 2708 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_aday3;
# 2709 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_aday4;
# 2710 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_aday5;
# 2711 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_aday6;
# 2712 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_aday7;
# 2715 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month01;
# 2716 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month02;
# 2717 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month03;
# 2718 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month04;
# 2719 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month05;
# 2720 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month06;
# 2721 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month07;
# 2722 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month08;
# 2723 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month09;
# 2724 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month10;
# 2725 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month11;
# 2726 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_month12;
# 2729 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth01;
# 2730 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth02;
# 2731 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth03;
# 2732 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth04;
# 2733 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth05;
# 2734 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth06;
# 2735 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth07;
# 2736 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth08;
# 2737 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth09;
# 2738 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth10;
# 2739 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth11;
# 2740 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_amonth12;
# 2742 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
bool _M_allocated;
# 2744 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__timepunct_cache(size_t __refs = (0)) : locale::facet(__refs), _M_date_format((__null)), _M_date_era_format((__null)), _M_time_format((__null)), _M_time_era_format((__null)), _M_date_time_format((__null)), _M_date_time_era_format((__null)), _M_am((__null)), _M_pm((__null)), _M_am_pm_format((__null)), _M_day1((__null)), _M_day2((__null)), _M_day3((__null)), _M_day4((__null)), _M_day5((__null)), _M_day6((__null)), _M_day7((__null)), _M_aday1((__null)), _M_aday2((__null)), _M_aday3((__null)), _M_aday4((__null)), _M_aday5((__null)), _M_aday6((__null)), _M_aday7((__null)), _M_month01((__null)), _M_month02((__null)), _M_month03((__null)), _M_month04((__null)), _M_month05((__null)), _M_month06((__null)), _M_month07((__null)), _M_month08((__null)), _M_month09((__null)), _M_month10((__null)), _M_month11((__null)), _M_month12((__null)), _M_amonth01((__null)), _M_amonth02((__null)), _M_amonth03((__null)), _M_amonth04((__null)), _M_amonth05((__null)), _M_amonth06((__null)), _M_amonth07((__null)), _M_amonth08((__null)), _M_amonth09((__null)), _M_amonth10((__null)), _M_amonth11((__null)), _M_amonth12((__null)), _M_allocated(false)
# 2759 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 2761 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual ~__timepunct_cache();
# 2764 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_cache(const locale &);
# 2768 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
private: std::__timepunct_cache< _CharT> &operator=(const std::__timepunct_cache< _CharT> &);
# 2771 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit __timepunct_cache(const std::__timepunct_cache< _CharT> &);
# 2772 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 2774 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 2775 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__timepunct_cache< _CharT> ::~__timepunct_cache()
# 2776 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2777 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (this->_M_allocated)
# 2778 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2780 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2781 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2786 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> const char *__timepunct_cache< char> ::_S_timezones[14];
# 2791 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> const wchar_t *__timepunct_cache< wchar_t> ::_S_timezones[14];
# 2795 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> const _CharT *
# 2796 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__timepunct_cache< _CharT> ::_S_timezones[14];
# 2798 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 2799 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class __timepunct : public locale::facet {
# 2803 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT __char_type;
# 2804 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> __string_type;
# 2805 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef __timepunct_cache< _CharT> __cache_type;
# 2808 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: __cache_type *_M_data;
# 2809 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__c_locale _M_c_locale_timepunct;
# 2810 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char *_M_name_timepunct;
# 2814 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: static locale::id id;
# 2817 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit __timepunct(size_t = (0));
# 2820 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit __timepunct(__cache_type *, size_t = (0));
# 2833 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit __timepunct(__c_locale, const char *, size_t = (0));
# 2838 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_put(_CharT *, size_t, const _CharT *, const tm *) const;
# 2842 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_date_formats(const _CharT **__date) const
# 2843 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2845 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__date[0]) = ((this->_M_data)->_M_date_format);
# 2846 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__date[1]) = ((this->_M_data)->_M_date_era_format);
# 2847 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2850 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_time_formats(const _CharT **__time) const
# 2851 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2853 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__time[0]) = ((this->_M_data)->_M_time_format);
# 2854 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__time[1]) = ((this->_M_data)->_M_time_era_format);
# 2855 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2858 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_date_time_formats(const _CharT **__dt) const
# 2859 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2861 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__dt[0]) = ((this->_M_data)->_M_date_time_format);
# 2862 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__dt[1]) = ((this->_M_data)->_M_date_time_era_format);
# 2863 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2866 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_am_pm_format(const _CharT *__ampm) const
# 2867 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ __ampm = ((this->_M_data)->_M_am_pm_format); }
# 2870 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_am_pm(const _CharT **__ampm) const
# 2871 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2872 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__ampm[0]) = ((this->_M_data)->_M_am);
# 2873 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__ampm[1]) = ((this->_M_data)->_M_pm);
# 2874 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2877 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_days(const _CharT **__days) const
# 2878 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2879 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[0]) = ((this->_M_data)->_M_day1);
# 2880 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[1]) = ((this->_M_data)->_M_day2);
# 2881 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[2]) = ((this->_M_data)->_M_day3);
# 2882 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[3]) = ((this->_M_data)->_M_day4);
# 2883 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[4]) = ((this->_M_data)->_M_day5);
# 2884 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[5]) = ((this->_M_data)->_M_day6);
# 2885 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[6]) = ((this->_M_data)->_M_day7);
# 2886 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2889 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_days_abbreviated(const _CharT **__days) const
# 2890 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2891 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[0]) = ((this->_M_data)->_M_aday1);
# 2892 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[1]) = ((this->_M_data)->_M_aday2);
# 2893 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[2]) = ((this->_M_data)->_M_aday3);
# 2894 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[3]) = ((this->_M_data)->_M_aday4);
# 2895 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[4]) = ((this->_M_data)->_M_aday5);
# 2896 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[5]) = ((this->_M_data)->_M_aday6);
# 2897 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__days[6]) = ((this->_M_data)->_M_aday7);
# 2898 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2901 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_months(const _CharT **__months) const
# 2902 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2903 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[0]) = ((this->_M_data)->_M_month01);
# 2904 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[1]) = ((this->_M_data)->_M_month02);
# 2905 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[2]) = ((this->_M_data)->_M_month03);
# 2906 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[3]) = ((this->_M_data)->_M_month04);
# 2907 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[4]) = ((this->_M_data)->_M_month05);
# 2908 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[5]) = ((this->_M_data)->_M_month06);
# 2909 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[6]) = ((this->_M_data)->_M_month07);
# 2910 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[7]) = ((this->_M_data)->_M_month08);
# 2911 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[8]) = ((this->_M_data)->_M_month09);
# 2912 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[9]) = ((this->_M_data)->_M_month10);
# 2913 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[10]) = ((this->_M_data)->_M_month11);
# 2914 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[11]) = ((this->_M_data)->_M_month12);
# 2915 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2918 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_months_abbreviated(const _CharT **__months) const
# 2919 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 2920 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[0]) = ((this->_M_data)->_M_amonth01);
# 2921 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[1]) = ((this->_M_data)->_M_amonth02);
# 2922 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[2]) = ((this->_M_data)->_M_amonth03);
# 2923 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[3]) = ((this->_M_data)->_M_amonth04);
# 2924 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[4]) = ((this->_M_data)->_M_amonth05);
# 2925 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[5]) = ((this->_M_data)->_M_amonth06);
# 2926 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[6]) = ((this->_M_data)->_M_amonth07);
# 2927 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[7]) = ((this->_M_data)->_M_amonth08);
# 2928 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[8]) = ((this->_M_data)->_M_amonth09);
# 2929 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[9]) = ((this->_M_data)->_M_amonth10);
# 2930 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[10]) = ((this->_M_data)->_M_amonth11);
# 2931 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(__months[11]) = ((this->_M_data)->_M_amonth12);
# 2932 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 2936 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~__timepunct();
# 2940 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_initialize_timepunct(__c_locale = 0);
# 2941 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 2943 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> locale::id
# 2944 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__timepunct< _CharT> ::id;
# 2949 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void __timepunct< char> ::_M_initialize_timepunct(__c_locale);
# 2953 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void __timepunct< char> ::_M_put(char *, size_t, const char *, const tm *) const;
# 2958 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void __timepunct< wchar_t> ::_M_initialize_timepunct(__c_locale);
# 2962 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void __timepunct< wchar_t> ::_M_put(wchar_t *, size_t, const wchar_t *, const tm *) const;
# 37 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
template<class _CharT>
# 38 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
__timepunct< _CharT> ::__timepunct(size_t __refs) : locale::facet(__refs), _M_data((__null))
# 40 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
{
# 41 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
(this->_M_name_timepunct) = _S_get_c_name();
# 42 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
this->_M_initialize_timepunct();
# 43 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
}
# 45 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
template<class _CharT>
# 46 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
__timepunct< _CharT> ::__timepunct(__cache_type *__cache, size_t __refs) : locale::facet(__refs), _M_data(__cache)
# 48 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
{
# 49 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
(this->_M_name_timepunct) = _S_get_c_name();
# 50 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
this->_M_initialize_timepunct();
# 51 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
}
# 53 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
template<class _CharT>
# 54 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
__timepunct< _CharT> ::__timepunct(__c_locale __cloc, const char *__s, size_t
# 55 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
__refs) : locale::facet(__refs), _M_data((__null))
# 57 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
{
# 58 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
auto char *__tmp = (new char [std::strlen(__s) + (1)]);
# 59 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
std::strcpy(__tmp, __s);
# 60 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
(this->_M_name_timepunct) = __tmp;
# 61 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
this->_M_initialize_timepunct(__cloc);
# 62 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
}
# 64 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
template<class _CharT>
# 65 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
__timepunct< _CharT> ::~__timepunct()
# 66 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
{
# 67 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
if (this->_M_name_timepunct != _S_get_c_name()) {
# 68 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
delete [] (this->_M_name_timepunct); }
# 69 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
delete (this->_M_data);
# 70 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
_S_destroy_c_locale(this->_M_c_locale_timepunct);
# 71 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/time_members.h" 3
}
# 2981 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _InIter>
# 2982 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class time_get : public locale::facet, public time_base {
# 2988 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 2989 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef _InIter iter_type;
# 2991 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> __string_type;
# 2994 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static locale::id id;
# 3004 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit time_get(size_t __refs = (0)) : locale::facet(__refs)
# 3005 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 3021 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
dateorder date_order() const
# 3022 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_date_order(); }
# 3045 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get_time(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 3046 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, tm *__tm) const
# 3047 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_get_time(__beg, __end, __io, __err, __tm); }
# 3070 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get_date(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 3071 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, tm *__tm) const
# 3072 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_get_date(__beg, __end, __io, __err, __tm); }
# 3098 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get_weekday(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 3099 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, tm *__tm) const
# 3100 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_get_weekday(__beg, __end, __io, __err, __tm); }
# 3127 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get_monthname(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 3128 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, tm *__tm) const
# 3129 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_get_monthname(__beg, __end, __io, __err, __tm); }
# 3153 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get_year(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 3154 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, tm *__tm) const
# 3155 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_get_year(__beg, __end, __io, __err, __tm); }
# 3160 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~time_get() { }
# 3173 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual dateorder do_date_order() const;
# 3191 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get_time(iter_type, iter_type, ios_base &, ios_base::iostate &, tm *) const;
# 3210 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get_date(iter_type, iter_type, ios_base &, ios_base::iostate &, tm *) const;
# 3229 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get_weekday(iter_type, iter_type, ios_base &, ios_base::iostate &, tm *) const;
# 3248 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get_monthname(iter_type, iter_type, ios_base &, ios_base::iostate &, tm *) const;
# 3267 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get_year(iter_type, iter_type, ios_base &, ios_base::iostate &, tm *) const;
# 3272 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type _M_extract_num(iter_type, iter_type, int &, int, int, size_t, ios_base &, ios_base::iostate &) const;
# 3279 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type _M_extract_name(iter_type, iter_type, int &, const _CharT **, size_t, ios_base &, ios_base::iostate &) const;
# 3285 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type _M_extract_via_format(iter_type, iter_type, ios_base &, ios_base::iostate &, tm *, const _CharT *) const;
# 3288 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 3290 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _InIter> locale::id
# 3291 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
time_get< _CharT, _InIter> ::id;
# 3294 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _InIter>
# 3295 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class time_get_byname : public time_get< _CharT, _InIter> {
# 3299 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 3300 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef _InIter iter_type;
# 3303 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit time_get_byname(const char *, size_t __refs = (0)) : time_get< _CharT, _InIter> (__refs)
# 3304 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 3308 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~time_get_byname() { }
# 3309 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 3322 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _OutIter>
# 3323 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class time_put : public locale::facet {
# 3329 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 3330 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef _OutIter iter_type;
# 3334 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static locale::id id;
# 3344 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit time_put(size_t __refs = (0)) : locale::facet(__refs)
# 3345 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 3363 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type, ios_base &, char_type, const tm *, const _CharT *, const _CharT *) const;
# 3383 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, const tm *
# 3384 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__tm, char __format, char __mod = (0)) const
# 3385 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_put(__s, __io, __fill, __tm, __format, __mod); }
# 3390 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~time_put()
# 3391 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 3410 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, ios_base &, char_type, const tm *, char, char) const;
# 3412 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 3414 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _OutIter> locale::id
# 3415 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
time_put< _CharT, _OutIter> ::id;
# 3418 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _OutIter>
# 3419 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class time_put_byname : public time_put< _CharT, _OutIter> {
# 3423 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 3424 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef _OutIter iter_type;
# 3427 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit time_put_byname(const char *, size_t __refs = (0)) : time_put< _CharT, _OutIter> (__refs)
# 3429 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 3433 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~time_put_byname() { }
# 3434 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 3447 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class money_base {
# 3450 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: enum part { none, space, symbol, sign, value};
# 3451 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
struct pattern { char field[4]; };
# 3453 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static const pattern _S_default_pattern;
# 3456 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
enum __cuda__S_minus {
# 3457 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_minus,
# 3458 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_zero,
# 3459 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_S_end = 11
# 3460 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 3464 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static const char *_S_atoms;
# 3469 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static pattern _S_construct_pattern(char, char, char);
# 3470 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 3472 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, bool _Intl>
# 3473 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
struct __moneypunct_cache : public locale::facet {
# 3475 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char *_M_grouping;
# 3476 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
size_t _M_grouping_size;
# 3477 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
bool _M_use_grouping;
# 3478 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_CharT _M_decimal_point;
# 3479 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_CharT _M_thousands_sep;
# 3480 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_curr_symbol;
# 3481 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
size_t _M_curr_symbol_size;
# 3482 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_positive_sign;
# 3483 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
size_t _M_positive_sign_size;
# 3484 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const _CharT *_M_negative_sign;
# 3485 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
size_t _M_negative_sign_size;
# 3486 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
int _M_frac_digits;
# 3487 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
money_base::pattern _M_pos_format;
# 3488 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
money_base::pattern _M_neg_format;
# 3493 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
_CharT _M_atoms[money_base::_S_end];
# 3495 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
bool _M_allocated;
# 3497 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__moneypunct_cache(size_t __refs = (0)) : locale::facet(__refs), _M_grouping((__null)), _M_grouping_size((0)), _M_use_grouping(false), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_curr_symbol((__null)), _M_curr_symbol_size((0)), _M_positive_sign((__null)), _M_positive_sign_size((0)), _M_negative_sign((__null)), _M_negative_sign_size((0)), _M_frac_digits(0), _M_pos_format(money_base::pattern()), _M_neg_format(money_base::pattern()), _M_allocated(false)
# 3506 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 3508 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual ~__moneypunct_cache();
# 3511 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_cache(const locale &);
# 3515 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
private: std::__moneypunct_cache< _CharT, _Intl> &operator=(const std::__moneypunct_cache< _CharT, _Intl> &);
# 3518 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit __moneypunct_cache(const std::__moneypunct_cache< _CharT, _Intl> &);
# 3519 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 3521 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, bool _Intl>
# 3522 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__moneypunct_cache< _CharT, _Intl> ::~__moneypunct_cache()
# 3523 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 3524 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if (this->_M_allocated)
# 3525 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 3526 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
delete [] (this->_M_grouping);
# 3527 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
delete [] (this->_M_curr_symbol);
# 3528 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
delete [] (this->_M_positive_sign);
# 3529 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
delete [] (this->_M_negative_sign);
# 3530 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 3531 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 3539 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, bool _Intl>
# 3540 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class moneypunct : public locale::facet, public money_base {
# 3546 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 3547 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 3549 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef __moneypunct_cache< _CharT, _Intl> __cache_type;
# 3552 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
private: __cache_type *_M_data;
# 3557 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: static const bool intl = _Intl;
# 3559 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static locale::id id;
# 3569 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit moneypunct(size_t __refs = (0)) : locale::facet(__refs), _M_data((__null))
# 3570 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ this->_M_initialize_moneypunct(); }
# 3581 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit moneypunct(__cache_type *__cache, size_t __refs = (0)) : locale::facet(__refs), _M_data(__cache)
# 3583 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ this->_M_initialize_moneypunct(); }
# 3596 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit moneypunct(__c_locale __cloc, const char *__s, size_t __refs = (0)) : locale::facet(__refs), _M_data((__null))
# 3598 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ this->_M_initialize_moneypunct(__cloc, __s); }
# 3610 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type decimal_point() const
# 3611 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_decimal_point(); }
# 3623 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char_type thousands_sep() const
# 3624 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_thousands_sep(); }
# 3652 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string grouping() const
# 3653 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_grouping(); }
# 3665 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string_type curr_symbol() const
# 3666 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_curr_symbol(); }
# 3682 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string_type positive_sign() const
# 3683 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_positive_sign(); }
# 3699 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string_type negative_sign() const
# 3700 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_negative_sign(); }
# 3715 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
int frac_digits() const
# 3716 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_frac_digits(); }
# 3750 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
pattern pos_format() const
# 3751 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_pos_format(); }
# 3754 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
pattern neg_format() const
# 3755 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_neg_format(); }
# 3761 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~moneypunct();
# 3772 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_decimal_point() const
# 3773 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->_M_data)->_M_decimal_point; }
# 3784 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual char_type do_thousands_sep() const
# 3785 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->_M_data)->_M_thousands_sep; }
# 3797 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual string do_grouping() const
# 3798 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((this->_M_data)->_M_grouping); }
# 3810 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual string_type do_curr_symbol() const
# 3811 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((this->_M_data)->_M_curr_symbol); }
# 3823 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual string_type do_positive_sign() const
# 3824 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((this->_M_data)->_M_positive_sign); }
# 3836 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual string_type do_negative_sign() const
# 3837 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((this->_M_data)->_M_negative_sign); }
# 3850 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual int do_frac_digits() const
# 3851 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->_M_data)->_M_frac_digits; }
# 3864 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual pattern do_pos_format() const
# 3865 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((this->_M_data)->_M_pos_format); }
# 3878 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual pattern do_neg_format() const
# 3879 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((this->_M_data)->_M_neg_format); }
# 3883 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void _M_initialize_moneypunct(__c_locale = 0, const char * = 0);
# 3885 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 3887 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, bool _Intl> locale::id
# 3888 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
moneypunct< _CharT, _Intl> ::id;
# 3890 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, bool _Intl> const bool
# 3891 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
moneypunct< _CharT, _Intl> ::intl;
# 3894 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> moneypunct< char, true> ::~moneypunct();
# 3897 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> moneypunct< char, false> ::~moneypunct();
# 3901 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void moneypunct< char, true> ::_M_initialize_moneypunct(__c_locale, const char *);
# 3905 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void moneypunct< char, false> ::_M_initialize_moneypunct(__c_locale, const char *);
# 3909 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> moneypunct< wchar_t, true> ::~moneypunct();
# 3912 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> moneypunct< wchar_t, false> ::~moneypunct();
# 3916 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void moneypunct< wchar_t, true> ::_M_initialize_moneypunct(__c_locale, const char *);
# 3921 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> void moneypunct< wchar_t, false> ::_M_initialize_moneypunct(__c_locale, const char *);
# 3926 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, bool _Intl>
# 3927 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class moneypunct_byname : public moneypunct< _CharT, _Intl> {
# 3930 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 3931 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 3933 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static const bool intl = _Intl;
# 3936 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit moneypunct_byname(const char *__s, size_t __refs = (0)) : moneypunct< _CharT, _Intl> (__refs)
# 3938 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 3939 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
if ((std::strcmp(__s, "C") != 0) && (std::strcmp(__s, "POSIX") != 0))
# 3940 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 3941 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
auto __c_locale __tmp;
# 3942 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_S_create_c_locale(__tmp, __s));
# 3943 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_M_initialize_moneypunct(__tmp));
# 3944 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
(this->_S_destroy_c_locale(__tmp));
# 3945 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 3946 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 3950 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~moneypunct_byname() { }
# 3951 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 3953 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, bool _Intl> const bool
# 3954 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
moneypunct_byname< _CharT, _Intl> ::intl;
# 3968 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _InIter>
# 3969 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class money_get : public locale::facet {
# 3975 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 3976 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef _InIter iter_type;
# 3977 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 3981 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static locale::id id;
# 3991 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit money_get(size_t __refs = (0)) : locale::facet(__refs) { }
# 4021 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __s, iter_type __end, bool __intl, ios_base &__io, ios_base::iostate &
# 4022 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, long double &__units) const
# 4023 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__s, __end, __intl, __io, __err, __units)); }
# 4051 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type get(iter_type __s, iter_type __end, bool __intl, ios_base &__io, ios_base::iostate &
# 4052 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__err, string_type &__digits) const
# 4053 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_get(__s, __end, __intl, __io, __err, __digits)); }
# 4058 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~money_get() { }
# 4068 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, bool, ios_base &, ios_base::iostate &, long double &) const;
# 4079 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, bool, ios_base &, ios_base::iostate &, string_type &) const;
# 4082 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<bool _Intl> iter_type _M_extract(iter_type, iter_type, ios_base &, ios_base::iostate &, string &) const;
# 4086 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 4088 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _InIter> locale::id
# 4089 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
money_get< _CharT, _InIter> ::id;
# 4103 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _OutIter>
# 4104 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class money_put : public locale::facet {
# 4109 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 4110 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef _OutIter iter_type;
# 4111 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 4115 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
static locale::id id;
# 4125 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit money_put(size_t __refs = (0)) : locale::facet(__refs) { }
# 4145 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, bool __intl, ios_base &__io, char_type
# 4146 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__fill, long double __units) const
# 4147 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __intl, __io, __fill, __units)); }
# 4167 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iter_type put(iter_type __s, bool __intl, ios_base &__io, char_type
# 4168 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
__fill, const string_type &__digits) const
# 4169 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return (this->do_put(__s, __intl, __io, __fill, __digits)); }
# 4174 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~money_put() { }
# 4195 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, bool, ios_base &, char_type, long double) const;
# 4217 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type, bool, ios_base &, char_type, const string_type &) const;
# 4220 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<bool _Intl> iter_type _M_insert(iter_type, ios_base &, char_type, const string_type &) const;
# 4224 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 4226 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT, class _OutIter> locale::id
# 4227 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
money_put< _CharT, _OutIter> ::id;
# 4232 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
struct messages_base {
# 4234 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef int catalog;
# 4235 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 4257 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 4258 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class messages : public locale::facet, public messages_base {
# 4264 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 4265 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 4271 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_messages;
# 4272 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
const char *_M_name_messages;
# 4276 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: static locale::id id;
# 4286 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit messages(size_t = (0));
# 4300 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit messages(__c_locale, const char *, size_t = (0));
# 4313 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
catalog open(const basic_string< char, char_traits< char> , allocator< char> > &__s, const locale &__loc) const
# 4314 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_open(__s, __loc); }
# 4331 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
catalog open(const basic_string< char, char_traits< char> , allocator< char> > &, const locale &, const char *) const;
# 4349 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string_type get(catalog __c, int __set, int __msgid, const string_type &__s) const
# 4350 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_get(__c, __set, __msgid, __s); }
# 4360 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
void close(catalog __c) const
# 4361 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return this->do_close(__c); }
# 4366 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~messages();
# 4380 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual catalog do_open(const basic_string< char, char_traits< char> , allocator< char> > &, const locale &) const;
# 4399 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual string_type do_get(catalog, int, int, const string_type &) const;
# 4407 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
virtual void do_close(catalog) const;
# 4411 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
char *_M_convert_to_char(const string_type &__msg) const
# 4412 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 4414 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return reinterpret_cast< char *>(const_cast< _CharT *>((__msg.c_str())));
# 4415 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 4419 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
string_type _M_convert_from_char(char *) const
# 4420 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{
# 4455 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
return string_type();
# 4456 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 4457 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 4459 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> locale::id
# 4460 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
messages< _CharT> ::id;
# 4465 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> string messages< char> ::do_get(catalog, int, int, const string &) const;
# 4470 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<> wstring messages< wchar_t> ::do_get(catalog, int, int, const wstring &) const;
# 4474 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT>
# 4475 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
class messages_byname : public messages< _CharT> {
# 4478 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
public: typedef _CharT char_type;
# 4479 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
typedef basic_string< _CharT> string_type;
# 4482 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
explicit messages_byname(const char *, size_t = (0));
# 4486 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
protected: virtual ~messages_byname()
# 4487 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ }
# 4488 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
};
# 37 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
template<class _CharT>
# 38 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
messages< _CharT> ::messages(size_t __refs) : locale::facet(__refs)
# 40 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
{ (this->_M_c_locale_messages) = _S_get_c_locale(); }
# 42 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
template<class _CharT>
# 43 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
messages< _CharT> ::messages(__c_locale, const char *, size_t __refs) : locale::facet(__refs)
# 45 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
{ (this->_M_c_locale_messages) = _S_get_c_locale(); }
# 47 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
template<class _CharT> messages_base::catalog
# 49 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
messages< _CharT> ::open(const basic_string< char, char_traits< char> , allocator< char> > &__s, const locale &__loc, const char *) const
# 51 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
{ return this->do_open(__s, __loc); }
# 54 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
template<class _CharT>
# 55 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
messages< _CharT> ::~messages()
# 56 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
{ _S_destroy_c_locale(this->_M_c_locale_messages); }
# 58 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
template<class _CharT> messages_base::catalog
# 60 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
messages< _CharT> ::do_open(const basic_string< char, char_traits< char> , allocator< char> > &, const locale &) const
# 61 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
{ return 0; }
# 63 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
template<class _CharT> typename messages< _CharT> ::string_type
# 65 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
messages< _CharT> ::do_get(catalog, int, int, const string_type &
# 66 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
__dfault) const
# 67 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
{ return __dfault; }
# 69 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
template<class _CharT> void
# 71 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
messages< _CharT> ::do_close(catalog) const
# 72 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
{ }
# 75 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
template<class _CharT>
# 76 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
messages_byname< _CharT> ::messages_byname(const char *__s, size_t __refs) : messages< _CharT> (__refs)
# 78 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
{
# 79 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
if ((std::strcmp(__s, "C") != 0) && (std::strcmp(__s, "POSIX") != 0))
# 80 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
{
# 81 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
(this->_S_destroy_c_locale((this->_M_c_locale_messages)));
# 82 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
(this->_S_create_c_locale((this->_M_c_locale_messages), __s));
# 83 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
}
# 84 "/usr/include/c++/4.0.0/i686-apple-darwin9/bits/messages_members.h" 3
}
# 4500 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4502 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
isspace(_CharT __c, const locale &__loc)
# 4503 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::space, __c)); }
# 4506 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4508 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
isprint(_CharT __c, const locale &__loc)
# 4509 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::print, __c)); }
# 4512 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4514 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
iscntrl(_CharT __c, const locale &__loc)
# 4515 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::cntrl, __c)); }
# 4518 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4520 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
isupper(_CharT __c, const locale &__loc)
# 4521 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::upper, __c)); }
# 4524 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4526 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
islower(_CharT __c, const locale &__loc)
# 4527 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::lower, __c)); }
# 4530 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4532 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
isalpha(_CharT __c, const locale &__loc)
# 4533 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::alpha, __c)); }
# 4536 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4538 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
isdigit(_CharT __c, const locale &__loc)
# 4539 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::digit, __c)); }
# 4542 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4544 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
ispunct(_CharT __c, const locale &__loc)
# 4545 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::punct, __c)); }
# 4548 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4550 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
isxdigit(_CharT __c, const locale &__loc)
# 4551 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::xdigit, __c)); }
# 4554 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4556 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
isalnum(_CharT __c, const locale &__loc)
# 4557 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::alnum, __c)); }
# 4560 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline bool
# 4562 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
isgraph(_CharT __c, const locale &__loc)
# 4563 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).is(ctype_base::graph, __c)); }
# 4566 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline _CharT
# 4568 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
toupper(_CharT __c, const locale &__loc)
# 4569 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).toupper(__c)); }
# 4572 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
template<class _CharT> inline _CharT
# 4574 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
tolower(_CharT __c, const locale &__loc)
# 4575 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
{ return ((use_facet< ctype< _CharT> > (__loc)).tolower(__c)); }
# 4576 "/usr/include/c++/4.0.0/bits/locale_facets.h" 3
}
# 46 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
namespace std {
# 55 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
template<class _CharT, class _Traits>
# 56 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
class basic_ios : public ios_base {
# 65 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
public: typedef _CharT char_type;
# 66 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
typedef typename _Traits::int_type int_type;
# 67 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
typedef typename _Traits::pos_type pos_type;
# 68 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
typedef typename _Traits::off_type off_type;
# 69 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
typedef _Traits traits_type;
# 78 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
typedef ctype< _CharT> __ctype_type;
# 80 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> > __num_put_type;
# 82 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> > __num_get_type;
# 87 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
protected: basic_ostream< _CharT, _Traits> *_M_tie;
# 88 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
mutable char_type _M_fill;
# 89 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
mutable bool _M_fill_init;
# 90 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
basic_streambuf< _CharT, _Traits> *_M_streambuf;
# 93 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
const __ctype_type *_M_ctype;
# 95 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
const __num_put_type *_M_num_put;
# 97 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
const __num_get_type *_M_num_get;
# 107 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
public: operator void *() const
# 108 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return this->fail() ? 0 : (const_cast< std::basic_ios< _CharT, _Traits> *>(this)); }
# 111 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
bool operator!() const
# 112 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return this->fail(); }
# 123 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
iostate rdstate() const
# 124 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return this->_M_streambuf_state; }
# 134 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
void clear(iostate = goodbit);
# 143 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
void setstate(iostate __state)
# 144 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ this->clear((this->rdstate() | __state)); }
# 150 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
void _M_setstate(iostate __state)
# 151 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{
# 154 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
((this->_M_streambuf_state) |= __state);
# 155 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
if ((this->exceptions() & __state)) {
# 156 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
throw; }
# 157 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
}
# 166 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
bool good() const
# 167 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return this->rdstate() == 0; }
# 176 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
bool eof() const
# 177 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return (this->rdstate() & _S_eofbit) != 0; }
# 187 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
bool fail() const
# 188 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return (this->rdstate() & (_S_badbit | _S_failbit)) != 0; }
# 197 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
bool bad() const
# 198 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return (this->rdstate() & _S_badbit) != 0; }
# 208 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
iostate exceptions() const
# 209 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return this->_M_exception; }
# 243 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
void exceptions(iostate __except)
# 244 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{
# 245 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
(this->_M_exception) = __except;
# 246 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
this->clear(this->_M_streambuf_state);
# 247 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
}
# 256 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
explicit basic_ios(basic_streambuf< _CharT, _Traits> *__sb) : ios_base(), _M_tie((0)), _M_fill(), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0))
# 259 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ this->init(__sb); }
# 268 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
virtual ~basic_ios() { }
# 281 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits> *tie() const
# 282 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return this->_M_tie; }
# 293 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits> *tie(basic_ostream< _CharT, _Traits> *__tiestr)
# 294 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{
# 295 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
auto basic_ostream< _CharT, _Traits> *__old = (this->_M_tie);
# 296 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
(this->_M_tie) = __tiestr;
# 297 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
return __old;
# 298 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
}
# 307 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
basic_streambuf< _CharT, _Traits> *rdbuf() const
# 308 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ return this->_M_streambuf; }
# 333 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
basic_streambuf< _CharT, _Traits> *rdbuf(basic_streambuf< _CharT, _Traits> *);
# 347 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
std::basic_ios< _CharT, _Traits> &copyfmt(const std::basic_ios< _CharT, _Traits> &);
# 356 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
char_type fill() const
# 357 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{
# 358 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
if (!(this->_M_fill_init))
# 359 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{
# 360 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
(this->_M_fill) = this->widen(' ');
# 361 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
(this->_M_fill_init) = true;
# 362 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
}
# 363 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
return this->_M_fill;
# 364 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
}
# 376 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
char_type fill(char_type __ch)
# 377 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{
# 378 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
auto char_type __old = ((this->fill()));
# 379 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
(this->_M_fill) = __ch;
# 380 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
return __old;
# 381 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
}
# 396 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
locale imbue(const locale &);
# 416 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
char narrow(char_type, char) const;
# 434 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
char_type widen(char) const;
# 444 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
protected: basic_ios() : ios_base(), _M_tie((0)), _M_fill(char_type()), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0))
# 447 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
{ }
# 456 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
void init(basic_streambuf< _CharT, _Traits> *);
# 459 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
void _M_cache_locale(const locale &);
# 460 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
};
# 461 "/usr/include/c++/4.0.0/bits/basic_ios.h" 3
}
# 40 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
namespace std {
# 42 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
template<class _CharT, class _Traits> void
# 44 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
basic_ios< _CharT, _Traits> ::clear(iostate __state)
# 45 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{
# 46 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
if ((this->rdbuf())) {
# 47 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_streambuf_state) = __state; } else {
# 49 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_streambuf_state) = (__state | _S_badbit); }
# 50 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
if ((this->exceptions() & this->rdstate())) {
# 51 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
__throw_ios_failure("basic_ios::clear"); }
# 52 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
}
# 54 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
template<class _CharT, class _Traits> basic_streambuf< _CharT, _Traits> *
# 56 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
basic_ios< _CharT, _Traits> ::rdbuf(basic_streambuf< _CharT, _Traits> *__sb)
# 57 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{
# 58 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
auto basic_streambuf< _CharT, _Traits> *__old = (this->_M_streambuf);
# 59 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_streambuf) = __sb;
# 60 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->clear();
# 61 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
return __old;
# 62 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
}
# 64 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
template<class _CharT, class _Traits> basic_ios< _CharT, _Traits> &
# 66 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
basic_ios< _CharT, _Traits> ::copyfmt(const std::basic_ios< _CharT, _Traits> &__rhs)
# 67 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{
# 70 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
if (this != &__rhs)
# 71 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{
# 76 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
auto _Words *__words = ((__rhs._M_word_size <= _S_local_word_size) ? (this->_M_local_word) : (new _Words [__rhs._M_word_size]));
# 80 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
auto _Callback_list *__cb = (__rhs._M_callbacks);
# 81 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
if (__cb) {
# 82 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
__cb->_M_add_reference(); }
# 83 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->_M_call_callbacks(erase_event);
# 84 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
if (this->_M_word != this->_M_local_word)
# 85 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{
# 86 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
delete [] (this->_M_word);
# 87 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_word) = (0);
# 88 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
}
# 89 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->_M_dispose_callbacks();
# 92 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_callbacks) = __cb;
# 93 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
for (int __i = 0; __i < __rhs._M_word_size; ++__i) {
# 94 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(__words[__i]) = (__rhs._M_word)[__i]; }
# 95 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_word) = __words;
# 96 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_word_size) = __rhs._M_word_size;
# 98 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->flags(__rhs.flags());
# 99 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->width(__rhs.width());
# 100 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->precision(__rhs.precision());
# 101 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->tie(((&__rhs)->tie())));
# 102 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->fill(((&__rhs)->fill())));
# 103 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
((this->_M_ios_locale) = __rhs.getloc());
# 104 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->_M_cache_locale(this->_M_ios_locale);
# 106 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->_M_call_callbacks(copyfmt_event);
# 109 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->exceptions(__rhs.exceptions());
# 110 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
}
# 111 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
return *this;
# 112 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
}
# 114 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
template<class _CharT, class _Traits> char
# 116 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
basic_ios< _CharT, _Traits> ::narrow(char_type __c, char __dfault) const
# 117 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{ return ((__check_facet(this->_M_ctype)).narrow(__c, __dfault)); }
# 119 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
template<class _CharT, class _Traits> typename basic_ios< _CharT, _Traits> ::char_type
# 121 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
basic_ios< _CharT, _Traits> ::widen(char __c) const
# 122 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{ return ((__check_facet(this->_M_ctype)).widen(__c)); }
# 125 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
template<class _CharT, class _Traits> locale
# 127 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
basic_ios< _CharT, _Traits> ::imbue(const locale &__loc)
# 128 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{
# 129 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
auto locale __old(this->getloc());
# 130 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->ios_base::imbue(__loc);
# 131 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->_M_cache_locale(__loc);
# 132 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
if ((this->rdbuf()) != 0) {
# 133 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(((this->rdbuf()))->pubimbue(__loc)); }
# 134 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
return __old;
# 135 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
}
# 137 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
template<class _CharT, class _Traits> void
# 139 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
basic_ios< _CharT, _Traits> ::init(basic_streambuf< _CharT, _Traits> *__sb)
# 140 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{
# 142 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->ios_base::_M_init();
# 145 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
this->_M_cache_locale(this->_M_ios_locale);
# 159 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_fill) = _CharT();
# 160 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_fill_init) = false;
# 162 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_tie) = 0;
# 163 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_exception) = goodbit;
# 164 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_streambuf) = __sb;
# 165 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_streambuf_state) = (__sb) ? goodbit : badbit;
# 166 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
}
# 168 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
template<class _CharT, class _Traits> void
# 170 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
basic_ios< _CharT, _Traits> ::_M_cache_locale(const locale &__loc)
# 171 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
{
# 172 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
if (__builtin_expect(has_facet< ctype< _CharT> > (__loc), true)) {
# 173 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_ctype) = &(use_facet< ctype< _CharT> > (__loc)); } else {
# 175 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_ctype) = 0; }
# 177 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
if (__builtin_expect(has_facet< num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> > > (__loc), true)) {
# 178 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_num_put) = &(use_facet< num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> > > (__loc)); } else {
# 180 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_num_put) = 0; }
# 182 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
if (__builtin_expect(has_facet< num_get< _CharT, istreambuf_iterator< _CharT, _Traits> > > (__loc), true)) {
# 183 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_num_get) = &(use_facet< num_get< _CharT, istreambuf_iterator< _CharT, _Traits> > > (__loc)); } else {
# 185 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
(this->_M_num_get) = 0; }
# 186 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
}
# 192 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
extern template class basic_ios< char, char_traits< char> > ;
# 195 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
extern template class basic_ios< wchar_t, char_traits< wchar_t> > ;
# 198 "/usr/include/c++/4.0.0/bits/basic_ios.tcc" 3
}
# 46 "/usr/include/c++/4.0.0/ostream" 3
namespace std {
# 56 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT, class _Traits>
# 57 "/usr/include/c++/4.0.0/ostream" 3
class basic_ostream : virtual public basic_ios< _CharT, _Traits> {
# 61 "/usr/include/c++/4.0.0/ostream" 3
public: typedef _CharT char_type;
# 62 "/usr/include/c++/4.0.0/ostream" 3
typedef typename _Traits::int_type int_type;
# 63 "/usr/include/c++/4.0.0/ostream" 3
typedef typename _Traits::pos_type pos_type;
# 64 "/usr/include/c++/4.0.0/ostream" 3
typedef typename _Traits::off_type off_type;
# 65 "/usr/include/c++/4.0.0/ostream" 3
typedef _Traits traits_type;
# 68 "/usr/include/c++/4.0.0/ostream" 3
typedef basic_streambuf< _CharT, _Traits> __streambuf_type;
# 69 "/usr/include/c++/4.0.0/ostream" 3
typedef basic_ios< _CharT, _Traits> __ios_type;
# 70 "/usr/include/c++/4.0.0/ostream" 3
typedef std::basic_ostream< _CharT, _Traits> __ostream_type;
# 72 "/usr/include/c++/4.0.0/ostream" 3
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> > __num_put_type;
# 73 "/usr/include/c++/4.0.0/ostream" 3
typedef ctype< _CharT> __ctype_type;
# 75 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT2, class _Traits2> friend std::basic_ostream< _CharT2, _Traits2> &operator<<(std::basic_ostream< _CharT2, _Traits2> &, _CharT2);
# 79 "/usr/include/c++/4.0.0/ostream" 3
template<class _Traits2> friend std::basic_ostream< char, _Traits2> &operator<<(std::basic_ostream< char, _Traits2> &, char);
# 83 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT2, class _Traits2> friend std::basic_ostream< _CharT2, _Traits2> &operator<<(std::basic_ostream< _CharT2, _Traits2> &, const _CharT2 *);
# 87 "/usr/include/c++/4.0.0/ostream" 3
template<class _Traits2> friend std::basic_ostream< char, _Traits2> &operator<<(std::basic_ostream< char, _Traits2> &, const char *);
# 91 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT2, class _Traits2> friend std::basic_ostream< _CharT2, _Traits2> &operator<<(std::basic_ostream< _CharT2, _Traits2> &, const char *);
# 104 "/usr/include/c++/4.0.0/ostream" 3
explicit basic_ostream(__streambuf_type *__sb)
# 105 "/usr/include/c++/4.0.0/ostream" 3
{ (this->init(__sb)); }
# 113 "/usr/include/c++/4.0.0/ostream" 3
virtual ~basic_ostream() { }
# 116 "/usr/include/c++/4.0.0/ostream" 3
class sentry;
# 117 "/usr/include/c++/4.0.0/ostream" 3
friend class sentry;
# 130 "/usr/include/c++/4.0.0/ostream" 3
inline __ostream_type &operator<<(__ostream_type &(*)(__ostream_type &));
# 133 "/usr/include/c++/4.0.0/ostream" 3
inline __ostream_type &operator<<(__ios_type &(*)(__ios_type &));
# 136 "/usr/include/c++/4.0.0/ostream" 3
inline __ostream_type &operator<<(ios_base &(*)(ios_base &));
# 167 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(long);
# 170 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(unsigned long);
# 173 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(bool);
# 176 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(short __n)
# 177 "/usr/include/c++/4.0.0/ostream" 3
{
# 178 "/usr/include/c++/4.0.0/ostream" 3
auto ios_base::fmtflags __fmt = (((this->flags())) & ios_base::basefield);
# 179 "/usr/include/c++/4.0.0/ostream" 3
if (((__fmt & _S_oct)) || ((__fmt & _S_hex))) {
# 180 "/usr/include/c++/4.0.0/ostream" 3
return (this->operator<<(static_cast< unsigned long>((static_cast< unsigned short>(__n))))); } else {
# 183 "/usr/include/c++/4.0.0/ostream" 3
return (this->operator<<(static_cast< long>(__n))); }
# 184 "/usr/include/c++/4.0.0/ostream" 3
}
# 187 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(unsigned short __n)
# 188 "/usr/include/c++/4.0.0/ostream" 3
{ return (this->operator<<(static_cast< unsigned long>(__n))); }
# 191 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(int __n)
# 192 "/usr/include/c++/4.0.0/ostream" 3
{
# 193 "/usr/include/c++/4.0.0/ostream" 3
auto ios_base::fmtflags __fmt = (((this->flags())) & ios_base::basefield);
# 194 "/usr/include/c++/4.0.0/ostream" 3
if (((__fmt & _S_oct)) || ((__fmt & _S_hex))) {
# 195 "/usr/include/c++/4.0.0/ostream" 3
return (this->operator<<(static_cast< unsigned long>((static_cast< unsigned>(__n))))); } else {
# 198 "/usr/include/c++/4.0.0/ostream" 3
return (this->operator<<(static_cast< long>(__n))); }
# 199 "/usr/include/c++/4.0.0/ostream" 3
}
# 202 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(unsigned __n)
# 203 "/usr/include/c++/4.0.0/ostream" 3
{ return (this->operator<<(static_cast< unsigned long>(__n))); }
# 207 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(long long);
# 210 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(unsigned long long);
# 214 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(double);
# 217 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(float __f)
# 218 "/usr/include/c++/4.0.0/ostream" 3
{ return (this->operator<<(static_cast< double>(__f))); }
# 221 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(long double);
# 224 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(const void *);
# 248 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &operator<<(__streambuf_type *);
# 281 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &put(char_type);
# 285 "/usr/include/c++/4.0.0/ostream" 3
void _M_write(const char_type *__s, streamsize __n)
# 286 "/usr/include/c++/4.0.0/ostream" 3
{
# 287 "/usr/include/c++/4.0.0/ostream" 3
auto streamsize __put = ((((this->rdbuf()))->sputn(__s, __n)));
# 288 "/usr/include/c++/4.0.0/ostream" 3
if (__put != __n) {
# 289 "/usr/include/c++/4.0.0/ostream" 3
(this->setstate(ios_base::badbit)); }
# 290 "/usr/include/c++/4.0.0/ostream" 3
}
# 309 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &write(const char_type *, streamsize);
# 322 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &flush();
# 333 "/usr/include/c++/4.0.0/ostream" 3
pos_type tellp();
# 344 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &seekp(pos_type);
# 356 "/usr/include/c++/4.0.0/ostream" 3
__ostream_type &seekp(off_type, ios_base::seekdir);
# 360 "/usr/include/c++/4.0.0/ostream" 3
protected: explicit basic_ostream() { }
# 361 "/usr/include/c++/4.0.0/ostream" 3
};
# 373 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT, class _Traits>
# 374 "/usr/include/c++/4.0.0/ostream" 3
class basic_ostream< _CharT, _Traits> ::sentry {
# 377 "/usr/include/c++/4.0.0/ostream" 3
bool _M_ok;
# 378 "/usr/include/c++/4.0.0/ostream" 3
basic_ostream< _CharT, _Traits> &_M_os;
# 393 "/usr/include/c++/4.0.0/ostream" 3
public: explicit sentry(basic_ostream< _CharT, _Traits> &);
# 402 "/usr/include/c++/4.0.0/ostream" 3
~sentry()
# 403 "/usr/include/c++/4.0.0/ostream" 3
{
# 405 "/usr/include/c++/4.0.0/ostream" 3
if (((((this->_M_os).flags())) & ios_base::unitbuf) && (!uncaught_exception()))
# 406 "/usr/include/c++/4.0.0/ostream" 3
{
# 408 "/usr/include/c++/4.0.0/ostream" 3
if ((((this->_M_os).rdbuf())) && (((((this->_M_os).rdbuf()))->pubsync()) == (-1))) {
# 409 "/usr/include/c++/4.0.0/ostream" 3
((this->_M_os).setstate(ios_base::badbit)); }
# 410 "/usr/include/c++/4.0.0/ostream" 3
}
# 411 "/usr/include/c++/4.0.0/ostream" 3
}
# 420 "/usr/include/c++/4.0.0/ostream" 3
operator bool() const
# 421 "/usr/include/c++/4.0.0/ostream" 3
{ return this->_M_ok; }
# 422 "/usr/include/c++/4.0.0/ostream" 3
};
# 441 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT, class _Traits> extern basic_ostream< _CharT, _Traits> &operator<<(basic_ostream< _CharT, _Traits> &, _CharT);
# 445 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT, class _Traits> basic_ostream< _CharT, _Traits> &
# 447 "/usr/include/c++/4.0.0/ostream" 3
operator<<(basic_ostream< _CharT, _Traits> &__out, char __c)
# 448 "/usr/include/c++/4.0.0/ostream" 3
{ return __out << ((__out.widen(__c))); }
# 451 "/usr/include/c++/4.0.0/ostream" 3
template<class _Traits> extern basic_ostream< char, _Traits> &operator<<(basic_ostream< char, _Traits> &, char);
# 456 "/usr/include/c++/4.0.0/ostream" 3
template<class _Traits> basic_ostream< char, _Traits> &
# 458 "/usr/include/c++/4.0.0/ostream" 3
operator<<(basic_ostream< char, _Traits> &__out, signed char __c)
# 459 "/usr/include/c++/4.0.0/ostream" 3
{ return __out << (static_cast< char>(__c)); }
# 461 "/usr/include/c++/4.0.0/ostream" 3
template<class _Traits> basic_ostream< char, _Traits> &
# 463 "/usr/include/c++/4.0.0/ostream" 3
operator<<(basic_ostream< char, _Traits> &__out, unsigned char __c)
# 464 "/usr/include/c++/4.0.0/ostream" 3
{ return __out << (static_cast< char>(__c)); }
# 481 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT, class _Traits> extern basic_ostream< _CharT, _Traits> &operator<<(basic_ostream< _CharT, _Traits> &, const _CharT *);
# 485 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT, class _Traits> extern basic_ostream< _CharT, _Traits> &operator<<(basic_ostream< _CharT, _Traits> &, const char *);
# 490 "/usr/include/c++/4.0.0/ostream" 3
template<class _Traits> extern basic_ostream< char, _Traits> &operator<<(basic_ostream< char, _Traits> &, const char *);
# 495 "/usr/include/c++/4.0.0/ostream" 3
template<class _Traits> basic_ostream< char, _Traits> &
# 497 "/usr/include/c++/4.0.0/ostream" 3
operator<<(basic_ostream< char, _Traits> &__out, const signed char *__s)
# 498 "/usr/include/c++/4.0.0/ostream" 3
{ return __out << (reinterpret_cast< const char *>(__s)); }
# 500 "/usr/include/c++/4.0.0/ostream" 3
template<class _Traits> basic_ostream< char, _Traits> &
# 502 "/usr/include/c++/4.0.0/ostream" 3
operator<<(basic_ostream< char, _Traits> &__out, const unsigned char *__s)
# 503 "/usr/include/c++/4.0.0/ostream" 3
{ return __out << (reinterpret_cast< const char *>(__s)); }
# 515 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT, class _Traits> basic_ostream< _CharT, _Traits> &
# 517 "/usr/include/c++/4.0.0/ostream" 3
endl(basic_ostream< _CharT, _Traits> &__os)
# 518 "/usr/include/c++/4.0.0/ostream" 3
{ return flush((__os.put((__os.widen('\n'))))); }
# 526 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT, class _Traits> basic_ostream< _CharT, _Traits> &
# 528 "/usr/include/c++/4.0.0/ostream" 3
ends(basic_ostream< _CharT, _Traits> &__os)
# 529 "/usr/include/c++/4.0.0/ostream" 3
{ return (__os.put(_CharT())); }
# 536 "/usr/include/c++/4.0.0/ostream" 3
template<class _CharT, class _Traits> basic_ostream< _CharT, _Traits> &
# 538 "/usr/include/c++/4.0.0/ostream" 3
flush(basic_ostream< _CharT, _Traits> &__os)
# 539 "/usr/include/c++/4.0.0/ostream" 3
{ return (__os.flush()); }
# 541 "/usr/include/c++/4.0.0/ostream" 3
}
# 40 "/usr/include/c++/4.0.0/typeinfo" 3
#pragma GCC visibility push(default)
# 44 "/usr/include/c++/4.0.0/typeinfo" 3
namespace __cxxabiv1 {
# 46 "/usr/include/c++/4.0.0/typeinfo" 3
class __class_type_info;
# 47 "/usr/include/c++/4.0.0/typeinfo" 3
}
# 59 "/usr/include/c++/4.0.0/typeinfo" 3
namespace std {
# 67 "/usr/include/c++/4.0.0/typeinfo" 3
class type_info {
# 74 "/usr/include/c++/4.0.0/typeinfo" 3
public: virtual ~type_info();
# 78 "/usr/include/c++/4.0.0/typeinfo" 3
private: type_info &operator=(const type_info &);
# 79 "/usr/include/c++/4.0.0/typeinfo" 3
type_info(const type_info &);
# 82 "/usr/include/c++/4.0.0/typeinfo" 3
protected: const char *__name;
# 85 "/usr/include/c++/4.0.0/typeinfo" 3
explicit type_info(const char *__n) : __name(__n) { }
# 91 "/usr/include/c++/4.0.0/typeinfo" 3
public: const char *name() const
# 92 "/usr/include/c++/4.0.0/typeinfo" 3
{ return this->__name; }
# 105 "/usr/include/c++/4.0.0/typeinfo" 3
bool before(const type_info &__arg) const
# 106 "/usr/include/c++/4.0.0/typeinfo" 3
{ return this->__name < __arg.__name; }
# 107 "/usr/include/c++/4.0.0/typeinfo" 3
bool operator==(const type_info &__arg) const
# 108 "/usr/include/c++/4.0.0/typeinfo" 3
{ return this->__name == __arg.__name; }
# 110 "/usr/include/c++/4.0.0/typeinfo" 3
bool operator!=(const type_info &__arg) const
# 111 "/usr/include/c++/4.0.0/typeinfo" 3
{ return !this->operator==(__arg); }
# 116 "/usr/include/c++/4.0.0/typeinfo" 3
virtual bool __is_pointer_p() const;
# 118 "/usr/include/c++/4.0.0/typeinfo" 3
virtual bool __is_function_p() const;
# 126 "/usr/include/c++/4.0.0/typeinfo" 3
virtual bool __do_catch(const type_info *, void **, unsigned) const;
# 130 "/usr/include/c++/4.0.0/typeinfo" 3
virtual bool __do_upcast(const __cxxabiv1::__class_type_info *, void **) const;
# 132 "/usr/include/c++/4.0.0/typeinfo" 3
};
# 139 "/usr/include/c++/4.0.0/typeinfo" 3
class bad_cast : public exception {
# 142 "/usr/include/c++/4.0.0/typeinfo" 3
public: bad_cast() throw() { }
# 145 "/usr/include/c++/4.0.0/typeinfo" 3
virtual ~bad_cast() throw();
# 146 "/usr/include/c++/4.0.0/typeinfo" 3
};
# 149 "/usr/include/c++/4.0.0/typeinfo" 3
class bad_typeid : public exception {
# 152 "/usr/include/c++/4.0.0/typeinfo" 3
public: bad_typeid() throw() { }
# 155 "/usr/include/c++/4.0.0/typeinfo" 3
virtual ~bad_typeid() throw();
# 156 "/usr/include/c++/4.0.0/typeinfo" 3
};
# 157 "/usr/include/c++/4.0.0/typeinfo" 3
}
# 159 "/usr/include/c++/4.0.0/typeinfo" 3
#pragma GCC visibility pop
# 45 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
namespace std {
# 47 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _Facet> locale
# 49 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
locale::combine(const locale &__other) const
# 50 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 51 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _Impl *__tmp = (new _Impl(*(this->_M_impl), 1));
# 52 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
try
# 53 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 54 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
# 55 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 56 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
catch (...)
# 57 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 58 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__tmp->_M_remove_reference();
# 59 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
throw;
# 60 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 61 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return ((locale)(__tmp));
# 62 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 64 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _Traits, class _Alloc> bool
# 66 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
locale::operator()(const basic_string< _CharT, _Traits, _Alloc> &__s1, const basic_string< _CharT, _Traits, _Alloc> &
# 67 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__s2) const
# 68 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 69 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef std::collate< _CharT> __collate_type;
# 70 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __collate_type &__collate = (use_facet< std::collate< _CharT> > (*this));
# 71 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return (__collate.compare((__s1.data()), (__s1.data()) + (__s1.length()), (__s2.data()), (__s2.data()) + (__s2.length()))) < 0;
# 73 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 86 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _Facet> inline bool
# 88 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
has_facet(const locale &__loc) throw()
# 89 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 90 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __i = ((_Facet::id._M_id()));
# 91 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale::facet **__facets = ((*(__loc._M_impl))._M_facets);
# 92 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return (__i < (*(__loc._M_impl))._M_facets_size) && (__facets[__i]);
# 93 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 108 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _Facet> inline const _Facet &
# 110 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
use_facet(const locale &__loc)
# 111 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 112 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __i = ((_Facet::id._M_id()));
# 113 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale::facet **__facets = ((*(__loc._M_impl))._M_facets);
# 114 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!((__i < (*(__loc._M_impl))._M_facets_size) && (__facets[__i]))) {
# 115 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__throw_bad_cast(); }
# 116 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return static_cast< const _Facet &>(*(__facets[__i]));
# 117 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 121 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _Facet>
# 122 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
struct __use_cache {
# 125 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
const _Facet *operator()(const locale &) const;
# 126 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
};
# 129 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT>
# 130 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
struct __use_cache< __numpunct_cache< _CharT> > {
# 133 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
const __numpunct_cache< _CharT> *operator()(const locale &__loc) const
# 134 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 135 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __i = ((numpunct< _CharT> ::id._M_id()));
# 136 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale::facet **__caches = ((*(__loc._M_impl))._M_caches);
# 137 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(__caches[__i]))
# 138 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 139 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __numpunct_cache< _CharT> *__tmp = (__null);
# 140 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
try
# 141 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 142 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__tmp = (new __numpunct_cache< _CharT> );
# 143 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tmp->_M_cache(__loc));
# 144 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 145 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
catch (...)
# 146 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 147 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
delete __tmp;
# 148 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
throw;
# 149 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 150 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__loc._M_impl))._M_install_cache(__tmp, __i);
# 151 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 152 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return static_cast< const __numpunct_cache< _CharT> *>(__caches[__i]);
# 153 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 154 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
};
# 156 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, bool _Intl>
# 157 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
struct __use_cache< __moneypunct_cache< _CharT, _Intl> > {
# 160 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
const __moneypunct_cache< _CharT, _Intl> *operator()(const locale &__loc) const
# 161 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 162 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __i = ((moneypunct< _CharT, _Intl> ::id._M_id()));
# 163 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale::facet **__caches = ((*(__loc._M_impl))._M_caches);
# 164 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(__caches[__i]))
# 165 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 166 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __moneypunct_cache< _CharT, _Intl> *__tmp = (__null);
# 167 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
try
# 168 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 169 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__tmp = (new __moneypunct_cache< _CharT, _Intl> );
# 170 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tmp->_M_cache(__loc));
# 171 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 172 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
catch (...)
# 173 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 174 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
delete __tmp;
# 175 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
throw;
# 176 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 177 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__loc._M_impl))._M_install_cache(__tmp, __i);
# 178 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 179 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return static_cast< const __moneypunct_cache< _CharT, _Intl> *>(__caches[__i]);
# 181 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 182 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
};
# 184 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> void
# 186 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__numpunct_cache< _CharT> ::_M_cache(const locale &__loc)
# 187 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 188 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_allocated) = true;
# 190 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const numpunct< _CharT> &__np = (use_facet< numpunct< _CharT> > (__loc));
# 192 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_grouping_size) = (((__np.grouping())).size());
# 193 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char *__grouping = (new char [this->_M_grouping_size]);
# 194 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(((__np.grouping())).copy(__grouping, this->_M_grouping_size));
# 195 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_grouping) = __grouping;
# 196 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_use_grouping) = (this->_M_grouping_size) && (((__np.grouping()))[0] != 0);
# 198 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_truename_size) = (((__np.truename())).size());
# 199 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__truename = (new (_CharT [this->_M_truename_size]));
# 200 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(((__np.truename())).copy(__truename, this->_M_truename_size));
# 201 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_truename) = __truename;
# 203 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_falsename_size) = (((__np.falsename())).size());
# 204 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__falsename = (new (_CharT [this->_M_falsename_size]));
# 205 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(((__np.falsename())).copy(__falsename, this->_M_falsename_size));
# 206 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_falsename) = __falsename;
# 208 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_decimal_point) = (__np.decimal_point());
# 209 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_thousands_sep) = (__np.thousands_sep());
# 211 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ct = (use_facet< ctype< _CharT> > (__loc));
# 212 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, this->_M_atoms_out));
# 214 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, this->_M_atoms_in));
# 216 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 218 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, bool _Intl> void
# 220 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__moneypunct_cache< _CharT, _Intl> ::_M_cache(const locale &__loc)
# 221 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 222 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_allocated) = true;
# 224 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const moneypunct< _CharT, _Intl> &__mp = (use_facet< moneypunct< _CharT, _Intl> > (__loc));
# 227 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_grouping_size) = (((__mp.grouping())).size());
# 228 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char *__grouping = (new char [this->_M_grouping_size]);
# 229 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(((__mp.grouping())).copy(__grouping, this->_M_grouping_size));
# 230 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_grouping) = __grouping;
# 231 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_use_grouping) = (this->_M_grouping_size) && (((__mp.grouping()))[0] != 0);
# 233 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_decimal_point) = (__mp.decimal_point());
# 234 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_thousands_sep) = (__mp.thousands_sep());
# 235 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_frac_digits) = (__mp.frac_digits());
# 237 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_curr_symbol_size) = (((__mp.curr_symbol())).size());
# 238 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__curr_symbol = (new (_CharT [this->_M_curr_symbol_size]));
# 239 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(((__mp.curr_symbol())).copy(__curr_symbol, this->_M_curr_symbol_size));
# 240 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_curr_symbol) = __curr_symbol;
# 242 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_positive_sign_size) = (((__mp.positive_sign())).size());
# 243 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__positive_sign = (new (_CharT [this->_M_positive_sign_size]));
# 244 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(((__mp.positive_sign())).copy(__positive_sign, this->_M_positive_sign_size));
# 245 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_positive_sign) = __positive_sign;
# 247 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_negative_sign_size) = (((__mp.negative_sign())).size());
# 248 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__negative_sign = (new (_CharT [this->_M_negative_sign_size]));
# 249 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(((__mp.negative_sign())).copy(__negative_sign, this->_M_negative_sign_size));
# 250 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_negative_sign) = __negative_sign;
# 252 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_pos_format) = (__mp.pos_format());
# 253 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(this->_M_neg_format) = (__mp.neg_format());
# 255 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ct = (use_facet< ctype< _CharT> > (__loc));
# 256 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ct.widen(money_base::_S_atoms, money_base::_S_atoms + money_base::_S_end, this->_M_atoms));
# 258 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 270 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
static bool __verify_grouping(const char *, size_t, const string &);
# 273 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 276 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::_M_extract_float(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 277 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, string &__xtrc) const
# 278 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 279 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef char_traits< _CharT> __traits_type;
# 280 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename numpunct< _CharT> ::__cache_type __cache_type;
# 281 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __use_cache< typename numpunct< _CharT> ::__cache_type> __uc;
# 282 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 283 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __cache_type *__lc = (__uc(__loc));
# 284 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__lit = (__lc->_M_atoms_in);
# 285 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char_type __c = char_type();
# 288 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __testeof = (__beg == __end);
# 291 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!__testeof)
# 292 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 293 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg;
# 294 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __plus = (__c == __lit[__num_base::_S_iplus]);
# 295 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((__plus || (__c == __lit[__num_base::_S_iminus])) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))))) && (!(__c == (__lc->_M_decimal_point))))
# 298 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 299 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__xtrc += (__plus ? '+' : '-'));
# 300 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end) {
# 301 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg; } else {
# 303 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testeof = true; }
# 304 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 305 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 308 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __found_mantissa = false;
# 309 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
while (!__testeof)
# 310 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 311 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) {
# 313 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } else {
# 314 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__c == __lit[__num_base::_S_izero])
# 315 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 316 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!__found_mantissa)
# 317 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 318 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__xtrc += '0');
# 319 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__found_mantissa = true;
# 320 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 321 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end) {
# 322 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg; } else {
# 324 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testeof = true; }
# 325 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 327 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } }
# 328 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 331 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __found_dec = false;
# 332 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __found_sci = false;
# 333 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string __found_grouping;
# 334 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__lc->_M_use_grouping) {
# 335 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__found_grouping.reserve(32); }
# 336 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __sep_pos = 0;
# 337 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__q;
# 338 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__lit_zero = (__lit + __num_base::_S_izero);
# 339 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
while (!__testeof)
# 340 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 343 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))
# 344 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 345 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((!__found_dec) && (!__found_sci))
# 346 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 349 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__sep_pos)
# 350 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 351 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__found_grouping += (static_cast< char>(__sep_pos)));
# 352 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sep_pos = 0;
# 353 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 355 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 356 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit);
# 357 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 358 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 359 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 361 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; }
# 362 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 363 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__c == (__lc->_M_decimal_point))
# 364 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 365 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((!__found_dec) && (!__found_sci))
# 366 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 370 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__found_grouping.size()) {
# 371 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__found_grouping += (static_cast< char>(__sep_pos))); }
# 372 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__xtrc += '.');
# 373 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__found_dec = true;
# 374 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 376 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; }
# 377 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 378 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__q = char_traits< _CharT> ::find(__lit_zero, 10, __c))
# 379 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 380 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__xtrc += __num_base::_S_atoms_in[__q - __lit];
# 381 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__found_mantissa = true;
# 382 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__sep_pos;
# 383 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 384 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((((__c == __lit[__num_base::_S_ie]) || (__c == __lit[__num_base::_S_iE])) && __found_mantissa) && (!__found_sci))
# 387 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 389 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__found_grouping.size()) && (!__found_dec)) {
# 390 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__found_grouping += (static_cast< char>(__sep_pos))); }
# 391 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__xtrc += 'e');
# 392 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__found_sci = true;
# 395 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end)
# 396 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 397 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg;
# 398 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __plus = (__c == __lit[__num_base::_S_iplus]);
# 399 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((__plus || (__c == __lit[__num_base::_S_iminus])) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))))) && (!(__c == (__lc->_M_decimal_point)))) {
# 403 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__xtrc += (__plus ? '+' : '-')); } else {
# 405 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
continue; }
# 406 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 408 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 409 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testeof = true;
# 410 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 411 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 412 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 415 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } } } }
# 417 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end) {
# 418 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg; } else {
# 420 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testeof = true; }
# 421 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 425 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__found_grouping.size())
# 426 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 428 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((!__found_dec) && (!__found_sci)) {
# 429 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__found_grouping += (static_cast< char>(__sep_pos))); }
# 431 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping))) {
# 434 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 435 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 438 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testeof) {
# 439 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_eofbit); }
# 440 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 441 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 443 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter>
# 444 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _ValueT> typename num_get< _CharT, _InIter> ::iter_type
# 447 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::_M_extract_int(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 448 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, _ValueT &__v) const
# 449 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 450 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef char_traits< _CharT> __traits_type;
# 451 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename numpunct< _CharT> ::__cache_type __cache_type;
# 452 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __use_cache< typename numpunct< _CharT> ::__cache_type> __uc;
# 453 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 454 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __cache_type *__lc = (__uc(__loc));
# 455 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__lit = (__lc->_M_atoms_in);
# 456 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char_type __c = char_type();
# 459 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ios_base::fmtflags __basefield = (__io.flags() & _S_basefield);
# 461 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __oct = (__basefield == (ios_base::oct));
# 462 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __base = (__oct ? 8 : ((__basefield == (ios_base::hex)) ? 16 : 10));
# 465 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __testeof = (__beg == __end);
# 468 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __negative = false;
# 469 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!__testeof)
# 470 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 471 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg;
# 472 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (numeric_limits< _ValueT> ::is_signed) {
# 473 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__negative = __c == __lit[__num_base::_S_iminus]; }
# 474 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((__negative || (__c == __lit[__num_base::_S_iplus])) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))))) && (!(__c == (__lc->_M_decimal_point))))
# 477 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 478 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end) {
# 479 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg; } else {
# 481 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testeof = true; }
# 482 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 483 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 487 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __found_zero = false;
# 488 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
while (!__testeof)
# 489 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 490 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) {
# 492 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } else {
# 493 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__c == __lit[__num_base::_S_izero]) && ((!__found_zero) || (__base == 10))) {
# 495 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__found_zero = true; } else {
# 496 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__found_zero)
# 497 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 498 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__c == __lit[__num_base::_S_ix]) || (__c == __lit[__num_base::_S_iX]))
# 500 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 501 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__basefield == 0) {
# 502 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__base = 16; }
# 503 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__base == 16) {
# 504 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__found_zero = false; } else {
# 506 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; }
# 507 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 509 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 510 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__basefield == 0) {
# 511 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__base = 8; }
# 512 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 513 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 514 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 516 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } } }
# 518 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end)
# 519 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 520 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg;
# 521 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!__found_zero) {
# 522 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; }
# 523 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 525 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testeof = true; }
# 526 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 530 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __len = ((__base == 16) ? ((__num_base::_S_iend) - (__num_base::_S_izero)) : __base);
# 534 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string __found_grouping;
# 535 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__lc->_M_use_grouping) {
# 536 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__found_grouping.reserve(32); }
# 537 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __sep_pos = 0;
# 538 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __overflow = false;
# 539 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _ValueT __result = 0;
# 540 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__q;
# 541 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__lit_zero = (__lit + __num_base::_S_izero);
# 542 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__negative)
# 543 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 544 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _ValueT __min = (numeric_limits< _ValueT> ::min() / __base);
# 545 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
while (!__testeof)
# 546 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 549 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))
# 550 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 553 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__sep_pos)
# 554 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 555 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__found_grouping += (static_cast< char>(__sep_pos)));
# 556 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sep_pos = 0;
# 557 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 559 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 560 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit);
# 561 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 562 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 563 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 564 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__c == (__lc->_M_decimal_point)) {
# 565 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } else {
# 566 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__q = char_traits< _CharT> ::find(__lit_zero, __len, __c))
# 567 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 568 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __digit = (__q - __lit_zero);
# 569 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__digit > 15) {
# 570 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__digit -= 6; }
# 571 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__result < __min) {
# 572 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__overflow = true; } else
# 574 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 575 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _ValueT __new_result = (__result * __base - __digit);
# 577 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__overflow |= __new_result > __result;
# 578 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__result = __new_result;
# 579 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__sep_pos;
# 580 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 581 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 584 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } } }
# 586 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end) {
# 587 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg; } else {
# 589 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testeof = true; }
# 590 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 591 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 593 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 594 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _ValueT __max = (numeric_limits< _ValueT> ::max() / __base);
# 595 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
while (!__testeof)
# 596 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 597 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))
# 598 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 599 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__sep_pos)
# 600 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 601 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__found_grouping += (static_cast< char>(__sep_pos)));
# 602 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sep_pos = 0;
# 603 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 605 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 606 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit);
# 607 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 608 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 609 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 610 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__c == (__lc->_M_decimal_point)) {
# 611 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } else {
# 612 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__q = char_traits< _CharT> ::find(__lit_zero, __len, __c))
# 613 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 614 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __digit = (__q - __lit_zero);
# 615 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__digit > 15) {
# 616 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__digit -= 6; }
# 617 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__result > __max) {
# 618 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__overflow = true; } else
# 620 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 621 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _ValueT __new_result = (__result * __base + __digit);
# 623 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__overflow |= __new_result < __result;
# 624 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__result = __new_result;
# 625 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__sep_pos;
# 626 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 627 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 629 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } } }
# 631 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end) {
# 632 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = *__beg; } else {
# 634 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testeof = true; }
# 635 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 636 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 640 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__found_grouping.size())
# 641 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 643 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__found_grouping += (static_cast< char>(__sep_pos)));
# 645 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping))) {
# 648 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 649 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 651 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((!(((__err) & _S_failbit))) && (!__overflow)) && (((__sep_pos) || __found_zero) || (__found_grouping.size()))) {
# 653 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v = __result; } else {
# 655 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 657 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testeof) {
# 658 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_eofbit); }
# 659 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 660 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 664 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 667 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 668 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, bool &__v) const
# 669 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 670 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!((__io.flags() & _S_boolalpha)))
# 671 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 675 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto long __l = (-1);
# 676 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = _M_extract_int(__beg, __end, __io, __err, __l);
# 677 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__l == (0)) || (__l == (1))) {
# 678 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v = __l; } else {
# 680 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 681 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 683 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 685 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename numpunct< _CharT> ::__cache_type __cache_type;
# 686 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __use_cache< typename numpunct< _CharT> ::__cache_type> __uc;
# 687 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 688 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __cache_type *__lc = (__uc(__loc));
# 690 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __testf = true;
# 691 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __testt = true;
# 692 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __n;
# 693 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __testeof = (__beg == __end);
# 694 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (__n = (0); !__testeof; ++__n)
# 695 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 696 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type __c = (*__beg);
# 698 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testf) {
# 699 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__n < (__lc->_M_falsename_size)) {
# 700 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testf = __c == (__lc->_M_falsename)[__n]; } else {
# 702 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } }
# 704 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testt) {
# 705 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__n < (__lc->_M_truename_size)) {
# 706 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testt = __c == (__lc->_M_truename)[__n]; } else {
# 708 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } }
# 710 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((!__testf) && (!__testt)) {
# 711 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; }
# 713 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg == __end) {
# 714 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testeof = true; }
# 715 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 716 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testf && (__n == (__lc->_M_falsename_size))) {
# 717 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v = (0); } else {
# 718 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testt && (__n == (__lc->_M_truename_size))) {
# 719 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v = (1); } else {
# 721 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); } }
# 723 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testeof) {
# 724 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_eofbit); }
# 725 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 726 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 727 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 729 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 732 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 733 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, long &__v) const
# 734 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_extract_int(__beg, __end, __io, __err, __v); }
# 736 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 739 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 740 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, unsigned short &__v) const
# 741 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_extract_int(__beg, __end, __io, __err, __v); }
# 743 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 746 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 747 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, unsigned &__v) const
# 748 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_extract_int(__beg, __end, __io, __err, __v); }
# 750 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 753 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 754 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, unsigned long &__v) const
# 755 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_extract_int(__beg, __end, __io, __err, __v); }
# 758 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 761 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 762 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, long long &__v) const
# 763 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_extract_int(__beg, __end, __io, __err, __v); }
# 765 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 768 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 769 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, unsigned long long &__v) const
# 770 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_extract_int(__beg, __end, __io, __err, __v); }
# 773 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 776 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 777 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, float &__v) const
# 778 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 779 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string __xtrc;
# 780 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__xtrc.reserve(32);
# 781 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_float(__beg, __end, __io, __err, __xtrc);
# 782 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
# 783 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 784 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 786 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 789 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 790 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, double &__v) const
# 791 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 792 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string __xtrc;
# 793 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__xtrc.reserve(32);
# 794 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_float(__beg, __end, __io, __err, __xtrc);
# 795 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
# 796 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 797 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 799 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 802 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 803 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, long double &__v) const
# 804 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 805 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string __xtrc;
# 806 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__xtrc.reserve(32);
# 807 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_float(__beg, __end, __io, __err, __xtrc);
# 808 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
# 809 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 810 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 812 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename num_get< _CharT, _InIter> ::iter_type
# 815 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 816 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, void *&__v) const
# 817 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 819 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef ios_base::fmtflags fmtflags;
# 820 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const fmtflags __fmt = __io.flags();
# 821 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io.flags(((__fmt & (~_S_basefield)) | _S_hex));
# 823 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto unsigned long __ul;
# 824 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = _M_extract_int(__beg, __end, __io, __err, __ul);
# 827 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io.flags(__fmt);
# 829 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(((__err) & _S_failbit))) {
# 830 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v = reinterpret_cast< void *>(__ul); }
# 831 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 832 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 836 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> void
# 839 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::_M_pad(_CharT __fill, streamsize __w, ios_base &__io, _CharT *
# 840 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__new, const _CharT *__cs, int &__len) const
# 841 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 844 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__pad< _CharT, char_traits< _CharT> > ::_S_pad(__io, __fill, __new, __cs, __w, __len, true);
# 846 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = static_cast< int>(__w);
# 847 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 850 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> inline int
# 852 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__int_to_char(_CharT *__bufend, long __v, const _CharT *__lit, ios_base::fmtflags
# 853 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__flags)
# 854 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 855 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto unsigned long __ul = (static_cast< unsigned long>(__v));
# 856 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __neg = false;
# 857 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__v < (0))
# 858 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 859 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__ul = -__ul;
# 860 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__neg = true;
# 861 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 862 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __int_to_char(__bufend, __ul, __lit, __flags, __neg);
# 863 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 865 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> inline int
# 867 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__int_to_char(_CharT *__bufend, unsigned long __v, const _CharT *__lit, ios_base::fmtflags
# 868 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__flags)
# 869 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 871 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __int_to_char(__bufend, __v, __lit, (__flags & (~_S_showpos)), false);
# 873 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 876 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> inline int
# 878 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__int_to_char(_CharT *__bufend, long long __v, const _CharT *__lit, ios_base::fmtflags
# 879 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__flags)
# 880 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 881 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto unsigned long long __ull = (static_cast< unsigned long long>(__v));
# 882 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __neg = false;
# 883 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__v < (0))
# 884 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 885 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__ull = -__ull;
# 886 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__neg = true;
# 887 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 888 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __int_to_char(__bufend, __ull, __lit, __flags, __neg);
# 889 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 891 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> inline int
# 893 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__int_to_char(_CharT *__bufend, unsigned long long __v, const _CharT *
# 894 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__lit, ios_base::fmtflags __flags)
# 895 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return __int_to_char(__bufend, __v, __lit, (__flags & (~_S_showpos)), false);
# 896 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 899 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _ValueT> int
# 901 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__int_to_char(_CharT *__bufend, _ValueT __v, const _CharT *__lit, ios_base::fmtflags
# 902 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__flags, bool __neg)
# 903 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 905 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __showbase = ((__flags & _S_showbase) && __v);
# 906 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ios_base::fmtflags __basefield = (__flags & _S_basefield);
# 907 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__buf = (__bufend - 1);
# 909 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__builtin_expect((__basefield != (ios_base::oct)) && (__basefield != (ios_base::hex)), true))
# 911 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 913 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
do
# 914 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 915 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__buf--)) = __lit[__v % 10 + __num_base::_S_odigits];
# 916 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v /= 10;
# 917 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} while (__v != 0);
# 919 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__neg) {
# 920 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__buf--)) = __lit[__num_base::_S_ominus]; } else {
# 921 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__flags & _S_showpos)) {
# 922 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__buf--)) = __lit[__num_base::_S_oplus]; } }
# 923 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 924 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__basefield == (ios_base::oct))
# 925 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 927 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
do
# 928 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 929 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__buf--)) = __lit[(__v & 7) + __num_base::_S_odigits];
# 930 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v >>= 3;
# 931 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} while (__v != 0);
# 933 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__showbase) {
# 934 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__buf--)) = __lit[__num_base::_S_odigits]; }
# 935 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 937 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 939 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __uppercase = ((__flags & _S_uppercase));
# 940 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const int __case_offset = (__uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits);
# 942 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
do
# 943 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 944 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__buf--)) = __lit[(__v & 15) + __case_offset];
# 945 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v >>= 4;
# 946 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} while (__v != 0);
# 948 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__showbase)
# 949 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 951 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__buf--)) = __lit[(__num_base::_S_ox) + __uppercase];
# 953 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__buf--)) = __lit[__num_base::_S_odigits];
# 954 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 955 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} }
# 956 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return (__bufend - __buf) - 1;
# 957 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 959 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> void
# 962 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::_M_group_int(const char *__grouping, size_t __grouping_size, _CharT __sep, ios_base &
# 963 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io, _CharT *__new, _CharT *__cs, int &__len) const
# 964 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 970 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto streamsize __off = (0);
# 971 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ios_base::fmtflags __basefield = (__io.flags() & _S_basefield);
# 973 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((__io.flags() & _S_showbase)) && (__len > 1)) {
# 974 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__basefield == (ios_base::oct))
# 975 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 976 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__off = (1);
# 977 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__new[0]) = __cs[0];
# 978 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 979 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__basefield == (ios_base::hex))
# 980 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 981 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__off = (2);
# 982 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__new[0]) = __cs[0];
# 983 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__new[1]) = __cs[1];
# 984 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} } }
# 985 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__p = (std::__add_grouping(__new + __off, __sep, __grouping, __grouping_size, __cs + __off, __cs + __len));
# 988 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = __p - __new;
# 989 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 991 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter>
# 992 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _ValueT> typename num_put< _CharT, _OutIter> ::iter_type
# 995 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::_M_insert_int(_OutIter __s, ios_base &__io, _CharT __fill, _ValueT
# 996 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v) const
# 997 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 998 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename numpunct< _CharT> ::__cache_type __cache_type;
# 999 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __use_cache< typename numpunct< _CharT> ::__cache_type> __uc;
# 1000 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 1001 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __cache_type *__lc = (__uc(__loc));
# 1002 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__lit = (__lc->_M_atoms_out);
# 1005 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const int __ilen = ((4) * sizeof(_ValueT));
# 1006 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__cs = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * (__ilen))));
# 1011 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __len;
# 1012 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = __int_to_char(__cs + __ilen, __v, __lit, __io.flags());
# 1013 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs += __ilen - __len;
# 1016 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__lc->_M_use_grouping)
# 1017 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1020 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__cs2 = (static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * __len) * (2))));
# 1022 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
this->_M_group_int((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __io, __cs2, __cs, __len);
# 1024 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs = __cs2;
# 1025 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1028 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const streamsize __w = __io.width();
# 1029 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__w > static_cast< int>(__len))
# 1030 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1031 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__cs3 = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)));
# 1033 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
this->_M_pad(__fill, __w, __io, __cs3, __cs, __len);
# 1034 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs = __cs3;
# 1035 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1036 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io.width(0);
# 1040 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return std::__write(__s, __cs, __len);
# 1041 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1043 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> void
# 1046 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::_M_group_float(const char *__grouping, size_t __grouping_size, _CharT
# 1047 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sep, const _CharT *__p, _CharT *__new, _CharT *
# 1048 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs, int &__len) const
# 1049 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1053 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const int __declen = ((__p) ? (__p - __cs) : __len);
# 1054 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__p2 = (std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen));
# 1059 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __newlen = (__p2 - __new);
# 1060 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__p)
# 1061 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1062 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
char_traits< _CharT> ::copy(__p2, __p, __len - __declen);
# 1063 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__newlen += __len - __declen;
# 1064 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1065 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = __newlen;
# 1066 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1078 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter>
# 1079 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _ValueT> typename num_put< _CharT, _OutIter> ::iter_type
# 1082 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::_M_insert_float(_OutIter __s, ios_base &__io, _CharT __fill, char __mod, _ValueT
# 1083 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v) const
# 1084 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1085 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename numpunct< _CharT> ::__cache_type __cache_type;
# 1086 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __use_cache< typename numpunct< _CharT> ::__cache_type> __uc;
# 1087 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 1088 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __cache_type *__lc = (__uc(__loc));
# 1091 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto streamsize __prec = __io.precision();
# 1092 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__prec < (static_cast< streamsize>(0))) {
# 1093 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__prec = (static_cast< streamsize>(6)); }
# 1095 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const int __max_digits = numeric_limits< _ValueT> ::digits10;
# 1098 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __len;
# 1100 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char __fbuf[16];
# 1105 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __cs_size = ((__max_digits) * 3);
# 1106 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char *__cs = (static_cast< char *>(__builtin_alloca(__cs_size)));
# 1108 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__num_base::_S_format_float(__io, __fbuf, __mod);
# 1109 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v, _S_get_c_locale(), __prec);
# 1113 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__len >= __cs_size)
# 1114 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1115 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs_size = __len + 1;
# 1116 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs = static_cast< char *>(__builtin_alloca(__cs_size));
# 1117 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v, _S_get_c_locale(), __prec);
# 1119 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1142 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 1144 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__ws = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)));
# 1146 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ctype.widen(__cs, __cs + __len, __ws));
# 1149 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT __cdec = ((__ctype.widen('.')));
# 1150 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT __dec = (__lc->_M_decimal_point);
# 1151 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__p = (char_traits< _CharT> ::find(__ws, __len, __cdec));
# 1152 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__p) {
# 1153 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ws[__p - __ws]) = __dec; }
# 1158 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__lc->_M_use_grouping) && ((__p || (__len < 3)) || ((((__cs[1] != ('e')) && (__cs[2] != ('e'))) && (__cs[1] != ('E'))) && (__cs[2] != ('E')))))
# 1161 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1164 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__ws2 = (static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * __len) * (2))));
# 1166 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
this->_M_group_float((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __p, __ws2, __ws, __len);
# 1168 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__ws = __ws2;
# 1169 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1172 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const streamsize __w = __io.width();
# 1173 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__w > static_cast< int>(__len))
# 1174 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1175 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__ws3 = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)));
# 1177 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
this->_M_pad(__fill, __w, __io, __ws3, __ws, __len);
# 1178 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__ws = __ws3;
# 1179 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1180 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io.width(0);
# 1184 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return std::__write(__s, __ws, __len);
# 1185 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1187 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename num_put< _CharT, _OutIter> ::iter_type
# 1190 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const
# 1191 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1192 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ios_base::fmtflags __flags = __io.flags();
# 1193 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__flags & _S_boolalpha) == 0)
# 1194 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1195 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const long __l = (__v);
# 1196 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__s = _M_insert_int(__s, __io, __fill, __l);
# 1197 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 1199 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1200 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename numpunct< _CharT> ::__cache_type __cache_type;
# 1201 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __use_cache< typename numpunct< _CharT> ::__cache_type> __uc;
# 1202 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 1203 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __cache_type *__lc = (__uc(__loc));
# 1205 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__name = (__v ? (__lc->_M_truename) : (__lc->_M_falsename));
# 1207 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __len = (__v ? (__lc->_M_truename_size) : (__lc->_M_falsename_size));
# 1210 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const streamsize __w = __io.width();
# 1211 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__w > static_cast< int>(__len))
# 1212 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1213 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__cs = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)));
# 1216 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
this->_M_pad(__fill, __w, __io, __cs, __name, __len);
# 1217 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__name = __cs;
# 1218 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1219 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io.width(0);
# 1220 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__s = std::__write(__s, __name, __len);
# 1221 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1222 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __s;
# 1223 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1225 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename num_put< _CharT, _OutIter> ::iter_type
# 1228 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, long __v) const
# 1229 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_insert_int(__s, __io, __fill, __v); }
# 1231 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename num_put< _CharT, _OutIter> ::iter_type
# 1234 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long
# 1235 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v) const
# 1236 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_insert_int(__s, __io, __fill, __v); }
# 1239 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename num_put< _CharT, _OutIter> ::iter_type
# 1242 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__b, char_type __fill, long long __v) const
# 1243 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_insert_int(__s, __b, __fill, __v); }
# 1245 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename num_put< _CharT, _OutIter> ::iter_type
# 1248 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long
# 1249 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v) const
# 1250 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_insert_int(__s, __io, __fill, __v); }
# 1253 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename num_put< _CharT, _OutIter> ::iter_type
# 1256 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, double __v) const
# 1257 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_insert_float(__s, __io, __fill, (char)0, __v); }
# 1259 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename num_put< _CharT, _OutIter> ::iter_type
# 1262 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, long double
# 1263 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v) const
# 1264 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return _M_insert_float(__s, __io, __fill, 'L', __v); }
# 1266 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename num_put< _CharT, _OutIter> ::iter_type
# 1269 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 1270 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__v) const
# 1271 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1272 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ios_base::fmtflags __flags = __io.flags();
# 1273 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ios_base::fmtflags __fmt = (~((_S_basefield | _S_uppercase) | _S_internal));
# 1276 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io.flags(((__flags & __fmt) | (_S_hex | _S_showbase)));
# 1278 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__s = _M_insert_int(__s, __io, __fill, reinterpret_cast< unsigned long>(__v));
# 1280 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io.flags(__flags);
# 1281 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __s;
# 1282 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1284 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter>
# 1285 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<bool _Intl> typename money_get< _CharT, _InIter> ::iter_type
# 1288 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
money_get< _CharT, _InIter> ::_M_extract(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 1289 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, string &__units) const
# 1290 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1291 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef char_traits< _CharT> __traits_type;
# 1292 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename basic_string< _CharT> ::size_type size_type;
# 1293 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef money_base::part part;
# 1294 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef moneypunct< _CharT, _Intl> __moneypunct_type;
# 1295 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename moneypunct< _CharT, _Intl> ::__cache_type __cache_type;
# 1297 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 1298 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 1300 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __use_cache< typename moneypunct< _CharT, _Intl> ::__cache_type> __uc;
# 1301 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __cache_type *__lc = (__uc(__loc));
# 1302 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__lit = (__lc->_M_atoms);
# 1305 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __negative = false;
# 1307 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_type __sign_size = 0;
# 1309 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __mandatory_sign = ((__lc->_M_positive_sign_size) && (__lc->_M_negative_sign_size));
# 1312 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string __grouping_tmp;
# 1313 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__lc->_M_use_grouping) {
# 1314 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__grouping_tmp.reserve(32); }
# 1316 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __last_pos = 0;
# 1318 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __n = 0;
# 1320 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __testvalid = true;
# 1322 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __testdecfound = false;
# 1325 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string __res;
# 1326 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__res.reserve(32);
# 1328 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__lit_zero = (__lit + money_base::_S_zero);
# 1329 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const money_base::pattern __p = (__lc->_M_neg_format);
# 1330 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (int __i = 0; (__i < 4) && __testvalid; ++__i)
# 1331 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1332 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const part __which = (static_cast< part>(((__p.field)[__i])));
# 1333 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
switch (__which)
# 1334 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1335 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::symbol:
# 1340 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((((__io.flags() & _S_showbase) || (__sign_size > 1)) || (__i == 0)) || ((__i == 1) && ((__mandatory_sign || (static_cast< part>(((__p.field)[0])) == (money_base::sign))) || (static_cast< part>(((__p.field)[2])) == (money_base::space))))) || ((__i == 2) && ((static_cast< part>(((__p.field)[3])) == (money_base::value)) || (__mandatory_sign && (static_cast< part>(((__p.field)[3])) == (money_base::sign))))))
# 1352 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1353 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_type __len = (__lc->_M_curr_symbol_size);
# 1354 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_type __j = 0;
# 1355 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; ((__beg != __end) && (__j < __len)) && (*__beg == (__lc->_M_curr_symbol)[__j]); (++__beg), (++__j)) {
# 1357 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
; }
# 1358 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__j != __len) && (__j || (__io.flags() & _S_showbase))) {
# 1360 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false; }
# 1361 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1362 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1363 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::sign:
# 1365 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((__lc->_M_positive_sign_size) && (__beg != __end)) && (*__beg == (__lc->_M_positive_sign)[0]))
# 1367 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1368 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sign_size = (__lc->_M_positive_sign_size);
# 1369 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__beg;
# 1370 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 1371 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((__lc->_M_negative_sign_size) && (__beg != __end)) && (*__beg == (__lc->_M_negative_sign)[0]))
# 1373 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1374 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__negative = true;
# 1375 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sign_size = (__lc->_M_negative_sign_size);
# 1376 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__beg;
# 1377 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 1378 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__lc->_M_positive_sign_size) && (!(__lc->_M_negative_sign_size))) {
# 1382 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__negative = true; } else {
# 1383 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__mandatory_sign) {
# 1384 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false; } } } }
# 1385 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1386 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::value:
# 1389 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; __beg != __end; ++__beg)
# 1390 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1391 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type __c = (*__beg);
# 1392 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__q = (char_traits< _CharT> ::find(__lit_zero, 10, __c));
# 1394 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__q != 0)
# 1395 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1396 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__res += money_base::_S_atoms[__q - __lit];
# 1397 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__n;
# 1398 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 1399 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__c == (__lc->_M_decimal_point)) && (!__testdecfound))
# 1401 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1402 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__last_pos = __n;
# 1403 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__n = 0;
# 1404 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testdecfound = true;
# 1405 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 1406 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) && (!__testdecfound))
# 1409 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1410 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__n)
# 1411 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1413 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__grouping_tmp += (static_cast< char>(__n)));
# 1414 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__n = 0;
# 1415 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 1417 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1418 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false;
# 1419 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1420 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1421 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 1423 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } } }
# 1424 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1425 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__res.empty()) {
# 1426 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false; }
# 1427 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1428 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::space:
# 1430 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__beg != __end) && ((__ctype.is(ctype_base::space, *__beg)))) {
# 1431 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__beg; } else {
# 1433 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false; }
# 1434 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::none:
# 1436 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__i != 3) {
# 1437 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; (__beg != __end) && ((__ctype.is(ctype_base::space, *__beg))); ++__beg) {
# 1438 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
; } }
# 1439 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1440 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1441 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1444 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__sign_size > 1) && __testvalid)
# 1445 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1446 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__sign = (__negative ? (__lc->_M_negative_sign) : (__lc->_M_positive_sign));
# 1448 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_type __i = 1;
# 1449 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; ((__beg != __end) && (__i < __sign_size)) && (*__beg == __sign[__i]); (++__beg), (++__i)) {
# 1450 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
; }
# 1452 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__i != __sign_size) {
# 1453 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false; }
# 1454 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1456 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testvalid)
# 1457 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1459 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__res.size() > (1))
# 1460 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1461 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_type __first = (__res.find_first_not_of('0'));
# 1462 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __only_zeros = (__first == string::npos);
# 1463 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__first) {
# 1464 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__res.erase(0, __only_zeros ? (__res.size() - (1)) : __first)); }
# 1465 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1468 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__negative && (__res[(0)] != ('0'))) {
# 1469 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__res.insert(__res.begin(), '-'); }
# 1472 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__grouping_tmp.size())
# 1473 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1475 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__grouping_tmp += (static_cast< char>((__testdecfound ? __last_pos : __n))));
# 1477 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __grouping_tmp))) {
# 1480 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false; }
# 1481 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1484 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__testdecfound && ((__lc->_M_frac_digits) > 0)) && (__n != (__lc->_M_frac_digits))) {
# 1486 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false; }
# 1487 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1490 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!__testvalid) {
# 1491 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); } else {
# 1493 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__units.swap(__res); }
# 1496 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__beg == __end) {
# 1497 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_eofbit); }
# 1498 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 1499 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1501 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename money_get< _CharT, _InIter> ::iter_type
# 1504 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
money_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, bool __intl, ios_base &__io, ios_base::iostate &
# 1505 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, long double &__units) const
# 1506 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1507 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string __str;
# 1508 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__intl) {
# 1509 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = _M_extract< true> (__beg, __end, __io, __err, __str); } else {
# 1511 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = _M_extract< false> (__beg, __end, __io, __err, __str); }
# 1512 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
std::__convert_to_v(__str.c_str(), __units, __err, _S_get_c_locale());
# 1513 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 1514 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1516 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename money_get< _CharT, _InIter> ::iter_type
# 1519 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
money_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, bool __intl, ios_base &__io, ios_base::iostate &
# 1520 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, string_type &__units) const
# 1521 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1522 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef basic_string< char, char_traits< char> , allocator< char> > ::size_type size_type;
# 1524 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 1525 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 1527 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string __str;
# 1528 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const iter_type __ret = (__intl ? (_M_extract< true> (__beg, __end, __io, __err, __str)) : (_M_extract< false> (__beg, __end, __io, __err, __str)));
# 1532 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_type __len = __str.size();
# 1533 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__len)
# 1534 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1535 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__ws = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)));
# 1537 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ctype.widen(__str.data(), __str.data() + __len, __ws));
# 1538 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__units.assign(__ws, __len));
# 1539 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1541 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __ret;
# 1542 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1544 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter>
# 1545 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<bool _Intl> typename money_put< _CharT, _OutIter> ::iter_type
# 1548 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
money_put< _CharT, _OutIter> ::_M_insert(iter_type __s, ios_base &__io, char_type __fill, const string_type &
# 1549 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__digits) const
# 1550 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1551 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename basic_string< _CharT> ::size_type size_type;
# 1552 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef money_base::part part;
# 1553 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef moneypunct< _CharT, _Intl> __moneypunct_type;
# 1554 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef typename moneypunct< _CharT, _Intl> ::__cache_type __cache_type;
# 1556 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 1557 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 1559 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto __use_cache< typename moneypunct< _CharT, _Intl> ::__cache_type> __uc;
# 1560 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __cache_type *__lc = (__uc(__loc));
# 1561 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__lit = (__lc->_M_atoms);
# 1565 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__beg = ((__digits.data()));
# 1567 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto money_base::pattern __p;
# 1568 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__sign;
# 1569 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_type __sign_size;
# 1570 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((*__beg) != __lit[money_base::_S_minus])
# 1571 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1572 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__p = (__lc->_M_pos_format);
# 1573 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sign = (__lc->_M_positive_sign);
# 1574 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sign_size = (__lc->_M_positive_sign_size);
# 1575 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 1577 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1578 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__p = (__lc->_M_neg_format);
# 1579 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sign = (__lc->_M_negative_sign);
# 1580 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__sign_size = (__lc->_M_negative_sign_size);
# 1581 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__digits.size())) {
# 1582 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__beg; }
# 1583 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1586 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_type __len = ((__ctype.scan_not(ctype_base::digit, __beg, __beg + (__digits.size()))) - __beg);
# 1588 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__len)
# 1589 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1593 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string_type __value;
# 1594 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__value.reserve(2 * __len));
# 1598 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __paddec = (__len - (__lc->_M_frac_digits));
# 1599 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__paddec > 0)
# 1600 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1601 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__lc->_M_frac_digits) < 0) {
# 1602 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__paddec = __len; }
# 1603 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__lc->_M_grouping_size)
# 1604 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1605 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__ws = (static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * (2)) * __len)));
# 1608 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__ws_end = (std::__add_grouping(__ws, (__lc->_M_thousands_sep), (__lc->_M_grouping), (__lc->_M_grouping_size), __beg, __beg + __paddec));
# 1613 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__value.assign(__ws, __ws_end - __ws));
# 1614 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 1616 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__value.assign(__beg, __paddec)); }
# 1617 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1620 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__lc->_M_frac_digits) > 0)
# 1621 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1622 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__value += (__lc->_M_decimal_point);
# 1623 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__paddec >= 0) {
# 1624 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__value.append(__beg + __paddec, (__lc->_M_frac_digits))); } else
# 1626 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1628 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__value.append(-__paddec, __lit[money_base::_S_zero]));
# 1629 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__value.append(__beg, __len));
# 1630 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1631 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1634 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ios_base::fmtflags __f = (__io.flags() & _S_adjustfield);
# 1636 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = (__value.size()) + __sign_size;
# 1637 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len += ((__io.flags() & _S_showbase)) ? (__lc->_M_curr_symbol_size) : 0;
# 1640 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string_type __res;
# 1641 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__res.reserve(2 * __len));
# 1643 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_type __width = (static_cast< size_type>(__io.width()));
# 1644 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __testipad = ((__f == (ios_base::internal)) && (__len < __width));
# 1647 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (int __i = 0; __i < 4; ++__i)
# 1648 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1649 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const part __which = (static_cast< part>(((__p.field)[__i])));
# 1650 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
switch (__which)
# 1651 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1652 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::symbol:
# 1653 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__io.flags() & _S_showbase)) {
# 1654 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__res.append((__lc->_M_curr_symbol), (__lc->_M_curr_symbol_size))); }
# 1656 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1657 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::sign:
# 1661 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__sign_size) {
# 1662 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__res += __sign[0]; }
# 1663 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1664 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::value:
# 1665 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__res += __value;
# 1666 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1667 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::space:
# 1671 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testipad) {
# 1672 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__res.append(__width - __len, __fill)); } else {
# 1674 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__res += __fill; }
# 1675 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1676 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case money_base::none:
# 1677 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testipad) {
# 1678 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__res.append(__width - __len, __fill)); }
# 1679 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1680 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1681 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1684 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__sign_size > 1) {
# 1685 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__res.append(__sign + 1, __sign_size - 1)); }
# 1688 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = (__res.size());
# 1689 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__width > __len)
# 1690 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1691 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__f == (ios_base::left)) {
# 1693 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__res.append(__width - __len, __fill)); } else {
# 1696 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__res.insert(0, __width - __len, __fill)); }
# 1697 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = __width;
# 1698 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1701 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__s = std::__write(__s, (__res.data()), __len);
# 1702 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1703 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io.width(0);
# 1704 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __s;
# 1705 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1707 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename money_put< _CharT, _OutIter> ::iter_type
# 1710 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
money_put< _CharT, _OutIter> ::do_put(iter_type __s, bool __intl, ios_base &__io, char_type __fill, long double
# 1711 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__units) const
# 1712 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1713 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale __loc = __io.getloc();
# 1714 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 1717 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __cs_size = 64;
# 1718 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char *__cs = (static_cast< char *>(__builtin_alloca(__cs_size)));
# 1721 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __len = std::__convert_from_v(__cs, __cs_size, "%.*Lf", __units, _S_get_c_locale(), 0);
# 1724 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__len >= __cs_size)
# 1725 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1726 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs_size = __len + 1;
# 1727 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs = static_cast< char *>(__builtin_alloca(__cs_size));
# 1728 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = std::__convert_from_v(__cs, __cs_size, "%.*Lf", __units, _S_get_c_locale(), 0);
# 1730 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1738 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__ws = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __cs_size)));
# 1740 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ctype.widen(__cs, __cs + __len, __ws));
# 1741 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const string_type __digits(__ws, __len);
# 1742 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __intl ? (_M_insert< true> (__s, __io, __fill, __digits)) : (_M_insert< false> (__s, __io, __fill, __digits));
# 1744 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1746 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename money_put< _CharT, _OutIter> ::iter_type
# 1749 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
money_put< _CharT, _OutIter> ::do_put(iter_type __s, bool __intl, ios_base &__io, char_type __fill, const string_type &
# 1750 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__digits) const
# 1751 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return __intl ? (_M_insert< true> (__s, __io, __fill, __digits)) : (_M_insert< false> (__s, __io, __fill, __digits));
# 1752 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1758 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> time_base::dateorder
# 1760 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_get< _CharT, _InIter> ::do_date_order() const
# 1761 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return time_base::no_order; }
# 1765 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename time_get< _CharT, _InIter> ::iter_type
# 1768 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_get< _CharT, _InIter> ::_M_extract_via_format(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 1769 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, tm *__tm, const _CharT *
# 1770 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__format) const
# 1771 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1772 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 1773 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __timepunct< _CharT> &__tp = (use_facet< __timepunct< _CharT> > (__loc));
# 1774 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 1775 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __len = (char_traits< _CharT> ::length(__format));
# 1777 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (size_t __i = (0); ((__beg != __end) && (__i < __len)) && (!(__err)); ++__i)
# 1778 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1779 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__ctype.narrow(__format[__i], 0)) == '%')
# 1780 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1782 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char __c = ((__ctype.narrow(__format[++__i], 0)));
# 1783 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __mem = 0;
# 1784 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__c == ('E')) || (__c == ('O'))) {
# 1785 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = (__ctype.narrow(__format[++__i], 0)); }
# 1786 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
switch (__c)
# 1787 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1788 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char *__cs;
# 1789 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT __wcs[10];
# 1790 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'a':
# 1792 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__days1[7];
# 1793 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_days_abbreviated(__days1));
# 1794 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_name(__beg, __end, __tm->tm_wday, __days1, 7, __io, __err);
# 1796 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1797 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'A':
# 1799 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__days2[7];
# 1800 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_days(__days2));
# 1801 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_name(__beg, __end, __tm->tm_wday, __days2, 7, __io, __err);
# 1803 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1804 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'h':
# 1805 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'b':
# 1807 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__months1[12];
# 1808 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_months_abbreviated(__months1));
# 1809 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_name(__beg, __end, __tm->tm_mon, __months1, 12, __io, __err);
# 1811 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1812 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'B':
# 1814 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__months2[12];
# 1815 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_months(__months2));
# 1816 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_name(__beg, __end, __tm->tm_mon, __months2, 12, __io, __err);
# 1818 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1819 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'c':
# 1821 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__dt[2];
# 1822 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_date_time_formats(__dt));
# 1823 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_via_format(__beg, __end, __io, __err, __tm, __dt[0]);
# 1825 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1826 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'd':
# 1828 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __tm->tm_mday, 1, 31, 2, __io, __err);
# 1830 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1831 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'e':
# 1834 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__ctype.is(ctype_base::space, *__beg))) {
# 1835 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(++__beg, __end, __tm->tm_mday, 1, 9, 1, __io, __err); } else {
# 1838 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __tm->tm_mday, 10, 31, 2, __io, __err); }
# 1840 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1841 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'D':
# 1843 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs = ("%m/%d/%y");
# 1844 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ctype.widen(__cs, __cs + 9, __wcs));
# 1845 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_via_format(__beg, __end, __io, __err, __tm, __wcs);
# 1847 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1848 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'H':
# 1850 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __tm->tm_hour, 0, 23, 2, __io, __err);
# 1852 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1853 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'I':
# 1855 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __tm->tm_hour, 1, 12, 2, __io, __err);
# 1857 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1858 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'm':
# 1860 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __mem, 1, 12, 2, __io, __err);
# 1862 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(__err)) {
# 1863 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tm->tm_mon) = __mem - 1; }
# 1864 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1865 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'M':
# 1867 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __tm->tm_min, 0, 59, 2, __io, __err);
# 1869 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1870 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'n':
# 1871 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__ctype.narrow(*__beg, 0)) == '\n') {
# 1872 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__beg; } else {
# 1874 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 1875 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1876 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'R':
# 1878 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs = ("%H:%M");
# 1879 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ctype.widen(__cs, __cs + 6, __wcs));
# 1880 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_via_format(__beg, __end, __io, __err, __tm, __wcs);
# 1882 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1883 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'S':
# 1887 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __tm->tm_sec, 0, 60, 2, __io, __err);
# 1892 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1893 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 't':
# 1894 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__ctype.narrow(*__beg, 0)) == '\t') {
# 1895 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__beg; } else {
# 1897 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 1898 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1899 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'T':
# 1901 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__cs = ("%H:%M:%S");
# 1902 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ctype.widen(__cs, __cs + 9, __wcs));
# 1903 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_via_format(__beg, __end, __io, __err, __tm, __wcs);
# 1905 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1906 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'x':
# 1908 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__dates[2];
# 1909 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_date_formats(__dates));
# 1910 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_via_format(__beg, __end, __io, __err, __tm, __dates[0]);
# 1912 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1913 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'X':
# 1915 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__times[2];
# 1916 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_time_formats(__times));
# 1917 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_via_format(__beg, __end, __io, __err, __tm, __times[0]);
# 1919 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1920 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'y':
# 1921 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'C':
# 1923 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __tm->tm_year, 0, 99, 2, __io, __err);
# 1925 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1926 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'Y':
# 1928 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __mem, 0, 9999, 4, __io, __err);
# 1930 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(__err)) {
# 1931 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tm->tm_year) = __mem - 1900; }
# 1932 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1933 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
case 'Z':
# 1935 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__ctype.is(ctype_base::upper, *__beg)))
# 1936 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1937 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __tmp;
# 1938 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_name(__beg, __end, __tmp, __timepunct_cache< _CharT> ::_S_timezones, 14, __io, __err);
# 1943 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((((__beg != __end) && (!(__err))) && (__tmp == 0)) && ((*__beg == (__ctype.widen('-'))) || (*__beg == (__ctype.widen('+')))))
# 1946 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1947 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __tmp, 0, 23, 2, __io, __err);
# 1949 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_num(__beg, __end, __tmp, 0, 59, 2, __io, __err);
# 1951 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1952 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 1954 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 1955 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break;
# 1956 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
default:
# 1958 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); break;
# 1959 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1960 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 1962 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1964 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__format[__i] == *__beg) {
# 1965 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__beg; } else {
# 1967 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 1968 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1969 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1970 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 1971 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 1973 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename time_get< _CharT, _InIter> ::iter_type
# 1976 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_get< _CharT, _InIter> ::_M_extract_num(iter_type __beg, iter_type __end, int &__member, int
# 1977 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__min, int __max, size_t __len, ios_base &
# 1978 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io, ios_base::iostate &__err) const
# 1979 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1980 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 1981 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 1984 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __mult = ((__len == (2)) ? 10 : ((__len == (4)) ? 1000 : 1));
# 1986 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__min;
# 1987 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __i = (0);
# 1988 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __value = 0;
# 1989 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; (__beg != __end) && (__i < __len); (++__beg), (++__i))
# 1990 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1991 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char __c = ((__ctype.narrow(*__beg, '*')));
# 1992 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__c >= ('0')) && (__c <= ('9')))
# 1993 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 1994 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__value = __value * 10 + (__c - ('0'));
# 1995 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const int __valuec = (__value * __mult);
# 1996 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__valuec > __max) || (__valuec + __mult < __min)) {
# 1997 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; }
# 1998 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__mult /= 10;
# 1999 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 2001 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; }
# 2002 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2003 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__i == __len) {
# 2004 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__member = __value; } else {
# 2006 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 2007 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 2008 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2012 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename time_get< _CharT, _InIter> ::iter_type
# 2015 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_get< _CharT, _InIter> ::_M_extract_name(iter_type __beg, iter_type __end, int &__member, const _CharT **
# 2016 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__names, size_t __indexlen, ios_base &
# 2017 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io, ios_base::iostate &__err) const
# 2018 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2019 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef char_traits< _CharT> __traits_type;
# 2020 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 2021 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 2023 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int *__matches = (static_cast< int *>(__builtin_alloca(sizeof(int) * __indexlen)));
# 2025 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __nmatches = (0);
# 2026 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __pos = (0);
# 2027 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __testvalid = true;
# 2028 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__name;
# 2034 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__beg != __end)
# 2035 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2036 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type __c = (*__beg);
# 2037 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (size_t __i1 = (0); __i1 < __indexlen; ++__i1) {
# 2038 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__c == (__names[__i1])[0]) || (__c == (__ctype.toupper((__names[__i1])[0])))) {
# 2040 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__matches[__nmatches++]) = __i1; } }
# 2041 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2043 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
while (__nmatches > (1))
# 2044 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2046 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __minlen = (char_traits< _CharT> ::length(__names[__matches[0]]));
# 2047 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (size_t __i2 = (1); __i2 < __nmatches; ++__i2) {
# 2048 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__minlen = std::min(__minlen, char_traits< _CharT> ::length(__names[__matches[__i2]])); }
# 2050 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(++__beg), (++__pos);
# 2051 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__pos < __minlen) && (__beg != __end)) {
# 2052 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (size_t __i3 = (0); __i3 < __nmatches;)
# 2053 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2054 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__name = __names[__matches[__i3]];
# 2055 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__name[__pos] != *__beg) {
# 2056 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__matches[__i3]) = __matches[--__nmatches]; } else {
# 2058 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__i3; }
# 2059 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} } else {
# 2061 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; }
# 2062 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2064 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__nmatches == (1))
# 2065 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2067 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(++__beg), (++__pos);
# 2068 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__name = __names[__matches[0]];
# 2069 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __len = (char_traits< _CharT> ::length(__name));
# 2070 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
while (((__pos < __len) && (__beg != __end)) && (__name[__pos] == *__beg)) {
# 2071 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(++__beg), (++__pos); }
# 2073 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__len == __pos) {
# 2074 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__member = __matches[0]; } else {
# 2076 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false; }
# 2077 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 2079 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__testvalid = false; }
# 2080 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!__testvalid) {
# 2081 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 2082 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 2083 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2085 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename time_get< _CharT, _InIter> ::iter_type
# 2088 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_get< _CharT, _InIter> ::do_get_time(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2089 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, tm *__tm) const
# 2090 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2091 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 2092 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __timepunct< _CharT> &__tp = (use_facet< __timepunct< _CharT> > (__loc));
# 2093 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__times[2];
# 2094 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_time_formats(__times));
# 2095 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_via_format(__beg, __end, __io, __err, __tm, __times[0]);
# 2097 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__beg == __end) {
# 2098 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_eofbit); }
# 2099 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 2100 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2102 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename time_get< _CharT, _InIter> ::iter_type
# 2105 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_get< _CharT, _InIter> ::do_get_date(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2106 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, tm *__tm) const
# 2107 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2108 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 2109 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __timepunct< _CharT> &__tp = (use_facet< __timepunct< _CharT> > (__loc));
# 2110 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__dates[2];
# 2111 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_date_formats(__dates));
# 2112 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_via_format(__beg, __end, __io, __err, __tm, __dates[0]);
# 2114 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__beg == __end) {
# 2115 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_eofbit); }
# 2116 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 2117 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2119 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename time_get< _CharT, _InIter> ::iter_type
# 2122 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_get< _CharT, _InIter> ::do_get_weekday(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2123 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, tm *__tm) const
# 2124 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2125 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef char_traits< _CharT> __traits_type;
# 2126 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 2127 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __timepunct< _CharT> &__tp = (use_facet< __timepunct< _CharT> > (__loc));
# 2128 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 2129 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__days[7];
# 2130 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_days_abbreviated(__days));
# 2131 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __tmpwday;
# 2132 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_name(__beg, __end, __tmpwday, __days, 7, __io, __err);
# 2140 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((!(__err)) && (__beg != __end))
# 2141 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2142 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __pos = (char_traits< _CharT> ::length(__days[__tmpwday]));
# 2143 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_days(__days));
# 2144 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__name = (__days[__tmpwday]);
# 2145 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__name[__pos] == *__beg)
# 2146 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2148 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __len = (char_traits< _CharT> ::length(__name));
# 2149 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
while (((__pos < __len) && (__beg != __end)) && (__name[__pos] == *__beg)) {
# 2151 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(++__beg), (++__pos); }
# 2152 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__len != __pos) {
# 2153 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 2154 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2155 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2156 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(__err)) {
# 2157 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tm->tm_wday) = __tmpwday; }
# 2159 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__beg == __end) {
# 2160 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_eofbit); }
# 2161 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 2162 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2164 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename time_get< _CharT, _InIter> ::iter_type
# 2167 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_get< _CharT, _InIter> ::do_get_monthname(iter_type __beg, iter_type __end, ios_base &
# 2168 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__io, ios_base::iostate &__err, tm *__tm) const
# 2169 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2170 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
typedef char_traits< _CharT> __traits_type;
# 2171 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 2172 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __timepunct< _CharT> &__tp = (use_facet< __timepunct< _CharT> > (__loc));
# 2173 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 2174 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__months[12];
# 2175 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_months_abbreviated(__months));
# 2176 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __tmpmon;
# 2177 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg = this->_M_extract_name(__beg, __end, __tmpmon, __months, 12, __io, __err);
# 2186 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((!(__err)) && (__beg != __end))
# 2187 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2188 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __pos = (char_traits< _CharT> ::length(__months[__tmpmon]));
# 2189 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_months(__months));
# 2190 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char_type *__name = (__months[__tmpmon]);
# 2191 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__name[__pos] == *__beg)
# 2192 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2194 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __len = (char_traits< _CharT> ::length(__name));
# 2195 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
while (((__pos < __len) && (__beg != __end)) && (__name[__pos] == *__beg)) {
# 2197 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(++__beg), (++__pos); }
# 2198 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__len != __pos) {
# 2199 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 2200 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2201 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2202 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(__err)) {
# 2203 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tm->tm_mon) = __tmpmon; }
# 2205 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__beg == __end) {
# 2206 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_eofbit); }
# 2207 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 2208 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2210 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _InIter> typename time_get< _CharT, _InIter> ::iter_type
# 2213 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_get< _CharT, _InIter> ::do_get_year(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2214 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__err, tm *__tm) const
# 2215 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2216 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 2217 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 2219 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __i = (0);
# 2220 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto int __value = 0;
# 2221 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; (__beg != __end) && (__i < (4)); (++__beg), (++__i))
# 2222 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2223 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char __c = ((__ctype.narrow(*__beg, '*')));
# 2224 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__c >= ('0')) && (__c <= ('9'))) {
# 2225 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__value = __value * 10 + (__c - ('0')); } else {
# 2227 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; }
# 2228 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2229 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__i == (2)) || (__i == (4))) {
# 2230 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tm->tm_year) = (__i == (2)) ? __value : (__value - 1900); } else {
# 2232 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_failbit); }
# 2233 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__beg == __end) {
# 2234 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__err |= _S_eofbit); }
# 2235 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __beg;
# 2236 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2238 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename time_put< _CharT, _OutIter> ::iter_type
# 2241 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_put< _CharT, _OutIter> ::put(iter_type __s, ios_base &__io, char_type __fill, const tm *__tm, const _CharT *
# 2242 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__beg, const _CharT *__end) const
# 2243 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2244 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 2245 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 2246 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; __beg != __end; ++__beg) {
# 2247 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__ctype.narrow(*__beg, 0)) != '%')
# 2248 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2249 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*__s) = (*__beg);
# 2250 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__s;
# 2251 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 2252 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end)
# 2253 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2254 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char __format;
# 2255 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char __mod = (0);
# 2256 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const char __c = ((__ctype.narrow(*__beg, 0)));
# 2257 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__c != ('E')) && (__c != ('O'))) {
# 2258 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__format = __c; } else {
# 2259 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (++__beg != __end)
# 2260 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2261 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__mod = __c;
# 2262 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__format = (__ctype.narrow(*__beg, 0));
# 2263 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 2265 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } }
# 2266 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__s = this->do_put(__s, __io, __fill, __tm, __format, __mod);
# 2267 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 2269 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
break; } } }
# 2270 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __s;
# 2271 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2273 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _OutIter> typename time_put< _CharT, _OutIter> ::iter_type
# 2276 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
time_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type, const tm *__tm, char
# 2277 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__format, char __mod) const
# 2278 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2279 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 2280 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 2281 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const __timepunct< _CharT> &__tp = (use_facet< __timepunct< _CharT> > (__loc));
# 2285 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __maxlen = (128);
# 2286 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char_type *__res = (static_cast< char_type *>(__builtin_alloca(sizeof(_CharT) * (__maxlen))));
# 2294 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto char_type __fmt[4];
# 2295 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__fmt[0]) = (__ctype.widen('%'));
# 2296 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (!(__mod))
# 2297 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2298 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__fmt[1]) = __format;
# 2299 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__fmt[2]) = char_type();
# 2300 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else
# 2302 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2303 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__fmt[1]) = __mod;
# 2304 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__fmt[2]) = __format;
# 2305 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__fmt[3]) = char_type();
# 2306 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2308 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__tp._M_put(__res, __maxlen, __fmt, __tm));
# 2311 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return std::__write(__s, __res, char_traits< _CharT> ::length(__res));
# 2312 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2315 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> int
# 2317 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
collate< _CharT> ::_M_compare(const _CharT *, const _CharT *) const
# 2318 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return 0; }
# 2321 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> size_t
# 2323 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
collate< _CharT> ::_M_transform(_CharT *, const _CharT *, size_t) const
# 2324 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{ return 0; }
# 2326 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> int
# 2329 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
collate< _CharT> ::do_compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 2330 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__lo2, const _CharT *__hi2) const
# 2331 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2334 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const string_type __one(__lo1, __hi1);
# 2335 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const string_type __two(__lo2, __hi2);
# 2337 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__p = ((__one.c_str()));
# 2338 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__pend = ((__one.data()) + (__one.length()));
# 2339 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__q = ((__two.c_str()));
# 2340 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__qend = ((__two.data()) + (__two.length()));
# 2345 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; ;)
# 2346 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2347 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const int __res = this->_M_compare(__p, __q);
# 2348 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__res) {
# 2349 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __res; }
# 2351 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__p += char_traits< _CharT> ::length(__p);
# 2352 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__q += char_traits< _CharT> ::length(__q);
# 2353 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__p == __pend) && (__q == __qend)) {
# 2354 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return 0; } else {
# 2355 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__p == __pend) {
# 2356 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return -1; } else {
# 2357 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__q == __qend) {
# 2358 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return 1; } } }
# 2360 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__p++;
# 2361 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__q++;
# 2362 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2363 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2365 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> typename collate< _CharT> ::string_type
# 2368 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
collate< _CharT> ::do_transform(const _CharT *__lo, const _CharT *__hi) const
# 2369 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2371 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string_type __str(__lo, __hi);
# 2373 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__p = ((__str.c_str()));
# 2374 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const _CharT *__pend = ((__str.data()) + (__str.length()));
# 2376 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __len = ((__hi - __lo) * 2);
# 2378 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto string_type __ret;
# 2383 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; ;)
# 2384 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2386 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto _CharT *__c = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)));
# 2388 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __res = this->_M_transform(__c, __p, __len);
# 2391 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__res >= __len)
# 2392 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2393 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__len = __res + (1);
# 2394 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__c = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len));
# 2396 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__res = this->_M_transform(__c, __p, __len);
# 2397 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2399 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ret.append(__c, __res));
# 2400 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__p += char_traits< _CharT> ::length(__p);
# 2401 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__p == __pend) {
# 2402 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __ret; }
# 2404 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__p++;
# 2405 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__ret.push_back(_CharT()));
# 2406 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2407 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2409 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> long
# 2412 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
collate< _CharT> ::do_hash(const _CharT *__lo, const _CharT *__hi) const
# 2413 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2414 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto unsigned long __val = (0);
# 2415 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; __lo < __hi; ++__lo) {
# 2416 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__val = (*__lo) + ((__val << 7) | (__val >> (numeric_limits< unsigned long> ::digits - 7))); }
# 2418 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return static_cast< long>(__val);
# 2419 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2432 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT, class _Traits> void
# 2434 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__pad< _CharT, _Traits> ::_S_pad(ios_base &__io, _CharT __fill, _CharT *
# 2435 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__news, const _CharT *__olds, const streamsize
# 2436 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__newlen, const streamsize
# 2437 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__oldlen, const bool __num)
# 2438 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2439 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __plen = (static_cast< size_t>((__newlen - __oldlen)));
# 2440 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ios_base::fmtflags __adjust = (__io.flags() & _S_adjustfield);
# 2443 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__adjust == (ios_base::left))
# 2444 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2445 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
_Traits::copy(__news, const_cast< _CharT *>(__olds), __oldlen);
# 2446 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
_Traits::assign(__news + __oldlen, __plen, __fill);
# 2447 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return;
# 2448 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2450 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __mod = (0);
# 2451 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if ((__adjust == (ios_base::internal)) && __num)
# 2452 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2456 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const locale &__loc = __io._M_getloc();
# 2457 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const ctype< _CharT> &__ctype = (use_facet< ctype< _CharT> > (__loc));
# 2459 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __testsign = (((__ctype.widen('-')) == __olds[0]) || ((__ctype.widen('+')) == __olds[0]));
# 2461 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __testhex = ((((__ctype.widen('0')) == __olds[0]) && (__oldlen > 1)) && (((__ctype.widen('x')) == __olds[1]) || ((__ctype.widen('X')) == __olds[1])));
# 2465 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testhex)
# 2466 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2467 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__news[0]) = __olds[0];
# 2468 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__news[1]) = __olds[1];
# 2469 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__mod = (2);
# 2470 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__news += 2;
# 2471 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} else {
# 2472 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__testsign)
# 2473 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2474 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(__news[0]) = __olds[0];
# 2475 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__mod = (1);
# 2476 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
++__news;
# 2477 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
} }
# 2479 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2480 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
_Traits::assign(__news, __plen, __fill);
# 2481 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
_Traits::copy(__news + __plen, const_cast< _CharT *>(__olds + __mod), __oldlen - __mod);
# 2483 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2486 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
static bool __verify_grouping(const char *__grouping, size_t __grouping_size, const string &
# 2487 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__grouping_tmp)
# 2488 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2489 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __n = (__grouping_tmp.size() - (1));
# 2490 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const size_t __min = (std::min(__n, ((size_t)(__grouping_size - (1)))));
# 2491 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto size_t __i = __n;
# 2492 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto bool __test = true;
# 2497 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (size_t __j = (0); (__j < __min) && __test; (--__i), (++__j)) {
# 2498 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__test = __grouping_tmp[__i] == __grouping[__j]; }
# 2499 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
for (; (__i) && __test; --__i) {
# 2500 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__test = __grouping_tmp[__i] == __grouping[__min]; }
# 2503 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__test &= __grouping_tmp[(0)] <= __grouping[__min];
# 2504 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __test;
# 2505 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2507 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
template<class _CharT> _CharT *
# 2509 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__add_grouping(_CharT *__s, _CharT __sep, const char *
# 2510 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__gbeg, size_t __gsize, const _CharT *
# 2511 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__first, const _CharT *__last)
# 2512 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2513 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
if (__last - __first > (*__gbeg))
# 2514 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
{
# 2515 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
auto const bool __bump = (__gsize != (1));
# 2516 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__s = std::__add_grouping(__s, __sep, __gbeg + __bump, __gsize - __bump, __first, __last - (*__gbeg));
# 2519 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
__first = __last - (*__gbeg);
# 2520 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__s++)) = __sep;
# 2521 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2522 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
do {
# 2523 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
(*(__s++)) = *(__first++); } while (__first != __last);
# 2525 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
return __s;
# 2526 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 2532 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class moneypunct< char, false> ;
# 2533 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class moneypunct< char, true> ;
# 2534 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class moneypunct_byname< char, false> ;
# 2535 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class moneypunct_byname< char, true> ;
# 2536 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class money_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 2537 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class money_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 2538 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class numpunct< char> ;
# 2539 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class numpunct_byname< char> ;
# 2540 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 2541 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 2542 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class __timepunct< char> ;
# 2543 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class time_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 2544 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class time_put_byname< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 2545 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class time_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 2546 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class time_get_byname< char, istreambuf_iterator< char, char_traits< char> > > ;
# 2547 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class messages< char> ;
# 2548 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class messages_byname< char> ;
# 2549 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class ctype_byname< char> ;
# 2550 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class codecvt_byname< char, char, __mbstate_t> ;
# 2551 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class collate< char> ;
# 2552 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class collate_byname< char> ;
# 2554 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const codecvt< char, char, __mbstate_t> &use_facet< codecvt< char, char, __mbstate_t> > (const locale &);
# 2558 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const collate< char> &use_facet< collate< char> > (const locale &);
# 2562 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const numpunct< char> &use_facet< numpunct< char> > (const locale &);
# 2566 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const num_put< char, ostreambuf_iterator< char, char_traits< char> > > &use_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2570 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const num_get< char, istreambuf_iterator< char, char_traits< char> > > &use_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2574 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const moneypunct< char, true> &use_facet< moneypunct< char, true> > (const locale &);
# 2578 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const moneypunct< char, false> &use_facet< moneypunct< char, false> > (const locale &);
# 2582 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const money_put< char, ostreambuf_iterator< char, char_traits< char> > > &use_facet< money_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2586 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const money_get< char, istreambuf_iterator< char, char_traits< char> > > &use_facet< money_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2590 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const __timepunct< char> &use_facet< __timepunct< char> > (const locale &);
# 2594 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const time_put< char, ostreambuf_iterator< char, char_traits< char> > > &use_facet< time_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2598 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const time_get< char, istreambuf_iterator< char, char_traits< char> > > &use_facet< time_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2602 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const messages< char> &use_facet< messages< char> > (const locale &);
# 2606 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 2610 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< codecvt< char, char, __mbstate_t> > (const locale &) throw();
# 2614 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< collate< char> > (const locale &) throw();
# 2618 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< char> > (const locale &) throw();
# 2622 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2626 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2630 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< moneypunct< char, false> > (const locale &) throw();
# 2634 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< money_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2638 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< money_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2642 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< __timepunct< char> > (const locale &) throw();
# 2646 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< time_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2650 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< time_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2654 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< messages< char> > (const locale &) throw();
# 2659 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class moneypunct< wchar_t, false> ;
# 2660 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class moneypunct< wchar_t, true> ;
# 2661 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class moneypunct_byname< wchar_t, false> ;
# 2662 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class moneypunct_byname< wchar_t, true> ;
# 2663 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class money_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2664 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class money_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2665 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class numpunct< wchar_t> ;
# 2666 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class numpunct_byname< wchar_t> ;
# 2667 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2668 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2669 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class __timepunct< wchar_t> ;
# 2670 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class time_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2671 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class time_put_byname< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2672 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class time_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2673 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class time_get_byname< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2674 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class messages< wchar_t> ;
# 2675 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class messages_byname< wchar_t> ;
# 2676 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class ctype_byname< wchar_t> ;
# 2677 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class codecvt_byname< wchar_t, char, __mbstate_t> ;
# 2678 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class collate< wchar_t> ;
# 2679 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template class collate_byname< wchar_t> ;
# 2681 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const codecvt< wchar_t, char, __mbstate_t> &use_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &);
# 2685 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const collate< wchar_t> &use_facet< collate< wchar_t> > (const locale &);
# 2689 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const numpunct< wchar_t> &use_facet< numpunct< wchar_t> > (const locale &);
# 2693 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2697 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2701 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const moneypunct< wchar_t, true> &use_facet< moneypunct< wchar_t, true> > (const locale &);
# 2705 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const moneypunct< wchar_t, false> &use_facet< moneypunct< wchar_t, false> > (const locale &);
# 2709 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const money_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< money_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2713 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const money_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< money_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2717 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const __timepunct< wchar_t> &use_facet< __timepunct< wchar_t> > (const locale &);
# 2721 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const time_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< time_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2725 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const time_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< time_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2729 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template const messages< wchar_t> &use_facet< messages< wchar_t> > (const locale &);
# 2733 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 2737 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &) throw();
# 2741 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< collate< wchar_t> > (const locale &) throw();
# 2745 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< wchar_t> > (const locale &) throw();
# 2749 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2753 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2757 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< moneypunct< wchar_t, false> > (const locale &) throw();
# 2761 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< money_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2765 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< money_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2769 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< __timepunct< wchar_t> > (const locale &) throw();
# 2773 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< time_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2777 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< time_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2781 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
extern template bool has_facet< messages< wchar_t> > (const locale &) throw();
# 2786 "/usr/include/c++/4.0.0/bits/locale_facets.tcc" 3
}
# 47 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
namespace std {
# 49 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits>
# 51 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::sentry::sentry(std::basic_ostream< _CharT, _Traits> &__os) : _M_ok(false), _M_os(__os)
# 53 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 55 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (((__os.tie())) && ((__os.good()))) {
# 56 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(((__os.tie()))->flush()); }
# 58 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if ((__os.good())) {
# 59 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->_M_ok) = true; } else {
# 61 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__os.setstate(ios_base::failbit)); }
# 62 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 64 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> inline typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 67 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(__ostream_type &(*__pf)(__ostream_type &))
# 68 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 72 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return __pf(*this);
# 73 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 75 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> inline typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 78 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(__ios_type &(*__pf)(__ios_type &))
# 79 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 83 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__pf(*this);
# 84 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 85 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 87 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> inline typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 90 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(ios_base &(*__pf)(ios_base &))
# 91 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 95 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__pf(*this);
# 96 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 97 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 99 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 102 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(bool __n)
# 103 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 104 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 105 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 106 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 107 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 108 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 109 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 110 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const __num_put_type &__np = (__check_facet((this->_M_num_put)));
# 111 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if ((((__np.put(*this, *this, (this->fill()), __n))).failed())) {
# 112 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 113 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 114 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 115 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 116 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 117 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 118 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 119 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 120 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 122 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 125 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(long __n)
# 126 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 127 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 128 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 129 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 130 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 131 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 132 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 133 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto bool __b = false;
# 134 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const char_type __c = ((this->fill()));
# 135 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const ios_base::fmtflags __fmt = (((this->flags())) & ios_base::basefield);
# 137 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const __num_put_type &__np = (__check_facet((this->_M_num_put)));
# 138 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (((__fmt & _S_oct)) || ((__fmt & _S_hex)))
# 139 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 140 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const unsigned long __l = (static_cast< unsigned long>(__n));
# 141 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__b = (((__np.put(*this, *this, __c, __l))).failed());
# 142 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
} else {
# 144 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__b = (((__np.put(*this, *this, __c, __n))).failed()); }
# 145 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__b) {
# 146 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 147 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 148 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 149 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 150 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 151 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 152 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 153 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 154 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 156 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 159 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(unsigned long __n)
# 160 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 161 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 162 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 163 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 164 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 165 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 166 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 167 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const __num_put_type &__np = (__check_facet((this->_M_num_put)));
# 168 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if ((((__np.put(*this, *this, (this->fill()), __n))).failed())) {
# 169 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 170 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 171 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 172 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 173 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 174 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 175 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 176 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 177 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 180 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 183 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(long long __n)
# 184 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 185 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 186 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 187 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 188 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 189 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 190 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 191 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto bool __b = false;
# 192 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const char_type __c = ((this->fill()));
# 193 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const ios_base::fmtflags __fmt = (((this->flags())) & ios_base::basefield);
# 195 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const __num_put_type &__np = (__check_facet((this->_M_num_put)));
# 196 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (((__fmt & _S_oct)) || ((__fmt & _S_hex)))
# 197 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 198 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const unsigned long long __l = (static_cast< unsigned long long>(__n));
# 200 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__b = (((__np.put(*this, *this, __c, __l))).failed());
# 201 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
} else {
# 203 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__b = (((__np.put(*this, *this, __c, __n))).failed()); }
# 204 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__b) {
# 205 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 206 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 207 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 208 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 209 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 210 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 211 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 212 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 213 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 215 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 218 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(unsigned long long __n)
# 219 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 220 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 221 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 222 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 223 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 224 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 225 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 226 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const __num_put_type &__np = (__check_facet((this->_M_num_put)));
# 227 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if ((((__np.put(*this, *this, (this->fill()), __n))).failed())) {
# 228 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 229 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 230 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 231 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 232 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 233 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 234 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 235 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 236 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 239 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 242 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(double __n)
# 243 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 244 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 245 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 246 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 247 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 248 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 249 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 250 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const __num_put_type &__np = (__check_facet((this->_M_num_put)));
# 251 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if ((((__np.put(*this, *this, (this->fill()), __n))).failed())) {
# 252 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 253 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 254 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 255 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 256 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 257 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 258 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 259 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 260 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 262 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 265 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(long double __n)
# 266 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 267 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 268 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 269 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 270 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 271 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 272 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 273 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const __num_put_type &__np = (__check_facet((this->_M_num_put)));
# 274 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if ((((__np.put(*this, *this, (this->fill()), __n))).failed())) {
# 275 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 276 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 277 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 278 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 279 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 280 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 281 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 282 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 283 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 285 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 288 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(const void *__n)
# 289 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 290 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 291 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 292 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 293 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 294 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 295 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 296 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const __num_put_type &__np = (__check_facet((this->_M_num_put)));
# 297 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if ((((__np.put(*this, *this, (this->fill()), __n))).failed())) {
# 298 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 299 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 300 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 301 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 302 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 303 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 304 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 305 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 306 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 308 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 311 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::operator<<(__streambuf_type *__sbin)
# 312 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 313 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 314 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 315 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb && __sbin)
# 316 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 317 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 318 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 319 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (!(__copy_streambufs(__sbin, (this->rdbuf())))) {
# 320 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_failbit); }
# 321 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 322 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 323 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::failbit)); }
# 324 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
} else {
# 325 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (!__sbin) {
# 326 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); } }
# 327 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 328 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 329 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 330 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 332 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 335 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::put(char_type __c)
# 336 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 343 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 344 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 345 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 346 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 347 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 348 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 349 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const int_type __put = ((((this->rdbuf()))->sputc(__c)));
# 350 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (_Traits::eq_int_type(__put, _Traits::eof())) {
# 351 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 352 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 353 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 354 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 355 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 356 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 357 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 358 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 359 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 361 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 364 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::write(const _CharT *__s, streamsize __n)
# 365 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 373 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto sentry __cerb(*this);
# 374 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 375 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 376 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 377 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ this->_M_write(__s, __n); }
# 378 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 379 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 380 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 381 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 382 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 384 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 387 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::flush()
# 388 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 392 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 393 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 394 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 395 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (((this->rdbuf())) && ((((this->rdbuf()))->pubsync()) == (-1))) {
# 396 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_badbit); }
# 397 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 398 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 399 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 400 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 401 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 402 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 403 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 405 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::pos_type
# 408 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::tellp()
# 409 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 410 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto pos_type __ret = ((pos_type)(-1));
# 411 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 412 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 413 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (!((this->fail()))) {
# 414 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__ret = (((this->rdbuf()))->pubseekoff(0, ios_base::cur, ios_base::out)); }
# 415 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 416 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 417 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 418 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return __ret;
# 419 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 421 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 424 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::seekp(pos_type __pos)
# 425 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 426 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 427 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 428 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 429 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (!((this->fail())))
# 430 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 433 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const pos_type __p = ((((this->rdbuf()))->pubseekpos(__pos, ios_base::out)));
# 437 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__p == ((pos_type)(((off_type)(-1))))) {
# 438 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_failbit); }
# 439 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 440 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 441 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 442 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 443 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 444 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 445 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 446 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 448 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 451 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
basic_ostream< _CharT, _Traits> ::seekp(off_type __off, ios_base::seekdir __dir)
# 452 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 453 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 454 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 455 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 456 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (!((this->fail())))
# 457 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 460 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const pos_type __p = ((((this->rdbuf()))->pubseekoff(__off, __dir, ios_base::out)));
# 464 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__p == ((pos_type)(((off_type)(-1))))) {
# 465 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__err |= _S_failbit); }
# 466 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 467 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 468 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 469 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 470 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__err) {
# 471 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(this->setstate(__err)); }
# 472 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return *this;
# 473 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 476 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> basic_ostream< _CharT, _Traits> &
# 478 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
operator<<(basic_ostream< _CharT, _Traits> &__out, _CharT __c)
# 479 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 480 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
typedef basic_ostream< _CharT, _Traits> __ostream_type;
# 481 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out);
# 482 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 483 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 484 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 485 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 486 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const streamsize __w = ((__out.width()));
# 487 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto streamsize __len = (1);
# 488 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto _CharT *__cs = (&__c);
# 489 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__w > __len)
# 490 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 491 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__cs = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w));
# 493 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__pad< _CharT, _Traits> ::_S_pad(__out, (__out.fill()), __cs, &__c, __w, __len, false);
# 495 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__len = __w;
# 496 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 497 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out._M_write(__cs, __len));
# 498 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out.width(0));
# 499 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 500 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 501 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (__out._M_setstate(ios_base::badbit)); }
# 502 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 503 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return __out;
# 504 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 507 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _Traits> basic_ostream< char, _Traits> &
# 509 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
operator<<(basic_ostream< char, _Traits> &__out, char __c)
# 510 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 511 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
typedef basic_ostream< char, _Traits> __ostream_type;
# 512 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto typename basic_ostream< char, _Traits> ::sentry __cerb(__out);
# 513 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 514 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 515 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 516 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 517 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const streamsize __w = ((__out.width()));
# 518 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto streamsize __len = (1);
# 519 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto char *__cs = (&__c);
# 520 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__w > __len)
# 521 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 522 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__cs = static_cast< char *>(__builtin_alloca(__w));
# 523 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__pad< char, _Traits> ::_S_pad(__out, (__out.fill()), __cs, &__c, __w, __len, false);
# 525 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__len = __w;
# 526 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 527 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out._M_write(__cs, __len));
# 528 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out.width(0));
# 529 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 530 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 531 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (__out._M_setstate(ios_base::badbit)); }
# 532 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 533 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return __out;
# 534 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 536 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> basic_ostream< _CharT, _Traits> &
# 538 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
operator<<(basic_ostream< _CharT, _Traits> &__out, const _CharT *__s)
# 539 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 540 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
typedef basic_ostream< _CharT, _Traits> __ostream_type;
# 541 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out);
# 542 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb && __s)
# 543 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 544 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 545 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 546 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const streamsize __w = ((__out.width()));
# 547 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto streamsize __len = (static_cast< streamsize>((_Traits::length(__s))));
# 548 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__w > __len)
# 549 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 550 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto _CharT *__cs = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)));
# 553 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__pad< _CharT, _Traits> ::_S_pad(__out, (__out.fill()), __cs, __s, __w, __len, false);
# 555 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__s = __cs;
# 556 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__len = __w;
# 557 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 558 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out._M_write(__s, __len));
# 559 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out.width(0));
# 560 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 561 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 562 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (__out._M_setstate(ios_base::badbit)); }
# 563 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
} else {
# 564 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (!__s) {
# 565 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out.setstate(ios_base::badbit)); } }
# 566 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return __out;
# 567 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 569 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits> basic_ostream< _CharT, _Traits> &
# 571 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
operator<<(basic_ostream< _CharT, _Traits> &__out, const char *__s)
# 572 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 573 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
typedef basic_ostream< _CharT, _Traits> __ostream_type;
# 577 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
typedef char_traits< char> __traits_type;
# 578 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out);
# 579 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb && __s)
# 580 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 581 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto size_t __clen = __traits_type::length(__s);
# 582 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto _CharT *__ws = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __clen)));
# 584 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
for (size_t __i = (0); __i < __clen; ++__i) {
# 585 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__ws[__i]) = (__out.widen(__s[__i])); }
# 586 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto _CharT *__str = __ws;
# 588 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 589 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 590 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const streamsize __w = ((__out.width()));
# 591 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto streamsize __len = (static_cast< streamsize>(__clen));
# 592 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__w > __len)
# 593 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 594 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto _CharT *__cs = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)));
# 597 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__pad< _CharT, _Traits> ::_S_pad(__out, (__out.fill()), __cs, __ws, __w, __len, false);
# 599 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__str = __cs;
# 600 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__len = __w;
# 601 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 602 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out._M_write(__str, __len));
# 603 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out.width(0));
# 604 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 605 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 606 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (__out._M_setstate(ios_base::badbit)); }
# 607 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
} else {
# 608 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (!(__s)) {
# 609 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out.setstate(ios_base::badbit)); } }
# 610 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return __out;
# 611 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 614 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _Traits> basic_ostream< char, _Traits> &
# 616 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
operator<<(basic_ostream< char, _Traits> &__out, const char *__s)
# 617 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 618 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
typedef basic_ostream< char, _Traits> __ostream_type;
# 619 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto typename basic_ostream< char, _Traits> ::sentry __cerb(__out);
# 620 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb && __s)
# 621 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 622 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
try
# 623 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 624 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const streamsize __w = ((__out.width()));
# 625 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto streamsize __len = (static_cast< streamsize>((_Traits::length(__s))));
# 626 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__w > __len)
# 627 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 628 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto char *__cs = (static_cast< char *>(__builtin_alloca(__w)));
# 629 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__pad< char, _Traits> ::_S_pad(__out, (__out.fill()), __cs, __s, __w, __len, false);
# 631 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__s = __cs;
# 632 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__len = __w;
# 633 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 634 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out._M_write(__s, __len));
# 635 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out.width(0));
# 636 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 637 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
catch (...)
# 638 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{ (__out._M_setstate(ios_base::badbit)); }
# 639 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
} else {
# 640 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (!(__s)) {
# 641 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out.setstate(ios_base::badbit)); } }
# 642 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return __out;
# 643 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 646 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_ostream< _CharT, _Traits> &
# 648 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
operator<<(basic_ostream< _CharT, _Traits> &__out, const basic_string< _CharT, _Traits, _Alloc> &
# 649 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__str)
# 650 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 651 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
typedef basic_ostream< _CharT, _Traits> __ostream_type;
# 652 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out);
# 653 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__cerb)
# 654 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 655 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const streamsize __w = ((__out.width()));
# 656 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto streamsize __len = (static_cast< streamsize>(((__str.size()))));
# 657 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto const _CharT *__s = ((__str.data()));
# 661 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
if (__w > __len)
# 662 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
{
# 663 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
auto _CharT *__cs = (static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)));
# 665 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__pad< _CharT, _Traits> ::_S_pad(__out, (__out.fill()), __cs, __s, __w, __len, false);
# 667 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__s = __cs;
# 668 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
__len = __w;
# 669 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 670 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out._M_write(__s, __len));
# 671 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
(__out.width(0));
# 672 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 673 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
return __out;
# 674 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 680 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template class basic_ostream< char, char_traits< char> > ;
# 681 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &endl(basic_ostream< char, char_traits< char> > &);
# 682 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &ends(basic_ostream< char, char_traits< char> > &);
# 683 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &flush(basic_ostream< char, char_traits< char> > &);
# 684 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, char);
# 685 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, unsigned char);
# 686 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, signed char);
# 687 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const char *);
# 688 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const unsigned char *);
# 689 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const signed char *);
# 692 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template class basic_ostream< wchar_t, char_traits< wchar_t> > ;
# 693 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &endl(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 694 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &ends(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 695 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &flush(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 696 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, wchar_t);
# 697 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, char);
# 698 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const wchar_t *);
# 699 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const char *);
# 702 "/usr/include/c++/4.0.0/bits/ostream.tcc" 3
}
# 47 "/usr/include/c++/4.0.0/istream" 3
namespace std {
# 57 "/usr/include/c++/4.0.0/istream" 3
template<class _CharT, class _Traits>
# 58 "/usr/include/c++/4.0.0/istream" 3
class basic_istream : virtual public basic_ios< _CharT, _Traits> {
# 62 "/usr/include/c++/4.0.0/istream" 3
public: typedef _CharT char_type;
# 63 "/usr/include/c++/4.0.0/istream" 3
typedef typename _Traits::int_type int_type;
# 64 "/usr/include/c++/4.0.0/istream" 3
typedef typename _Traits::pos_type pos_type;
# 65 "/usr/include/c++/4.0.0/istream" 3
typedef typename _Traits::off_type off_type;
# 66 "/usr/include/c++/4.0.0/istream" 3
typedef _Traits traits_type;
# 69 "/usr/include/c++/4.0.0/istream" 3
typedef basic_streambuf< _CharT, _Traits> __streambuf_type;
# 70 "/usr/include/c++/4.0.0/istream" 3
typedef basic_ios< _CharT, _Traits> __ios_type;
# 71 "/usr/include/c++/4.0.0/istream" 3
typedef std::basic_istream< _CharT, _Traits> __istream_type;
# 73 "/usr/include/c++/4.0.0/istream" 3
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> > __num_get_type;
# 74 "/usr/include/c++/4.0.0/istream" 3
typedef ctype< _CharT> __ctype_type;
# 76 "/usr/include/c++/4.0.0/istream" 3
template<class _CharT2, class _Traits2> friend std::basic_istream< _CharT2, _Traits2> &operator>>(std::basic_istream< _CharT2, _Traits2> &, _CharT2 &);
# 80 "/usr/include/c++/4.0.0/istream" 3
template<class _CharT2, class _Traits2> friend std::basic_istream< _CharT2, _Traits2> &operator>>(std::basic_istream< _CharT2, _Traits2> &, _CharT2 *);
# 92 "/usr/include/c++/4.0.0/istream" 3
protected: streamsize _M_gcount;
# 104 "/usr/include/c++/4.0.0/istream" 3
public: explicit basic_istream(__streambuf_type *__sb) : _M_gcount(((streamsize)0))
# 105 "/usr/include/c++/4.0.0/istream" 3
{ (this->init(__sb)); }
# 113 "/usr/include/c++/4.0.0/istream" 3
virtual ~basic_istream()
# 114 "/usr/include/c++/4.0.0/istream" 3
{ (this->_M_gcount) = ((streamsize)0); }
# 117 "/usr/include/c++/4.0.0/istream" 3
class sentry;
# 118 "/usr/include/c++/4.0.0/istream" 3
friend class sentry;
# 131 "/usr/include/c++/4.0.0/istream" 3
inline __istream_type &operator>>(__istream_type &(*)(__istream_type &));
# 134 "/usr/include/c++/4.0.0/istream" 3
inline __istream_type &operator>>(__ios_type &(*)(__ios_type &));
# 137 "/usr/include/c++/4.0.0/istream" 3
inline __istream_type &operator>>(ios_base &(*)(ios_base &));
# 169 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(bool &);
# 172 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(short &);
# 175 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(unsigned short &);
# 178 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(int &);
# 181 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(unsigned &);
# 184 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(long &);
# 187 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(unsigned long &);
# 191 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(long long &);
# 194 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(unsigned long long &);
# 198 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(float &);
# 201 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(double &);
# 204 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(long double &);
# 207 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(void *&);
# 230 "/usr/include/c++/4.0.0/istream" 3
__istream_type &operator>>(__streambuf_type *);
# 240 "/usr/include/c++/4.0.0/istream" 3
streamsize gcount() const
# 241 "/usr/include/c++/4.0.0/istream" 3
{ return this->_M_gcount; }
# 272 "/usr/include/c++/4.0.0/istream" 3
int_type get();
# 286 "/usr/include/c++/4.0.0/istream" 3
__istream_type &get(char_type &);
# 313 "/usr/include/c++/4.0.0/istream" 3
__istream_type &get(char_type *, streamsize, char_type);
# 324 "/usr/include/c++/4.0.0/istream" 3
__istream_type &get(char_type *__s, streamsize __n)
# 325 "/usr/include/c++/4.0.0/istream" 3
{ return (this->get(__s, __n, (this->widen('\n')))); }
# 347 "/usr/include/c++/4.0.0/istream" 3
__istream_type &get(__streambuf_type &, char_type);
# 357 "/usr/include/c++/4.0.0/istream" 3
__istream_type &get(__streambuf_type &__sb)
# 358 "/usr/include/c++/4.0.0/istream" 3
{ return (this->get(__sb, (this->widen('\n')))); }
# 386 "/usr/include/c++/4.0.0/istream" 3
__istream_type &getline(char_type *, streamsize, char_type);
# 397 "/usr/include/c++/4.0.0/istream" 3
__istream_type &getline(char_type *__s, streamsize __n)
# 398 "/usr/include/c++/4.0.0/istream" 3
{ return (this->getline(__s, __n, (this->widen('\n')))); }
# 421 "/usr/include/c++/4.0.0/istream" 3
__istream_type &ignore();
# 424 "/usr/include/c++/4.0.0/istream" 3
__istream_type &ignore(streamsize);
# 427 "/usr/include/c++/4.0.0/istream" 3
__istream_type &ignore(streamsize, int_type);
# 438 "/usr/include/c++/4.0.0/istream" 3
int_type peek();
# 456 "/usr/include/c++/4.0.0/istream" 3
__istream_type &read(char_type *, streamsize);
# 475 "/usr/include/c++/4.0.0/istream" 3
streamsize readsome(char_type *, streamsize);
# 491 "/usr/include/c++/4.0.0/istream" 3
__istream_type &putback(char_type);
# 506 "/usr/include/c++/4.0.0/istream" 3
__istream_type &unget();
# 524 "/usr/include/c++/4.0.0/istream" 3
int sync();
# 538 "/usr/include/c++/4.0.0/istream" 3
pos_type tellg();
# 553 "/usr/include/c++/4.0.0/istream" 3
__istream_type &seekg(pos_type);
# 569 "/usr/include/c++/4.0.0/istream" 3
__istream_type &seekg(off_type, ios_base::seekdir);
# 574 "/usr/include/c++/4.0.0/istream" 3
protected: explicit basic_istream() : _M_gcount(((streamsize)0)) { }
# 575 "/usr/include/c++/4.0.0/istream" 3
};
# 581 "/usr/include/c++/4.0.0/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::getline(char_type *, streamsize, char_type);
# 586 "/usr/include/c++/4.0.0/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::ignore(streamsize);
# 591 "/usr/include/c++/4.0.0/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::ignore(streamsize, int_type);
# 597 "/usr/include/c++/4.0.0/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::getline(char_type *, streamsize, char_type);
# 602 "/usr/include/c++/4.0.0/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize);
# 607 "/usr/include/c++/4.0.0/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize, int_type);
# 621 "/usr/include/c++/4.0.0/istream" 3
template<class _CharT, class _Traits>
# 622 "/usr/include/c++/4.0.0/istream" 3
class basic_istream< _CharT, _Traits> ::sentry {
# 626 "/usr/include/c++/4.0.0/istream" 3
public: typedef _Traits traits_type;
# 627 "/usr/include/c++/4.0.0/istream" 3
typedef basic_streambuf< _CharT, _Traits> __streambuf_type;
# 628 "/usr/include/c++/4.0.0/istream" 3
typedef basic_istream< _CharT, _Traits> __istream_type;
# 629 "/usr/include/c++/4.0.0/istream" 3
typedef typename basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type;
# 630 "/usr/include/c++/4.0.0/istream" 3
typedef typename _Traits::int_type __int_type;
# 654 "/usr/include/c++/4.0.0/istream" 3
explicit sentry(basic_istream< _CharT, _Traits> &, bool = false);
# 663 "/usr/include/c++/4.0.0/istream" 3
operator bool() const { return this->_M_ok; }
# 666 "/usr/include/c++/4.0.0/istream" 3
private: bool _M_ok;
# 667 "/usr/include/c++/4.0.0/istream" 3
};
# 682 "/usr/include/c++/4.0.0/istream" 3
template<class _CharT, class _Traits> extern basic_istream< _CharT, _Traits> &operator>>(basic_istream< _CharT, _Traits> &, _CharT &);
# 686 "/usr/include/c++/4.0.0/istream" 3
template<class _Traits> basic_istream< char, _Traits> &
# 688 "/usr/include/c++/4.0.0/istream" 3
operator>>(basic_istream< char, _Traits> &__in, unsigned char &__c)
# 689 "/usr/include/c++/4.0.0/istream" 3
{ return __in >> (reinterpret_cast< char &>(__c)); }
# 691 "/usr/include/c++/4.0.0/istream" 3
template<class _Traits> basic_istream< char, _Traits> &
# 693 "/usr/include/c++/4.0.0/istream" 3
operator>>(basic_istream< char, _Traits> &__in, signed char &__c)
# 694 "/usr/include/c++/4.0.0/istream" 3
{ return __in >> (reinterpret_cast< char &>(__c)); }
# 723 "/usr/include/c++/4.0.0/istream" 3
template<class _CharT, class _Traits> extern basic_istream< _CharT, _Traits> &operator>>(basic_istream< _CharT, _Traits> &, _CharT *);
# 727 "/usr/include/c++/4.0.0/istream" 3
template<class _Traits> basic_istream< char, _Traits> &
# 729 "/usr/include/c++/4.0.0/istream" 3
operator>>(basic_istream< char, _Traits> &__in, unsigned char *__s)
# 730 "/usr/include/c++/4.0.0/istream" 3
{ return __in >> (reinterpret_cast< char *>(__s)); }
# 732 "/usr/include/c++/4.0.0/istream" 3
template<class _Traits> basic_istream< char, _Traits> &
# 734 "/usr/include/c++/4.0.0/istream" 3
operator>>(basic_istream< char, _Traits> &__in, signed char *__s)
# 735 "/usr/include/c++/4.0.0/istream" 3
{ return __in >> (reinterpret_cast< char *>(__s)); }
# 745 "/usr/include/c++/4.0.0/istream" 3
template<class _CharT, class _Traits>
# 746 "/usr/include/c++/4.0.0/istream" 3
class basic_iostream : public basic_istream< _CharT, _Traits> , public basic_ostream< _CharT, _Traits> {
# 754 "/usr/include/c++/4.0.0/istream" 3
public: typedef _CharT char_type;
# 755 "/usr/include/c++/4.0.0/istream" 3
typedef typename _Traits::int_type int_type;
# 756 "/usr/include/c++/4.0.0/istream" 3
typedef typename _Traits::pos_type pos_type;
# 757 "/usr/include/c++/4.0.0/istream" 3
typedef typename _Traits::off_type off_type;
# 758 "/usr/include/c++/4.0.0/istream" 3
typedef _Traits traits_type;
# 761 "/usr/include/c++/4.0.0/istream" 3
typedef basic_istream< _CharT, _Traits> __istream_type;
# 762 "/usr/include/c++/4.0.0/istream" 3
typedef basic_ostream< _CharT, _Traits> __ostream_type;
# 771 "/usr/include/c++/4.0.0/istream" 3
explicit basic_iostream(basic_streambuf< _CharT, _Traits> *__sb) : basic_istream< _CharT, _Traits> (), basic_ostream< _CharT, _Traits> ()
# 773 "/usr/include/c++/4.0.0/istream" 3
{ (this->init(__sb)); }
# 779 "/usr/include/c++/4.0.0/istream" 3
virtual ~basic_iostream() { }
# 783 "/usr/include/c++/4.0.0/istream" 3
protected: explicit basic_iostream() : basic_istream< _CharT, _Traits> (), basic_ostream< _CharT, _Traits> ()
# 784 "/usr/include/c++/4.0.0/istream" 3
{ }
# 785 "/usr/include/c++/4.0.0/istream" 3
};
# 808 "/usr/include/c++/4.0.0/istream" 3
template<class _CharT, class _Traits> extern basic_istream< _CharT, _Traits> &ws(basic_istream< _CharT, _Traits> &);
# 811 "/usr/include/c++/4.0.0/istream" 3
}
# 48 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
namespace std {
# 50 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits>
# 52 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::sentry::sentry(std::basic_istream< _CharT, _Traits> &__in, bool __noskip) : _M_ok(false)
# 53 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 54 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 55 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if ((__in.good()))
# 56 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 57 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if ((__in.tie())) {
# 58 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(((__in.tie()))->flush()); }
# 59 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if ((!__noskip) && (((__in.flags())) & ios_base::skipws))
# 60 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 61 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __int_type __eof = (_Traits::eof());
# 62 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((__in.rdbuf()));
# 63 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __int_type __c = ((__sb->sgetc()));
# 65 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __ctype_type &__ct = (__check_facet((__in._M_ctype)));
# 66 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while ((!(_Traits::eq_int_type(__c, __eof))) && ((__ct.is(ctype_base::space, _Traits::to_char_type(__c))))) {
# 69 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__sb->snextc()); }
# 74 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 75 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); }
# 76 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 77 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 79 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (((__in.good())) && (__err == (ios_base::goodbit))) {
# 80 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_ok) = true; } else
# 82 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 83 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit);
# 84 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in.setstate(__err));
# 85 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 86 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 88 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> inline typename basic_istream< _CharT, _Traits> ::__istream_type &
# 91 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(__istream_type &(*__pf)(__istream_type &))
# 92 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ return __pf(*this); }
# 94 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> inline typename basic_istream< _CharT, _Traits> ::__istream_type &
# 97 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(__ios_type &(*__pf)(__ios_type &))
# 98 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 99 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__pf(*this);
# 100 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 101 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 103 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> inline typename basic_istream< _CharT, _Traits> ::__istream_type &
# 106 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(ios_base &(*__pf)(ios_base &))
# 107 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 108 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__pf(*this);
# 109 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 110 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 112 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 115 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(bool &__n)
# 116 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 117 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 118 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 119 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 120 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 121 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 122 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 123 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 124 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 125 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 126 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 127 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 128 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 129 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 130 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 131 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 132 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 134 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 137 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(short &__n)
# 138 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 139 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 140 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 141 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 142 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 143 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 144 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 145 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto long __l;
# 146 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 147 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __l));
# 150 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if ((!((__err & _S_failbit))) && ((numeric_limits< short> ::min() <= __l) && (__l <= numeric_limits< short> ::max()))) {
# 153 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__n = __l; } else {
# 155 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 156 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 157 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 158 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 159 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 160 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 161 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 162 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 163 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 165 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 168 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(unsigned short &__n)
# 169 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 170 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 171 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 172 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 173 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 174 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 175 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 176 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 177 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 178 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 179 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 180 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 181 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 182 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 183 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 184 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 185 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 187 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 190 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(int &__n)
# 191 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 192 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 193 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 194 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 195 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 196 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 197 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 198 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto long __l;
# 199 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 200 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __l));
# 203 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if ((!((__err & _S_failbit))) && ((numeric_limits< int> ::min() <= __l) && (__l <= numeric_limits< int> ::max()))) {
# 206 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__n = __l; } else {
# 208 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 209 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 210 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 211 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 212 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 213 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 214 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 215 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 216 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 218 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 221 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(unsigned &__n)
# 222 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 223 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 224 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 225 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 226 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 227 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 228 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 229 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 230 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 231 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 232 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 233 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 234 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 235 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 236 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 237 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 238 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 240 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 243 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(long &__n)
# 244 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 245 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 246 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 247 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 248 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 249 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 250 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 251 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 252 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 253 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 254 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 255 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 256 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 257 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 258 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 259 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 260 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 262 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 265 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(unsigned long &__n)
# 266 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 267 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 268 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 269 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 270 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 271 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 272 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 273 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 274 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 275 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 276 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 277 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 278 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 279 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 280 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 281 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 282 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 285 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 288 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(long long &__n)
# 289 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 290 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 291 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 292 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 293 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 294 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 295 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 296 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 297 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 298 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 299 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 300 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 301 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 302 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 303 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 304 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 305 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 307 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 310 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(unsigned long long &__n)
# 311 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 312 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 313 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 314 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 315 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 316 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 317 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 318 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 319 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 320 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 321 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 322 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 323 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 324 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 325 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 326 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 327 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 330 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 333 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(float &__n)
# 334 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 335 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 336 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 337 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 338 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 339 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 340 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 341 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 342 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 343 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 344 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 345 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 346 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 347 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 348 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 349 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 350 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 352 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 355 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(double &__n)
# 356 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 357 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 358 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 359 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 360 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 361 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 362 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 363 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 364 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 365 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 366 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 367 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 368 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 369 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 370 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 371 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 372 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 374 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 377 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(long double &__n)
# 378 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 379 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 380 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 381 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 382 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 383 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 384 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 385 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 386 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 387 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 388 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 389 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 390 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 391 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 392 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 393 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 394 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 396 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 399 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(void *&__n)
# 400 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 401 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 402 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 403 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 404 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 405 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 406 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 407 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __num_get_type &__ng = (__check_facet((this->_M_num_get)));
# 408 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__ng.get(*this, 0, *this, __err, __n));
# 409 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 410 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 411 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 412 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 413 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 414 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 415 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 416 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 418 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 421 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::operator>>(__streambuf_type *__sbout)
# 422 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 423 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 424 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, false);
# 425 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb && __sbout)
# 426 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 427 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 428 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 429 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(__copy_streambufs((this->rdbuf()), __sbout))) {
# 430 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 431 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 432 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 433 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::failbit)); }
# 434 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
} else {
# 435 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!__sbout) {
# 436 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); } }
# 437 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 438 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 439 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 440 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 442 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type
# 445 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::get()
# 446 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 447 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 448 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto int_type __c = __eof;
# 449 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 450 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 451 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 452 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 453 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 454 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 455 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 456 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (((this->rdbuf()))->sbumpc());
# 458 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(_Traits::eq_int_type(__c, __eof))) {
# 459 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (1); } else {
# 461 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); }
# 462 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 463 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 464 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 465 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 466 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(this->_M_gcount)) {
# 467 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 468 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 469 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 470 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return __c;
# 471 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 473 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 476 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::get(char_type &__c)
# 477 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 478 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 479 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 480 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 481 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 482 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 483 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 484 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 485 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __cb = ((((this->rdbuf()))->sbumpc()));
# 487 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(_Traits::eq_int_type(__cb, _Traits::eof())))
# 488 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 489 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (1);
# 490 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = _Traits::to_char_type(__cb);
# 491 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
} else {
# 493 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); }
# 494 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 495 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 496 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 497 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 498 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(this->_M_gcount)) {
# 499 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 500 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 501 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 502 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 503 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 505 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 508 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::get(char_type *__s, streamsize __n, char_type __delim)
# 509 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 510 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 511 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 512 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 513 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 514 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 515 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 516 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 517 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __idelim = (_Traits::to_int_type(__delim));
# 518 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 519 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((this->rdbuf()));
# 520 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto int_type __c = ((__sb->sgetc()));
# 522 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while (((this->_M_gcount + 1 < __n) && (!(_Traits::eq_int_type(__c, __eof)))) && (!(_Traits::eq_int_type(__c, __idelim))))
# 525 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 526 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(*(__s++)) = _Traits::to_char_type(__c);
# 527 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++(this->_M_gcount);
# 528 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__sb->snextc());
# 529 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 530 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 531 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); }
# 532 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 533 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 534 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 535 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 538 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__n > 0) {
# 539 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(*__s) = char_type(); }
# 540 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(this->_M_gcount)) {
# 541 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 542 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 543 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 544 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 545 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 547 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 550 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::get(__streambuf_type &__sb, char_type __delim)
# 551 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 552 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 553 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 554 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 555 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 556 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 557 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 558 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 559 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __idelim = (_Traits::to_int_type(__delim));
# 560 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 561 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__this_sb = ((this->rdbuf()));
# 562 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto int_type __c = ((__this_sb->sgetc()));
# 563 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto char_type __c2 = (_Traits::to_char_type(__c));
# 565 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while (((!(_Traits::eq_int_type(__c, __eof))) && (!(_Traits::eq_int_type(__c, __idelim)))) && (!(_Traits::eq_int_type((__sb.sputc(__c2)), __eof))))
# 568 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 569 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++(this->_M_gcount);
# 570 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__this_sb->snextc());
# 571 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c2 = _Traits::to_char_type(__c);
# 572 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 573 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 574 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); }
# 575 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 576 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 577 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 578 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 579 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(this->_M_gcount)) {
# 580 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 581 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 582 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 583 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 584 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 586 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 589 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::getline(char_type *__s, streamsize __n, char_type __delim)
# 590 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 591 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 592 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 593 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 594 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 595 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 596 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 597 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 598 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __idelim = (_Traits::to_int_type(__delim));
# 599 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 600 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((this->rdbuf()));
# 601 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto int_type __c = ((__sb->sgetc()));
# 603 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while (((this->_M_gcount + 1 < __n) && (!(_Traits::eq_int_type(__c, __eof)))) && (!(_Traits::eq_int_type(__c, __idelim))))
# 606 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 607 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(*(__s++)) = _Traits::to_char_type(__c);
# 608 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__sb->snextc());
# 609 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++(this->_M_gcount);
# 610 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 611 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 612 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); } else
# 614 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 615 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __idelim))
# 616 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 617 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__sb->sbumpc());
# 618 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++(this->_M_gcount);
# 619 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
} else {
# 621 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 622 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 623 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 624 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 625 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 626 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 629 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__n > 0) {
# 630 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(*__s) = char_type(); }
# 631 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(this->_M_gcount)) {
# 632 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 633 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 634 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 635 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 636 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 641 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 644 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::ignore()
# 645 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 646 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 647 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 648 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 649 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 650 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 651 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 652 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 653 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 654 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((this->rdbuf()));
# 656 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type((__sb->sbumpc()), __eof)) {
# 657 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); } else {
# 659 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (1); }
# 660 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 661 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 662 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 663 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 664 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 665 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 666 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 667 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 669 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 672 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::ignore(streamsize __n)
# 673 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 674 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 675 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 676 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb && (__n > 0))
# 677 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 678 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 679 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 680 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 681 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 682 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((this->rdbuf()));
# 683 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto int_type __c = ((__sb->sgetc()));
# 692 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto bool __large_ignore = false;
# 693 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while (true)
# 694 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 695 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while ((this->_M_gcount < __n) && (!(_Traits::eq_int_type(__c, __eof))))
# 697 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 698 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++(this->_M_gcount);
# 699 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__sb->snextc());
# 700 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 701 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if ((__n == numeric_limits< int> ::max()) && (!(_Traits::eq_int_type(__c, __eof))))
# 703 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 704 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = numeric_limits< int> ::min();
# 705 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__large_ignore = true;
# 706 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
} else {
# 708 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
break; }
# 709 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 711 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__large_ignore) {
# 712 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = numeric_limits< int> ::max(); }
# 714 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 715 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); }
# 716 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 717 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 718 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 719 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 720 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 721 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 722 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 723 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 725 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 728 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::ignore(streamsize __n, int_type __delim)
# 729 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 730 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 731 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 732 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb && (__n > 0))
# 733 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 734 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 735 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 736 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 737 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 738 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((this->rdbuf()));
# 739 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto int_type __c = ((__sb->sgetc()));
# 742 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto bool __large_ignore = false;
# 743 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while (true)
# 744 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 745 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while (((this->_M_gcount < __n) && (!(_Traits::eq_int_type(__c, __eof)))) && (!(_Traits::eq_int_type(__c, __delim))))
# 748 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 749 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++(this->_M_gcount);
# 750 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__sb->snextc());
# 751 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 752 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (((__n == numeric_limits< int> ::max()) && (!(_Traits::eq_int_type(__c, __eof)))) && (!(_Traits::eq_int_type(__c, __delim))))
# 755 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 756 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = numeric_limits< int> ::min();
# 757 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__large_ignore = true;
# 758 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
} else {
# 760 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
break; }
# 761 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 763 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__large_ignore) {
# 764 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = numeric_limits< int> ::max(); }
# 766 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 767 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); } else {
# 768 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __delim))
# 769 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 770 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (this->_M_gcount < numeric_limits< int> ::max()) {
# 771 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++(this->_M_gcount); }
# 772 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__sb->sbumpc());
# 773 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
} }
# 774 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 775 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 776 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 777 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 778 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 779 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 780 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 781 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 783 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type
# 786 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::peek()
# 787 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 788 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto int_type __c = (_Traits::eof());
# 789 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 790 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 791 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 792 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 793 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 794 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 795 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 796 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (((this->rdbuf()))->sgetc());
# 797 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, _Traits::eof())) {
# 798 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); }
# 799 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 800 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 801 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 802 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 803 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 804 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 805 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return __c;
# 806 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 808 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 811 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::read(char_type *__s, streamsize __n)
# 812 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 813 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 814 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 815 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 816 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 817 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 818 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 819 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 820 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (((this->rdbuf()))->sgetn(__s, __n));
# 821 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (this->_M_gcount != __n) {
# 822 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= (_S_eofbit | _S_failbit)); }
# 823 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 824 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 825 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 826 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 827 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 828 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 829 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 830 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 832 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> streamsize
# 835 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::readsome(char_type *__s, streamsize __n)
# 836 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 837 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 838 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 839 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 840 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 841 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 842 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 843 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 845 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const streamsize __num = ((((this->rdbuf()))->in_avail()));
# 846 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__num > 0) {
# 847 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (((this->rdbuf()))->sgetn(__s, std::min(__num, __n))); } else {
# 848 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__num == (-1)) {
# 849 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); } }
# 850 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 851 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 852 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 853 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 854 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 855 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 856 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return this->_M_gcount;
# 857 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 859 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 862 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::putback(char_type __c)
# 863 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 866 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 867 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 868 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 869 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 870 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 871 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 872 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 873 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 874 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((this->rdbuf()));
# 875 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if ((!__sb) || (_Traits::eq_int_type((__sb->sputbackc(__c)), __eof))) {
# 877 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_badbit); }
# 878 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 879 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 880 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 881 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 882 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 883 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 884 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 885 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 887 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 890 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::unget()
# 891 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 894 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->_M_gcount) = (0);
# 895 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 896 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 897 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 898 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 899 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 900 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 901 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 902 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((this->rdbuf()));
# 903 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if ((!__sb) || (_Traits::eq_int_type((__sb->sungetc()), __eof))) {
# 905 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_badbit); }
# 906 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 907 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 908 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 909 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 910 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 911 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 912 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 913 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 915 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> int
# 918 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::sync()
# 919 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 922 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto int __ret = (-1);
# 923 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto sentry __cerb(*this, true);
# 924 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 925 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 926 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 927 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 928 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 929 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((this->rdbuf()));
# 930 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__sb)
# 931 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 932 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if ((__sb->pubsync()) == (-1)) {
# 933 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_badbit); } else {
# 935 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__ret = 0; }
# 936 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 937 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 938 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 939 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 940 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 941 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 942 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 943 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return __ret;
# 944 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 946 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::pos_type
# 949 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::tellg()
# 950 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 953 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto pos_type __ret = ((pos_type)(-1));
# 954 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 955 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 956 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!((this->fail()))) {
# 957 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__ret = (((this->rdbuf()))->pubseekoff(0, ios_base::cur, ios_base::in)); }
# 958 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 959 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 960 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 961 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return __ret;
# 962 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 964 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 967 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::seekg(pos_type __pos)
# 968 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 971 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 972 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 973 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 974 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!((this->fail())))
# 975 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 977 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const pos_type __p = ((((this->rdbuf()))->pubseekpos(__pos, ios_base::in)));
# 981 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__p == ((pos_type)(((off_type)(-1))))) {
# 982 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 983 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 984 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 985 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 986 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 987 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 988 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 989 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 990 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 992 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 995 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
basic_istream< _CharT, _Traits> ::seekg(off_type __off, ios_base::seekdir __dir)
# 996 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 999 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 1000 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 1001 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1002 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!((this->fail())))
# 1003 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1005 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const pos_type __p = ((((this->rdbuf()))->pubseekoff(__off, __dir, ios_base::in)));
# 1009 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__p == ((pos_type)(((off_type)(-1))))) {
# 1010 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 1011 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1012 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1013 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 1014 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (this->_M_setstate(ios_base::badbit)); }
# 1015 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 1016 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(this->setstate(__err)); }
# 1017 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return *this;
# 1018 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1021 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> basic_istream< _CharT, _Traits> &
# 1023 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
operator>>(basic_istream< _CharT, _Traits> &__in, _CharT &__c)
# 1024 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1025 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef basic_istream< _CharT, _Traits> __istream_type;
# 1026 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type;
# 1028 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false);
# 1029 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 1030 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1031 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 1032 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 1033 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1034 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __int_type __cb = ((((__in.rdbuf()))->sbumpc()));
# 1035 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(_Traits::eq_int_type(__cb, _Traits::eof()))) {
# 1036 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = _Traits::to_char_type(__cb); } else {
# 1038 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= (_S_eofbit | _S_failbit)); }
# 1039 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1040 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 1041 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (__in._M_setstate(ios_base::badbit)); }
# 1042 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 1043 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in.setstate(__err)); }
# 1044 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1045 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return __in;
# 1046 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1048 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> basic_istream< _CharT, _Traits> &
# 1050 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
operator>>(basic_istream< _CharT, _Traits> &__in, _CharT *__s)
# 1051 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1052 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef basic_istream< _CharT, _Traits> __istream_type;
# 1053 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::__streambuf_type __streambuf_type;
# 1054 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename _Traits::int_type int_type;
# 1055 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef _CharT char_type;
# 1056 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef ctype< _CharT> __ctype_type;
# 1058 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto streamsize __extracted = (0);
# 1059 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 1060 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false);
# 1061 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 1062 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1063 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 1064 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1066 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto streamsize __num = ((__in.width()));
# 1067 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__num <= 0) {
# 1068 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__num = numeric_limits< int> ::max(); }
# 1070 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __ctype_type &__ct = (use_facet< ctype< _CharT> > ((__in.getloc())));
# 1072 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const int_type __eof = (_Traits::eof());
# 1073 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((__in.rdbuf()));
# 1074 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto int_type __c = ((__sb->sgetc()));
# 1076 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while (((__extracted < __num - 1) && (!(_Traits::eq_int_type(__c, __eof)))) && (!((__ct.is(ctype_base::space, _Traits::to_char_type(__c))))))
# 1080 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1081 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(*(__s++)) = _Traits::to_char_type(__c);
# 1082 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++__extracted;
# 1083 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__sb->snextc());
# 1084 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1085 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 1086 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); }
# 1090 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(*__s) = char_type();
# 1091 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in.width(0));
# 1092 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1093 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 1094 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ (__in._M_setstate(ios_base::badbit)); }
# 1095 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1096 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!(__extracted)) {
# 1097 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 1098 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 1099 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in.setstate(__err)); }
# 1100 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return __in;
# 1101 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1104 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits> basic_istream< _CharT, _Traits> &
# 1106 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
ws(basic_istream< _CharT, _Traits> &__in)
# 1107 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1108 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef basic_istream< _CharT, _Traits> __istream_type;
# 1109 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::__streambuf_type __streambuf_type;
# 1110 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type;
# 1111 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type;
# 1113 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __ctype_type &__ct = (use_facet< typename basic_istream< _CharT, _Traits> ::__ctype_type> ((__in.getloc())));
# 1114 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __int_type __eof = (_Traits::eof());
# 1115 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((__in.rdbuf()));
# 1116 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __int_type __c = ((__sb->sgetc()));
# 1118 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while ((!(_Traits::eq_int_type(__c, __eof))) && ((__ct.is(ctype_base::space, _Traits::to_char_type(__c))))) {
# 1120 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__sb->snextc()); }
# 1122 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 1123 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in.setstate(ios_base::eofbit)); }
# 1124 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return __in;
# 1125 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1128 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits> &
# 1130 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
operator>>(basic_istream< _CharT, _Traits> &__in, basic_string< _CharT, _Traits, _Alloc> &
# 1131 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__str)
# 1132 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1133 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef basic_istream< _CharT, _Traits> __istream_type;
# 1134 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type;
# 1135 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::__streambuf_type __streambuf_type;
# 1136 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type;
# 1137 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef basic_string< _CharT, _Traits, _Alloc> __string_type;
# 1138 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type;
# 1140 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __size_type __extracted = 0;
# 1141 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 1142 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false);
# 1143 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 1144 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1145 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 1146 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1148 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__str.erase());
# 1149 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto _CharT __buf[128];
# 1150 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __size_type __len = 0;
# 1151 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const streamsize __w = ((__in.width()));
# 1152 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __size_type __n = ((__w > 0) ? (static_cast< __size_type>(__w)) : ((__str.max_size())));
# 1154 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __ctype_type &__ct = (use_facet< typename basic_istream< _CharT, _Traits> ::__ctype_type> ((__in.getloc())));
# 1155 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __int_type __eof = (_Traits::eof());
# 1156 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((__in.rdbuf()));
# 1157 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __int_type __c = ((__sb->sgetc()));
# 1159 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while (((__extracted < __n) && (!(_Traits::eq_int_type(__c, __eof)))) && (!((__ct.is(ctype_base::space, _Traits::to_char_type(__c))))))
# 1162 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1163 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__len == sizeof(__buf) / sizeof(_CharT))
# 1164 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1165 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__str.append(__buf, sizeof(__buf) / sizeof(_CharT)));
# 1166 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__len = 0;
# 1167 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1168 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__buf[__len++]) = _Traits::to_char_type(__c);
# 1169 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++__extracted;
# 1170 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__sb->snextc());
# 1171 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1172 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__str.append(__buf, __len));
# 1174 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 1175 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); }
# 1176 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in.width(0));
# 1177 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1178 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 1179 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1183 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in._M_setstate(ios_base::badbit));
# 1184 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1185 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1187 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!__extracted) {
# 1188 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 1189 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 1190 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in.setstate(__err)); }
# 1191 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return __in;
# 1192 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1194 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits> &
# 1196 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
getline(basic_istream< _CharT, _Traits> &__in, basic_string< _CharT, _Traits, _Alloc> &
# 1197 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__str, _CharT __delim)
# 1198 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1199 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef basic_istream< _CharT, _Traits> __istream_type;
# 1200 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type;
# 1201 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::__streambuf_type __streambuf_type;
# 1202 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type;
# 1203 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef basic_string< _CharT, _Traits, _Alloc> __string_type;
# 1204 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type;
# 1206 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __size_type __extracted = 0;
# 1207 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __size_type __n = ((__str.max_size()));
# 1208 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto ios_base::iostate __err = ((ios_base::iostate)ios_base::goodbit);
# 1209 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true);
# 1210 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__cerb)
# 1211 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1212 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
try
# 1213 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1214 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__str.erase());
# 1215 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __int_type __idelim = (_Traits::to_int_type(__delim));
# 1216 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto const __int_type __eof = (_Traits::eof());
# 1217 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __streambuf_type *__sb = ((__in.rdbuf()));
# 1218 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
auto __int_type __c = ((__sb->sgetc()));
# 1220 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
while (((__extracted < __n) && (!(_Traits::eq_int_type(__c, __eof)))) && (!(_Traits::eq_int_type(__c, __idelim))))
# 1223 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1224 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__str += _Traits::to_char_type(__c);
# 1225 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++__extracted;
# 1226 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__c = (__sb->snextc());
# 1227 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1229 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __eof)) {
# 1230 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_eofbit); } else {
# 1231 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (_Traits::eq_int_type(__c, __idelim))
# 1232 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1233 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
++__extracted;
# 1234 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__sb->sbumpc());
# 1235 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
} else {
# 1237 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); } }
# 1238 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1239 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
catch (...)
# 1240 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{
# 1244 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in._M_setstate(ios_base::badbit));
# 1245 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1246 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1247 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (!__extracted) {
# 1248 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__err |= _S_failbit); }
# 1249 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
if (__err) {
# 1250 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
(__in.setstate(__err)); }
# 1251 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
return __in;
# 1252 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 1254 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
template<class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits> &
# 1256 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
getline(basic_istream< _CharT, _Traits> &__in, basic_string< _CharT, _Traits, _Alloc> &
# 1257 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
__str)
# 1258 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
{ return getline(__in, __str, (__in.widen('\n'))); }
# 1264 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template class basic_istream< char, char_traits< char> > ;
# 1265 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &ws(basic_istream< char, char_traits< char> > &);
# 1266 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char &);
# 1267 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char *);
# 1268 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, unsigned char &);
# 1269 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, signed char &);
# 1270 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, unsigned char *);
# 1271 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, signed char *);
# 1273 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template class basic_iostream< char, char_traits< char> > ;
# 1276 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template class basic_istream< wchar_t, char_traits< wchar_t> > ;
# 1277 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &ws(basic_istream< wchar_t, char_traits< wchar_t> > &);
# 1278 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, wchar_t &);
# 1279 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, wchar_t *);
# 1281 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
extern template class basic_iostream< wchar_t, char_traits< wchar_t> > ;
# 1284 "/usr/include/c++/4.0.0/bits/istream.tcc" 3
}
# 47 "/usr/include/c++/4.0.0/iostream" 3
namespace std {
# 62 "/usr/include/c++/4.0.0/iostream" 3
extern istream cin;
# 63 "/usr/include/c++/4.0.0/iostream" 3
extern ostream cout;
# 64 "/usr/include/c++/4.0.0/iostream" 3
extern ostream cerr;
# 65 "/usr/include/c++/4.0.0/iostream" 3
extern ostream clog;
# 68 "/usr/include/c++/4.0.0/iostream" 3
extern wistream wcin;
# 69 "/usr/include/c++/4.0.0/iostream" 3
extern wostream wcout;
# 70 "/usr/include/c++/4.0.0/iostream" 3
extern wostream wcerr;
# 71 "/usr/include/c++/4.0.0/iostream" 3
extern wostream wclog;
# 76 "/usr/include/c++/4.0.0/iostream" 3
static ios_base::Init __ioinit;
# 77 "/usr/include/c++/4.0.0/iostream" 3
}
# 7 "cuda_code.cu"
struct params {
# 8 "cuda_code.cu"
float *input;
# 9 "cuda_code.cu"
float *output;
# 10 "cuda_code.cu"
int n;
# 11 "cuda_code.cu"
};

# 1 "/tmp/tmpxft_00009006_00000000-1_cuda_code.cudafe1.stub.h" 1

extern "C" {


extern void __device_stub___globfunc__Z9flip_main6params(struct params);


}
# 14 "cuda_code.cu" 2
# 24 "cuda_code.cu"
void invert_image(float *img, int width, int height) {
# 25 "cuda_code.cu"
auto cudaError_t cudaStat;
# 26 "cuda_code.cu"
auto float *out = (0);
# 27 "cuda_code.cu"
auto float *in = (0);
# 28 "cuda_code.cu"
auto params funcParams;
# 29 "cuda_code.cu"
auto int N = (width * height);
# 31 "cuda_code.cu"
(cout << ("Allocating GPU Memory.\n"));
# 32 "cuda_code.cu"
cudaStat = cudaMalloc((void **)(&in), N * sizeof(in[0]));
# 33 "cuda_code.cu"
cudaStat = cudaMalloc((void **)(&out), N * sizeof(out[0]));
# 35 "cuda_code.cu"
(cout << ("Copying data.\n"));
# 36 "cuda_code.cu"
cudaStat = cudaMemcpy(in, img, N * sizeof(img[0]), cudaMemcpyHostToDevice);
# 38 "cuda_code.cu"
(funcParams.output) = out;
# 39 "cuda_code.cu"
(funcParams.input) = in;
# 40 "cuda_code.cu"
(funcParams.n) = N;
# 42 "cuda_code.cu"
(cout << ("Running kernel.\n"));
# 43 "cuda_code.cu"
cudaConfigureCall(1, 128) ? ((void)0) : __device_stub___globfunc__Z9flip_main6params(funcParams);
# 45 "cuda_code.cu"
(cout << ("Copying result.\n"));
# 46 "cuda_code.cu"
cudaStat = cudaMemcpy(img, out, N * sizeof(out[0]), cudaMemcpyDeviceToHost);
# 47 "cuda_code.cu"
}

# 1 "/tmp/tmpxft_00009006_00000000-1_cuda_code.cudafe1.stub.c" 1

extern "C" {

# 1 "/tmp/tmpxft_00009006_00000000-3_cuda_code.fatbin.c" 1
# 1 "/usr/local/cuda/bin/../include/__cudaFatFormat.h" 1
# 83 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
extern "C" {
# 97 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* gpuProfileName;
    char* cubin;
} __cudaFatCubinEntry;
# 113 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* gpuProfileName;
    char* ptx;
} __cudaFatPtxEntry;
# 125 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* gpuProfileName;
    char* debug;
} __cudaFatDebugEntry;


typedef enum {
      __cudaFatDontSearchFlag = (1 << 0),
      __cudaFatDontCacheFlag = (1 << 1),
      __cudaFatSassDebugFlag = (1 << 2)
} __cudaFatCudaBinaryFlag;
# 146 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    unsigned long magic;
    unsigned long version;
    unsigned long gpuInfoVersion;
    char* key;
    char* ident;
    char* usageMode;
    __cudaFatPtxEntry *ptx;
    __cudaFatCubinEntry *cubin;
    __cudaFatDebugEntry *debug;
    void* debugInfo;
    unsigned int flags;
} __cudaFatCudaBinary;
# 190 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
void fatGetCubinForGpu( __cudaFatCudaBinary *binary, char* gpuName, char* *cubin, char* *dbgInfoFile );







void fatFreeCubin( char* cubin, char* dbgInfoFile );


}
# 2 "/tmp/tmpxft_00009006_00000000-3_cuda_code.fatbin.c" 2




extern "C" {


static const unsigned char __deviceText[] = {
0x61,0x72,0x63,0x68,0x69,0x74,0x65,0x63,0x74,0x75,0x72,0x65,0x20,0x7b,0x73,0x6d,
0x5f,0x31,0x30,0x7d,0x0a,0x61,0x62,0x69,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,
0x7b,0x30,0x7d,0x0a,0x6d,0x6f,0x64,0x6e,0x61,0x6d,0x65,0x20,0x7b,0x63,0x75,0x62,
0x69,0x6e,0x7d,0x0a,0x63,0x6f,0x64,0x65,0x20,0x20,0x7b,0x0a,0x09,0x6e,0x61,0x6d,
0x65,0x20,0x3d,0x20,0x5f,0x5f,0x67,0x6c,0x6f,0x62,0x66,0x75,0x6e,0x63,0x5f,0x5f,
0x5a,0x39,0x66,0x6c,0x69,0x70,0x5f,0x6d,0x61,0x69,0x6e,0x36,0x70,0x61,0x72,0x61,
0x6d,0x73,0x0a,0x09,0x6c,0x6d,0x65,0x6d,0x20,0x3d,0x20,0x30,0x0a,0x09,0x73,0x6d,
0x65,0x6d,0x20,0x3d,0x20,0x32,0x38,0x0a,0x09,0x72,0x65,0x67,0x20,0x3d,0x20,0x34,
0x0a,0x09,0x62,0x61,0x72,0x20,0x3d,0x20,0x30,0x0a,0x09,0x62,0x69,0x6e,0x63,0x6f,
0x64,0x65,0x20,0x20,0x7b,0x0a,0x09,0x09,0x30,0x78,0x61,0x30,0x30,0x30,0x30,0x30,
0x30,0x31,0x20,0x30,0x78,0x30,0x34,0x30,0x30,0x30,0x37,0x38,0x30,0x20,0x30,0x78,
0x33,0x30,0x30,0x30,0x63,0x64,0x66,0x64,0x20,0x30,0x78,0x36,0x63,0x32,0x30,0x63,
0x37,0x63,0x38,0x20,0x0a,0x09,0x09,0x30,0x78,0x33,0x30,0x30,0x30,0x30,0x30,0x30,
0x33,0x20,0x30,0x78,0x30,0x30,0x30,0x30,0x30,0x32,0x38,0x30,0x20,0x30,0x78,0x33,
0x30,0x30,0x32,0x30,0x30,0x30,0x35,0x20,0x30,0x78,0x63,0x34,0x31,0x30,0x30,0x37,
0x38,0x30,0x20,0x0a,0x09,0x09,0x30,0x78,0x33,0x30,0x30,0x32,0x63,0x63,0x30,0x64,
0x20,0x30,0x78,0x63,0x34,0x33,0x30,0x30,0x37,0x38,0x30,0x20,0x30,0x78,0x32,0x31,
0x30,0x31,0x65,0x38,0x30,0x30,0x20,0x30,0x78,0x32,0x31,0x30,0x31,0x65,0x61,0x30,
0x38,0x20,0x0a,0x09,0x09,0x30,0x78,0x32,0x30,0x30,0x30,0x63,0x38,0x30,0x35,0x20,
0x30,0x78,0x30,0x34,0x32,0x30,0x63,0x37,0x38,0x30,0x20,0x30,0x78,0x64,0x30,0x30,
0x65,0x30,0x30,0x30,0x64,0x20,0x30,0x78,0x38,0x30,0x63,0x30,0x30,0x37,0x38,0x30,
0x20,0x0a,0x09,0x09,0x30,0x78,0x62,0x30,0x30,0x30,0x38,0x36,0x30,0x64,0x20,0x30,
0x78,0x30,0x33,0x66,0x38,0x30,0x30,0x30,0x33,0x20,0x30,0x78,0x32,0x30,0x30,0x30,
0x38,0x30,0x30,0x31,0x20,0x30,0x78,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x33,0x20,
0x0a,0x09,0x09,0x30,0x78,0x64,0x30,0x30,0x65,0x30,0x34,0x30,0x64,0x20,0x30,0x78,
0x61,0x30,0x63,0x30,0x30,0x37,0x38,0x30,0x20,0x30,0x78,0x33,0x30,0x30,0x31,0x30,
0x31,0x66,0x64,0x20,0x30,0x78,0x36,0x63,0x30,0x30,0x34,0x37,0x63,0x38,0x20,0x0a,
0x09,0x09,0x30,0x78,0x32,0x30,0x30,0x30,0x38,0x34,0x30,0x39,0x20,0x30,0x78,0x30,
0x30,0x30,0x30,0x30,0x30,0x32,0x33,0x20,0x30,0x78,0x31,0x30,0x30,0x30,0x37,0x30,
0x30,0x33,0x20,0x30,0x78,0x30,0x30,0x30,0x30,0x30,0x32,0x38,0x30,0x20,0x0a,0x09,
0x09,0x30,0x78,0x66,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x20,0x30,0x78,0x65,0x30,
0x30,0x30,0x30,0x30,0x30,0x31,0x20,0x0a,0x09,0x7d,0x0a,0x7d,0x0a,0x00
};


}


static __cudaFatPtxEntry __ptxEntries [] = {{0,0}};
static __cudaFatCubinEntry __cubinEntries[] = {{(char*)"sm_10",(char*)__deviceText},{0,0}};
static __cudaFatDebugEntry __debugEntries[] = {{0,0}};

static __cudaFatCudaBinary __fatDeviceText __attribute__ ((section ("__NV_CUDA,__fatbin")))= {0x1ee55a01,0x00000002,0x8ecc680c,(char*)"d8edf76c4b4c4b55",(char*)"cuda_code.cu",(char*)" ",__ptxEntries,__cubinEntries,__debugEntries,0,0};
# 5 "/tmp/tmpxft_00009006_00000000-1_cuda_code.cudafe1.stub.c" 2
# 1 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 1
# 74 "/usr/local/cuda/bin/../include/crt/host_runtime.h"
# 1 "/usr/local/cuda/bin/../include/host_defines.h" 1
# 75 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2
# 96 "/usr/local/cuda/bin/../include/crt/host_runtime.h"
extern "C" {


extern void** __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __cudaRegisterVar(
        void **fatCubinHandle,
        char *hostVar,
        char *deviceAddress,
  const char *deviceName,
        int ext,
        int size,
        int constant,
        int global
);

extern void __cudaRegisterTexture(
        void **fatCubinHandle,
  const struct textureReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int norm,
        int ext
);

extern void __cudaRegisterShared(
  void **fatCubinHandle,
  void **devicePtr
);

extern void __cudaRegisterSharedVar(
  void **fatCubinHandle,
  void **devicePtr,
  size_t size,
  size_t alignment,
  int storage
);

extern void __cudaRegisterFunction(
        void **fatCubinHandle,
  const char *hostFun,
        char *deviceFun,
  const char *deviceName,
        int thread_limit,
        uint3 *tid,
        uint3 *bid,
        dim3 *bDim,
        dim3 *gDim,
        int *wSize
);


}


static void **__cudaFatCubinHandle;

static void __cudaUnregisterBinaryUtil(void)
{
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}



__attribute__((__destructor__)) static void __cudaUnregisterBinary(void)
{
  __cudaUnregisterBinaryUtil();
}
# 225 "/usr/local/cuda/bin/../include/crt/host_runtime.h"
# 1 "/usr/local/cuda/bin/../include/common_functions.h" 1
# 68 "/usr/local/cuda/bin/../include/common_functions.h"
# 1 "/usr/local/cuda/bin/../include/crt/func_macro.h" 1 3
# 69 "/usr/local/cuda/bin/../include/common_functions.h" 2

static clock_t __cuda_clock(void)
{
  return clock();
}

static void *__cuda_memset(void *s, int c, size_t n)
{
  return memset(s, c, n);
}

static void *__cuda_memcpy(void *d, const void *s, size_t n)
{
  return memcpy(d, s, n);
}
# 93 "/usr/local/cuda/bin/../include/common_functions.h"
# 1 "/usr/local/cuda/bin/../include/math_functions.h" 1 3
# 827 "/usr/local/cuda/bin/../include/math_functions.h" 3
extern int __cuda_error_not_implememted(void);
# 883 "/usr/local/cuda/bin/../include/math_functions.h" 3
static int __cuda_abs(int a)
{
  return abs(a);
}

static float __cuda_fabsf(float a)
{
  return fabsf(a);
}

static long long int __cuda_llabs(long long int a)
{

  return ::llabs(a);



}

static float __cuda_exp2f(float a)
{
  return exp2f(a);
}

# 1 "/usr/local/cuda/bin/../include/device_functions.h" 1 3
# 347 "/usr/local/cuda/bin/../include/device_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/math_constants.h" 1 3
# 348 "/usr/local/cuda/bin/../include/device_functions.h" 2 3



static int __cuda___isnan(double a);
static int __cuda___isnanf(float a);
static int __double2int_rz(double);
static unsigned int __double2uint_rz(double);
static long long int __double2ll_rz(double);
static unsigned long long int __double2ull_rz(double);
# 370 "/usr/local/cuda/bin/../include/device_functions.h" 3
static int __mulhi(int a, int b)
{
  long long int c = (long long int)a * (long long int)b;

  return (int)(c >> 32);
}

static unsigned int __umulhi(unsigned int a, unsigned int b)
{
  unsigned long long int c = (unsigned long long int)a * (unsigned long long int)b;

  return (unsigned int)(c >> 32);
}

static unsigned long long int __umul64hi(unsigned long long int a, unsigned long long int b)
{
  unsigned int a_lo = (unsigned int)a;
  unsigned long long int a_hi = a >> 32;
  unsigned int b_lo = (unsigned int)b;
  unsigned long long int b_hi = b >> 32;
  unsigned long long int m1 = a_lo * b_hi;
  unsigned long long int m2 = a_hi * b_lo;
  unsigned int carry;

  carry = (0ULL + __umulhi(a_lo, b_lo) + (unsigned int)m1 + (unsigned int)m2) >> 32;

  return a_hi * b_hi + (m1 >> 32) + (m2 >> 32) + carry;
}

static long long int __mul64hi(long long int a, long long int b)
{
  long long int res;
  res = __umul64hi(a, b);
  if (a < 0LL) res = res - b;
  if (b < 0LL) res = res - a;
  return res;
}

static float __saturatef(float a)
{
  return a >= 1.0f ? 1.0f : a <= 0.0f ? 0.0f : a;
}

static unsigned int __sad(int a, int b, unsigned int c)
{
  long long int diff = (long long int)a - (long long int)b;

  return (unsigned int)(__cuda_llabs(diff) + (long long int)c);
}

static unsigned int __usad(unsigned int a, unsigned int b, unsigned int c)
{
  long long int diff = (long long int)a - (long long int)b;

  return (unsigned int)(__cuda_llabs(diff) + (long long int)c);
}

static int __mul24(int a, int b)
{

  a &= 0xffffff;
  a = (a & 0x800000) != 0 ? a | ~0xffffff : a;
  b &= 0xffffff;
  b = (b & 0x800000) != 0 ? b | ~0xffffff : b;


  return a * b;
}

static unsigned int __umul24(unsigned int a, unsigned int b)
{

  a &= 0xffffff;
  b &= 0xffffff;


  return a * b;
}

static float __int_as_float(int a)
{
  volatile union {int a; float b;} u;

  u.a = a;

  return u.b;
}

static int __float_as_int(float a)
{
  volatile union {float a; int b;} u;

  u.a = a;

  return u.b;
}

static long long int __internal_float2ll_kernel(float a, long long int max, long long int min, long long int nan, enum cudaRoundMode rndMode)
{
  unsigned long long int res, t = 0ULL;
  int shift;
  unsigned int ia;

  if (sizeof(a) == sizeof(double) && __cuda___isnan((double)a)) return nan; if (sizeof(a) == sizeof(float) && __cuda___isnanf((float)a)) return nan; if (a >= max) return max; if (a <= min) return min;
  ia = __float_as_int(a);
  shift = 189 - ((ia >> 23) & 0xff);
  res = (unsigned long long int)(((ia << 8) | 0x80000000) >> 1) << 32;
  if (shift >= 64) {
    t = res;
    res = 0;
  } else if (shift) {
    t = res << (64 - shift);
    res = res >> shift;
  }
  if (rndMode == cudaRoundNearest && (long long int)t < 0LL) {
    res += t == 0x8000000000000000ULL ? res & 1ULL : 1ULL;
  }
  else if (rndMode == cudaRoundMinInf && t != 0ULL && ia > 0x80000000) {
    res++;
  }
  else if (rndMode == cudaRoundPosInf && t != 0ULL && (int)ia > 0) {
    res++;
  }
  if ((int)ia < 0) res = (unsigned long long int)-(long long int)res;
  return (long long int)res;
}

static int __internal_float2int(float a, enum cudaRoundMode rndMode)
{
  return (int)__internal_float2ll_kernel(a, 2147483647LL, -2147483648LL, 0LL, rndMode);
}

static int __float2int_rz(float a)
{



  return __internal_float2int(a, cudaRoundZero);

}

static int __float2int_ru(float a)
{
  return __internal_float2int(a, cudaRoundPosInf);
}

static int __float2int_rd(float a)
{
  return __internal_float2int(a, cudaRoundMinInf);
}

static int __float2int_rn(float a)
{
  return __internal_float2int(a, cudaRoundNearest);
}

static long long int __internal_float2ll(float a, enum cudaRoundMode rndMode)
{
  return __internal_float2ll_kernel(a, 9223372036854775807LL, -9223372036854775807LL -1LL, -9223372036854775807LL -1LL, rndMode);
}

static long long int __float2ll_rz(float a)
{



  return __internal_float2ll(a, cudaRoundZero);

}

static long long int __float2ll_ru(float a)
{
  return __internal_float2ll(a, cudaRoundPosInf);
}

static long long int __float2ll_rd(float a)
{
  return __internal_float2ll(a, cudaRoundMinInf);
}

static long long int __float2ll_rn(float a)
{
  return __internal_float2ll(a, cudaRoundNearest);
}

static unsigned long long int __internal_float2ull_kernel(float a, unsigned long long int max, unsigned long long int nan, enum cudaRoundMode rndMode)
{
  unsigned long long int res, t = 0ULL;
  int shift;
  unsigned int ia;

  if (sizeof(a) == sizeof(double) && __cuda___isnan((double)a)) return nan; if (sizeof(a) == sizeof(float) && __cuda___isnanf((float)a)) return nan; if (a >= max) return max; if (a <= 0LL) return 0LL;
  ia = __float_as_int(a);
  shift = 190 - ((ia >> 23) & 0xff);
  res = (unsigned long long int)((ia << 8) | 0x80000000) << 32;
  if (shift >= 64) {
    t = res >> (int)(shift > 64);
    res = 0;
  } else if (shift) {
    t = res << (64 - shift);
    res = res >> shift;
  }
  if (rndMode == cudaRoundNearest && (long long int)t < 0LL) {
    res += t == 0x8000000000000000ULL ? res & 1ULL : 1ULL;
  }
  else if (rndMode == cudaRoundPosInf && t != 0ULL) {
    res++;
  }
  return res;
}

static unsigned int __internal_float2uint(float a, enum cudaRoundMode rndMode)
{
  return (unsigned int)__internal_float2ull_kernel(a, 4294967295U, 0U, rndMode);
}

static unsigned int __float2uint_rz(float a)
{



  return __internal_float2uint(a, cudaRoundZero);

}

static unsigned int __float2uint_ru(float a)
{
  return __internal_float2uint(a, cudaRoundPosInf);
}

static unsigned int __float2uint_rd(float a)
{
  return __internal_float2uint(a, cudaRoundMinInf);
}

static unsigned int __float2uint_rn(float a)
{
  return __internal_float2uint(a, cudaRoundNearest);
}

static unsigned long long int __internal_float2ull(float a, enum cudaRoundMode rndMode)
{
  return __internal_float2ull_kernel(a, 18446744073709551615ULL, 9223372036854775808ULL, rndMode);
}

static unsigned long long int __float2ull_rz(float a)
{



  return __internal_float2ull(a, cudaRoundZero);

}

static unsigned long long int __float2ull_ru(float a)
{
  return __internal_float2ull(a, cudaRoundPosInf);
}

static unsigned long long int __float2ull_rd(float a)
{
  return __internal_float2ull(a, cudaRoundMinInf);
}

static unsigned long long int __float2ull_rn(float a)
{
  return __internal_float2ull(a, cudaRoundNearest);
}

static int __internal_normalize64(unsigned long long int *a)
{
  int lz = 0;

  if ((*a & 0xffffffff00000000ULL) == 0ULL) {
    *a <<= 32;
    lz += 32;
  }
  if ((*a & 0xffff000000000000ULL) == 0ULL) {
    *a <<= 16;
    lz += 16;
  }
  if ((*a & 0xff00000000000000ULL) == 0ULL) {
    *a <<= 8;
    lz += 8;
  }
  if ((*a & 0xf000000000000000ULL) == 0ULL) {
    *a <<= 4;
    lz += 4;
  }
  if ((*a & 0xC000000000000000ULL) == 0ULL) {
    *a <<= 2;
    lz += 2;
  }
  if ((*a & 0x8000000000000000ULL) == 0ULL) {
    *a <<= 1;
    lz += 1;
  }
  return lz;
}

static int __internal_normalize(unsigned int *a)
{
  unsigned long long int t = (unsigned long long int)*a;
  int lz = __internal_normalize64(&t);

  *a = (unsigned int)(t >> 32);

  return lz - 32;
}

static float __internal_int2float_kernel(int a, enum cudaRoundMode rndMode)
{
  volatile union {
    float f;
    unsigned int i;
  } res;
  int shift;
  unsigned int t;
  res.i = a;
  if (a == 0) return res.f;
  if (a < 0) res.i = (unsigned int)-a;
  shift = __internal_normalize((unsigned int*)&res.i);
  t = res.i << 24;
  res.i = (res.i >> 8);
  res.i += (127 + 30 - shift) << 23;
  if (a < 0) res.i |= 0x80000000;
  if ((rndMode == cudaRoundNearest) && (t >= 0x80000000)) {
    res.i += (t == 0x80000000) ? (res.i & 1) : (t >> 31);
  }
  else if ((rndMode == cudaRoundMinInf) && t && (a < 0)) {
    res.i++;
  }
  else if ((rndMode == cudaRoundPosInf) && t && (a > 0)) {
    res.i++;
  }
  return res.f;
}

static float __int2float_rz(int a)
{
  return __internal_int2float_kernel(a, cudaRoundZero);
}

static float __int2float_ru(int a)
{
  return __internal_int2float_kernel(a, cudaRoundPosInf);
}

static float __int2float_rd(int a)
{
  return __internal_int2float_kernel(a, cudaRoundMinInf);
}

static float __int2float_rn(int a)
{



  return __internal_int2float_kernel(a, cudaRoundNearest);

}

static float __internal_uint2float_kernel(unsigned int a, enum cudaRoundMode rndMode)
{
  volatile union {
    float f;
    unsigned int i;
  } res;
  int shift;
  unsigned int t;
  res.i = a;
  if (a == 0) return res.f;
  shift = __internal_normalize((unsigned int*)&res.i);
  t = res.i << 24;
  res.i = (res.i >> 8);
  res.i += (127 + 30 - shift) << 23;
  if ((rndMode == cudaRoundNearest) && (t >= 0x80000000)) {
    res.i += (t == 0x80000000) ? (res.i & 1) : (t >> 31);
  }
  else if ((rndMode == cudaRoundPosInf) && t) {
    res.i++;
  }
  return res.f;
}

static float __uint2float_rz(unsigned int a)
{
  return __internal_uint2float_kernel(a, cudaRoundZero);
}

static float __uint2float_ru(unsigned int a)
{
  return __internal_uint2float_kernel(a, cudaRoundPosInf);
}

static float __uint2float_rd(unsigned int a)
{
  return __internal_uint2float_kernel(a, cudaRoundMinInf);
}

static float __uint2float_rn(unsigned int a)
{



  return __internal_uint2float_kernel(a, cudaRoundNearest);

}

static float __ll2float_rn(long long int a)
{
  return (float)a;
}

static float __ull2float_rn(unsigned long long int a)
{



  unsigned long long int temp;
  unsigned int res, t;
  int shift;
  if (a == 0ULL) return 0.0f;
  temp = a;
  shift = __internal_normalize64(&temp);
  temp = (temp >> 8) | ((temp & 0xffULL) ? 1ULL : 0ULL);
  res = (unsigned int)(temp >> 32);
  t = (unsigned int)temp;
  res += (127 + 62 - shift) << 23;
  res += t == 0x80000000 ? res & 1 : t >> 31;
  return __int_as_float(res);

}

static float __internal_fmul_kernel(float a, float b, int rndNearest)
{
  unsigned long long product;
  volatile union {
    float f;
    unsigned int i;
  } xx, yy;
  unsigned expo_x, expo_y;

  xx.f = a;
  yy.f = b;

  expo_y = 0xFF;
  expo_x = expo_y & (xx.i >> 23);
  expo_x = expo_x - 1;
  expo_y = expo_y & (yy.i >> 23);
  expo_y = expo_y - 1;

  if ((expo_x <= 0xFD) &&
      (expo_y <= 0xFD)) {
multiply:
    expo_x = expo_x + expo_y;
    expo_y = xx.i ^ yy.i;
    xx.i = xx.i & 0x00ffffff;
    yy.i = yy.i << 8;
    xx.i = xx.i | 0x00800000;
    yy.i = yy.i | 0x80000000;

    product = ((unsigned long long)xx.i) * yy.i;
    expo_x = expo_x - 127 + 2;
    expo_y = expo_y & 0x80000000;
    xx.i = (unsigned int)(product >> 32);
    yy.i = (unsigned int)(product & 0xffffffff);

    if (xx.i < 0x00800000) {
      xx.i = (xx.i << 1) | (yy.i >> 31);
      yy.i = (yy.i << 1);
      expo_x--;
    }
    if (expo_x <= 0xFD) {
      xx.i = xx.i | expo_y;
      xx.i = xx.i + (expo_x << 23);

      if (yy.i < 0x80000000) return xx.f;
      xx.i += (((yy.i == 0x80000000) ? (xx.i & 1) : (yy.i >> 31))
               && rndNearest);
      return xx.f;
    } else if ((int)expo_x >= 254) {

      xx.i = (expo_y | 0x7F800000) - (!rndNearest);
      return xx.f;
    } else {

      expo_x = ((unsigned int)-((int)expo_x));
      if (expo_x > 25) {

        xx.i = expo_y;
        return xx.f;
      } else {
        yy.i = (xx.i << (32 - expo_x)) | ((yy.i) ? 1 : 0);
        xx.i = expo_y + (xx.i >> expo_x);
        xx.i += (((yy.i == 0x80000000) ? (xx.i & 1) : (yy.i >> 31))
                 && rndNearest);
        return xx.f;
      }
    }
  } else {
    product = xx.i ^ yy.i;
    product = product & 0x80000000;
    if (!(xx.i & 0x7fffffff)) {
      if (expo_y != 254) {
        xx.i = (unsigned int)product;
        return xx.f;
      }
      expo_y = yy.i << 1;
      if (expo_y == 0xFF000000) {
        xx.i = expo_y | 0x00C00000;
      } else {
        xx.i = yy.i | 0x00400000;
      }
      return xx.f;
    }
    if (!(yy.i & 0x7fffffff)) {
      if (expo_x != 254) {
        xx.i = (unsigned int)product;
        return xx.f;
      }
      expo_x = xx.i << 1;
      if (expo_x == 0xFF000000) {
        xx.i = expo_x | 0x00C00000;
      } else {
        xx.i = xx.i | 0x00400000;
      }
      return xx.f;
    }
    if ((expo_y != 254) && (expo_x != 254)) {
      expo_y++;
      expo_x++;
      if (expo_x == 0) {
        expo_y |= xx.i & 0x80000000;




        xx.i = xx.i << 8;
        while (!(xx.i & 0x80000000)) {
          xx.i <<= 1;
          expo_x--;
        }
        xx.i = (xx.i >> 8) | (expo_y & 0x80000000);
        expo_y &= ~0x80000000;
        expo_y--;
        goto multiply;
      }
      if (expo_y == 0) {
        expo_x |= yy.i & 0x80000000;
        yy.i = yy.i << 8;
        while (!(yy.i & 0x80000000)) {
          yy.i <<= 1;
          expo_y--;
        }
        yy.i = (yy.i >> 8) | (expo_x & 0x80000000);
        expo_x &= ~0x80000000;
        expo_x--;
        goto multiply;
      }
    }
    expo_x = xx.i << 1;
    expo_y = yy.i << 1;

    if (expo_x > 0xFF000000) {

      xx.i = xx.i | 0x00400000;
      return xx.f;
    }

    if (expo_y > 0xFF000000) {

      xx.i = yy.i | 0x00400000;
      return xx.f;
    }
    xx.i = (unsigned int)product | 0x7f800000;
    return xx.f;
  }
}

static float __internal_fadd_kernel(float a, float b, int rndNearest)
{
  volatile union {
    float f;
    unsigned int i;
  } xx, yy;
  unsigned int expo_x;
  unsigned int expo_y;
  unsigned int temp;

  xx.f = a;
  yy.f = b;


  expo_y = yy.i << 1;
  if (expo_y > (xx.i << 1)) {
    expo_y = xx.i;
    xx.i = yy.i;
    yy.i = expo_y;
  }

  temp = 0xff;
  expo_x = temp & (xx.i >> 23);
  expo_x = expo_x - 1;
  expo_y = temp & (yy.i >> 23);
  expo_y = expo_y - 1;

  if ((expo_x <= 0xFD) &&
      (expo_y <= 0xFD)) {

add:
    expo_y = expo_x - expo_y;
    if (expo_y > 25) {
      expo_y = 31;
    }
    temp = xx.i ^ yy.i;
    xx.i = xx.i & ~0x7f000000;
    xx.i = xx.i | 0x00800000;
    yy.i = yy.i & ~0xff000000;
    yy.i = yy.i | 0x00800000;

    if ((int)temp < 0) {

      temp = 32 - expo_y;
      temp = (expo_y) ? (yy.i << temp) : 0;
      temp = (unsigned int)(-((int)temp));
      xx.i = xx.i - (yy.i >> expo_y) - (temp ? 1 : 0);
      if (xx.i & 0x00800000) {
        if (expo_x <= 0xFD) {
          xx.i = xx.i & ~0x00800000;
          xx.i = (xx.i + (expo_x << 23)) + 0x00800000;
          if (temp < 0x80000000) return xx.f;
          xx.i += (((temp == 0x80000000) ? (xx.i & 1) : (temp >> 31))
                   && rndNearest);
          return xx.f;
        }
      } else {
        if ((temp | (xx.i << 1)) == 0) {

          xx.i = 0;
          return xx.f;
        }

        yy.i = xx.i & 0x80000000;
        do {
          xx.i = (xx.i << 1) | (temp >> 31);
          temp <<= 1;
          expo_x--;
        } while (!(xx.i & 0x00800000));
        xx.i = xx.i | yy.i;
      }
    } else {

      temp = 32 - expo_y;
      temp = (expo_y) ? (yy.i << temp) : 0;
      xx.i = xx.i + (yy.i >> expo_y);
      if (!(xx.i & 0x01000000)) {
        if (expo_x <= 0xFD) {
          expo_y = xx.i & 1;
          xx.i = xx.i + (expo_x << 23);
          if (temp < 0x80000000) return xx.f;
          xx.i += (((temp == 0x80000000) ? expo_y : (temp >> 31))
                   && rndNearest);
          return xx.f;
        }
      } else {

        temp = (xx.i << 31) | (temp >> 1);

        xx.i = ((xx.i & 0x80000000) | (xx.i >> 1)) & ~0x40000000;
        expo_x++;
      }
    }
    if (expo_x <= 0xFD) {
      expo_y = xx.i & 1;
      xx.i += (((temp == 0x80000000) ? expo_y : (temp >> 31))
               && rndNearest);
      xx.i = xx.i + (expo_x << 23);
      return xx.f;
    }
    if ((int)expo_x >= 254) {

        xx.i = ((xx.i & 0x80000000) | 0x7f800000) - (!rndNearest);
        return xx.f;
    }

    expo_y = expo_x + 32;
    yy.i = xx.i & 0x80000000;
    xx.i = xx.i & ~0xff000000;

    expo_x = (unsigned int)(-((int)expo_x));
    temp = xx.i << expo_y | ((temp) ? 1 : 0);
    xx.i = yy.i | (xx.i >> expo_x);
    xx.i += (((temp == 0x80000000) ? (xx.i & 1) : (temp >> 31))
             && rndNearest);
    return xx.f;
  } else {

    if (!(yy.i << 1)) {
      if (xx.i == 0x80000000) {
        xx.i = yy.i;
      }
      return xx.f;
    }
    if ((expo_y != 254) && (expo_x != 254)) {

      if (expo_x == (unsigned int) -1) {
        temp = xx.i & 0x80000000;
        xx.i = xx.i << 8;
        while (!(xx.i & 0x80000000)) {
          xx.i <<= 1;
          expo_x--;
        }
        expo_x++;
        xx.i = (xx.i >> 8) | temp;
      }
      if (expo_y == (unsigned int) -1) {
        temp = yy.i & 0x80000000;
        yy.i = yy.i << 8;
        while (!(yy.i & 0x80000000)) {
          yy.i <<= 1;
          expo_y--;
        }
        expo_y++;
        yy.i = (yy.i >> 8) | temp;
      }
      goto add;
    }
    expo_x = xx.i << 1;
    expo_y = yy.i << 1;

    if (expo_x > 0xff000000) {

      xx.i = xx.i | 0x00400000;
      return xx.f;
    }

    if (expo_y > 0xff000000) {

      xx.i = yy.i | 0x00400000;
      return xx.f;
    }
    if ((expo_x == 0xff000000) && (expo_y == 0xff000000)) {




      expo_x = xx.i ^ yy.i;
      xx.i = xx.i | ((expo_x) ? 0xffc00000 : 0);
      return xx.f;
    }

    if (expo_y == 0xff000000) {
      xx.i = yy.i;
    }
    return xx.f;
  }
}

static float __fadd_rz(float a, float b)
{
  return __internal_fadd_kernel(a, b, 0);
}

static float __fmul_rz(float a, float b)
{
  return __internal_fmul_kernel(a, b, 0);
}

static float __fadd_rn(float a, float b)
{
  return __internal_fadd_kernel(a, b, 1);
}

static float __fmul_rn(float a, float b)
{
  return __internal_fmul_kernel(a, b, 1);
}

static void __brkpt(int c)
{

}
# 1166 "/usr/local/cuda/bin/../include/device_functions.h" 3
extern int __cudaSynchronizeThreads(void**, void*);



static inline __attribute__((always_inline)) void __syncthreads(void)
{
  volatile int _ = 0;
  L: if (__cudaSynchronizeThreads((void**)&&L, (void*)&_)) goto L;
}
# 1187 "/usr/local/cuda/bin/../include/device_functions.h" 3
static void __trap(void)
{
  __builtin_trap();
}
# 1209 "/usr/local/cuda/bin/../include/device_functions.h" 3
static float __fdividef(float a, float b)
{






  if (__cuda_fabsf(b) > 8.507059173e37f) {
    if (__cuda_fabsf(a) <= 3.402823466e38f) {
      return ((a / b) / 3.402823466e38f) / 3.402823466e38f;
    } else {
      return __int_as_float(0x7fffffff);
    }
  } else {
    return a / b;
  }

}

static float __sinf(float a)
{
  return sinf(a);
}

static float __cosf(float a)
{
  return cosf(a);
}

static float __log2f(float a)
{
  return log2f(a);
}







static float __internal_accurate_fdividef(float a, float b)
{
  if (__cuda_fabsf(b) > 8.507059173e37f) {
    a *= .25f;
    b *= .25f;
  }
  return __fdividef(a, b);
}

static float __tanf(float a)
{



  return __sinf(a) / __cosf(a);

}

static void __sincosf(float a, float *sptr, float *cptr)
{



  *sptr = __sinf(a);
  *cptr = __cosf(a);

}

static float __expf(float a)
{



  return __cuda_exp2f(a * 1.442695041f);

}

static float __exp10f(float a)
{



  return __cuda_exp2f(a * 3.321928094f);

}

static float __log10f(float a)
{



  return 0.301029996f * __log2f(a);

}

static float __logf(float a)
{



  return 0.693147181f * __log2f(a);

}

static float __powf(float a, float b)
{



  return __cuda_exp2f(b * __log2f(a));

}

static float fdividef(float a, float b)
{





  return __internal_accurate_fdividef(a, b);

}

static int __clz(int a)
{
  return (a)?(158-(__float_as_int(__uint2float_rz((unsigned int)a))>>23)):32;
}

static int __ffs(int a)
{
  return 32 - __clz (a & -a);
}

static int __popc(unsigned int a)
{
  unsigned int s = 033333333333;
  unsigned int t = 030707070707;
  unsigned int n;
  n = (a >> 1) & s;
  a = a - n;
  n = (n >> 1) & s;
  a = a - n;
  n = (a >> 3) + a;
  a = n & t;
  t = (t << 2) & t;
  a = (a >> 30) + ((a * t) >> 26);
  return a;
}

static int __clzll(long long int a)
{
  int ahi = ((int)(a >> 32));
  int alo = ((int)(a & 0xffffffffULL));
  int res;
  if (ahi) {
      res = 0;
  } else {
      res = 32;
      ahi = alo;
  }
  res = res + __clz(ahi);
  return res;
}

static int __ffsll(long long int a)
{
  return 64 - __clzll (a & -a);
}

static int __popcll(unsigned long long int a)
{
  unsigned int ahi = ((unsigned int)(a >> 32));
  unsigned int alo = ((unsigned int)(a & 0xffffffffULL));
  return __popc(ahi) + __popc(alo);
}
# 1395 "/usr/local/cuda/bin/../include/device_functions.h" 3
static double fdivide(double a, double b)
{
  return (double)fdividef((float)a, (float)b);
}



static int __double2int_rz(double a)
{
  return __float2int_rz((float)a);
}

static unsigned int __double2uint_rz(double a)
{
  return __float2uint_rz((float)a);
}

static long long int __double2ll_rz(double a)
{
  return __float2ll_rz((float)a);
}

static unsigned long long int __double2ull_rz(double a)
{
  return __float2ull_rz((float)a);
}
# 1472 "/usr/local/cuda/bin/../include/device_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h" 1 3
# 214 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h" 3
static int __iAtomicAdd(int *address, int val)
{
  int old = *address;

  *address = old + val;

  return old;
}

static unsigned int __uAtomicAdd(unsigned int *address, unsigned int val)
{
  unsigned int old = *address;

  *address = old + val;

  return old;
}

static int __iAtomicExch(int *address, int val)
{
  int old = *address;

  *address = val;

  return old;
}

static unsigned int __uAtomicExch(unsigned int *address, unsigned int val)
{
  unsigned int old = *address;

  *address = val;

  return old;
}

static float __fAtomicExch(float *address, float val)
{
  float old = *address;

  *address = val;

  return old;
}

static int __iAtomicMin(int *address, int val)
{
  int old = *address;

  *address = old < val ? old : val;

  return old;
}

static unsigned int __uAtomicMin(unsigned int *address, unsigned int val)
{
  unsigned int old = *address;

  *address = old < val ? old : val;

  return old;
}

static int __iAtomicMax(int *address, int val)
{
  int old = *address;

  *address = old > val ? old : val;

  return old;
}

static unsigned int __uAtomicMax(unsigned int *address, unsigned int val)
{
  unsigned int old = *address;

  *address = old > val ? old : val;

  return old;
}

static unsigned int __uAtomicInc(unsigned int *address, unsigned int val)
{
  unsigned int old = *address;

  *address = (old >= val) ? 0 : old + 1;

  return old;
}

static unsigned int __uAtomicDec(unsigned int *address, unsigned int val)
{
  unsigned int old = *address;

  *address = ((old == 0) | (old > val)) ? val : (old - 1);

  return old;
}

static int __iAtomicAnd(int *address, int val)
{
  int old = *address;

  *address = old & val;

  return old;
}

static unsigned int __uAtomicAnd(unsigned int *address, unsigned int val)
{
  unsigned int old = *address;

  *address = old & val;

  return old;
}

static int __iAtomicOr(int *address, int val)
{
  int old = *address;

  *address = old | val;

  return old;
}

static unsigned int __uAtomicOr(unsigned int *address, unsigned int val)
{
  unsigned int old = *address;

  *address = old | val;

  return old;
}

static int __iAtomicXor(int *address, int val)
{
  int old = *address;

  *address = old ^ val;

  return old;
}

static unsigned int __uAtomicXor(unsigned int *address, unsigned int val)
{
  unsigned int old = *address;

  *address = old ^ val;

  return old;
}

static int __iAtomicCAS(int *address, int compare, int val)
{
  int old = *address;

  *address = old == compare ? val : old;

  return old;
}

static unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  unsigned int old = *address;

  *address = old == compare ? val : old;

  return old;
}
# 1473 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 1 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h" 1 3
# 107 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h" 3
static unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val)
{
  unsigned long long int old = *address;

  *address = old + val;

  return old;
}

static unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val)
{
  unsigned long long int old = *address;

  *address = val;

  return old;
}

static unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  unsigned long long int old = *address;

  *address = old == compare ? val : old;

  return old;
}

static int __any(int cond)
{
  return cond;
}

static int __all(int cond)
{
  return cond;
}
# 1474 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 1 "/usr/local/cuda/bin/../include/sm_13_double_functions.h" 1 3
# 266 "/usr/local/cuda/bin/../include/sm_13_double_functions.h" 3
static double __longlong_as_double(long long int a)
{
  volatile union {long long int a; double b;} u;

  u.a = a;

  return u.b;
}

static long long int __double_as_longlong(double a)
{
  volatile union {double a; long long int b;} u;

  u.a = a;

  return u.b;
}

static float __internal_double2float_kernel(double a)
{
  volatile union {
    double d;
    unsigned long long int i;
  } xx;
  volatile union {
    float f;
    unsigned int i;
  } res;
  int shift;
  xx.d = a;
  if (xx.i == 0) return 0.0f;
  res.i = (((unsigned int) (xx.i >> 32)) & 0x80000000);
  if ((xx.i & 0x7ff0000000000000ULL) == 0x7ff0000000000000ULL) {
    if ((xx.i & 0x7fffffffffffffffULL) > 0x7ff0000000000000ULL) {

      res.i = 0x7f8fffff;
    } else {

      res.i |= 0x7f800000;
    }
    return res.f;
  }
  shift = ((int) ((xx.i >> 52) & 0x7ff)) - 1023;

  xx.i = (xx.i & 0x000fffffffffffffULL);
  if (shift >= 128) {
    res.i |= 0x7f7fffff;
    return res.f;
  }
  if (shift <= -127) {
    if (shift < -180) {

      xx.i = 0;
    } else {
      xx.i |= 0x0010000000000000ULL;
      xx.i >>= 127 + shift;
    }
  } else {
    res.i |= (unsigned int) (127 + shift) << 23;
  }
  res.i |= ((unsigned int) (xx.i >> 29)) & 0x007fffff;
  xx.i &= 0x1fffffff;
  return res.f;
}

static double __internal_ll2double_kernel(long long int a, enum cudaRoundMode rndMode)
{
  volatile union {
    double d;
    unsigned long long int i;
  } res;
  int shift;
  unsigned int t;
  res.i = a;
  if (a == 0) return res.d;
  if (a < 0) res.i = (unsigned long long int)-a;
  shift = __internal_normalize64((unsigned long long int*)&res.i);
  t = ((unsigned int) res.i) << 21;
  res.i >>= 11;
  res.i += ((unsigned long long int)(1023 + 62 - shift)) << 52;
  if (a < 0) res.i |= 0x8000000000000000ULL;
  if ((rndMode == cudaRoundNearest) && (t >= 0x80000000)) {
    res.i += (t == 0x80000000) ? (res.i & 1) : 1;
  }
  else if ((rndMode == cudaRoundMinInf) && t && (a < 0)) {
    res.i++;
  }
  else if ((rndMode == cudaRoundPosInf) && t && (a > 0)) {
    res.i++;
  }
  return res.d;
}

static double __internal_ull2double_kernel(unsigned long long int a, enum cudaRoundMode rndMode)
{
  volatile union {
    double d;
    unsigned long long int i;
  } res;
  int shift;
  unsigned int t;
  res.i = a;
  if (a == 0) return res.d;
  shift = __internal_normalize64((unsigned long long int *)&res.i);
  t = ((unsigned int) res.i) << 21;
  res.i >>= 11;
  res.i += ((unsigned long long int)(1023 + 62 - shift)) << 52;
  if ((rndMode == cudaRoundNearest) && (t >= 0x80000000)) {
    res.i += (t == 0x80000000) ? (res.i & 1) : 1;
  }
  else if ((rndMode == cudaRoundPosInf) && t) {
    res.i++;
  }
  return res.d;
}

static long long int __internal_double2ll_kernel(double a, long long int max, long long int min, long long int nan, enum cudaRoundMode rndMode)
{
  volatile union {
    double d;
    unsigned long long int i;
  } xx, res;
  unsigned long long int t = 0;
  int shift;

  xx.d = a;
  if (sizeof(a) == sizeof(double) && __cuda___isnan((double)a)) return nan; if (sizeof(a) == sizeof(float) && __cuda___isnanf((float)a)) return nan; if (a >= max) return max; if (a <= min) return min;
  shift = (int) (1023 + 62 - ((xx.i >> 52) & 0x7ff));
  res.i = ((xx.i << 11) | 0x8000000000000000ULL) >> 1;
  if (shift >= 64) {
    t = res.i;
    res.i = 0;
  } else if (shift) {
    t = res.i << (64 - shift);
    res.i = res.i >> shift;
  }
  if ((rndMode == cudaRoundNearest) && (t >= 0x8000000000000000ULL)) {
    res.i += (t == 0x8000000000000000ULL) ? (res.i & 1) : 1;
  }
  else if ((rndMode == cudaRoundMinInf) && t &&
          (xx.i > 0x8000000000000000ULL)) {
    res.i++;
  }
  else if ((rndMode == cudaRoundPosInf) && t && ((long long int)xx.i > 0)) {
    res.i++;
  }
  if ((long long int)xx.i < 0) {
    res.i = (unsigned long long int)(-(long long int)res.i);
  }
  return res.i;
}

static unsigned long long int __internal_double2ull_kernel(double a, unsigned long long int max, unsigned long long int nan, enum cudaRoundMode rndMode)
{
  volatile union {
    double d;
    unsigned long long int i;
  } xx, res;
  unsigned long long int t = 0;
  int shift;
  xx.d = a;
  if (sizeof(a) == sizeof(double) && __cuda___isnan((double)a)) return nan; if (sizeof(a) == sizeof(float) && __cuda___isnanf((float)a)) return nan; if (a >= max) return max; if (a <= 0LL) return 0LL;

  if (a == 0.0) return 0LL;
  shift = (int) (1023 + 63 - ((xx.i >> 52) & 0x7ff));
  res.i = ((xx.i << 11) | 0x8000000000000000ULL);
  if (shift >= 64) {
    t = res.i >> (int)(shift > 64);
    res.i = 0;
  } else if (shift) {
    t = res.i << (64 - shift);
    res.i = res.i >> shift;
  }
  if ((rndMode == cudaRoundNearest) && (t >= 0x8000000000000000ULL)) {
    res.i += (t == 0x8000000000000000ULL) ? (res.i & 1) : 1;
  }
  else if ((rndMode == cudaRoundPosInf) && t) {
    res.i++;
  }
  return res.i;
}

static int __double2hiint(double a)
{
  volatile union {
    double d;
    signed int i[2];
  } cvt;

  cvt.d = a;

  return cvt.i[1];
}

static int __double2loint(double a)
{
  volatile union {
    double d;
    signed int i[2];
  } cvt;

  cvt.d = a;

  return cvt.i[0];
}

static double __hiloint2double(int a, int b)
{
  volatile union {
    double d;
    signed int i[2];
  } cvt;

  cvt.i[0] = b;
  cvt.i[1] = a;

  return cvt.d;
}

static float __double2float_rn(double a)
{
  return (float)a;
}

static float __double2float_rz(double a)
{
  return __internal_double2float_kernel(a);
}

static int __internal_double2int(double a, enum cudaRoundMode rndMode)
{
  return (int)__internal_double2ll_kernel(a, 2147483647LL, -2147483648LL, -2147483648LL, rndMode);
}

static int __double2int_rn(double a)
{
  return __internal_double2int(a, cudaRoundNearest);
}

static int __double2int_ru(double a)
{
  return __internal_double2int(a, cudaRoundPosInf);
}

static int __double2int_rd(double a)
{
  return __internal_double2int(a, cudaRoundMinInf);
}

static unsigned int __internal_double2uint(double a, enum cudaRoundMode rndMode)
{
  return (unsigned int)__internal_double2ull_kernel(a, 4294967295ULL, 2147483648ULL, rndMode);
}

static unsigned int __double2uint_rn(double a)
{
  return __internal_double2uint(a, cudaRoundNearest);
}

static unsigned int __double2uint_ru(double a)
{
  return __internal_double2uint(a, cudaRoundPosInf);
}

static unsigned int __double2uint_rd(double a)
{
  return __internal_double2uint(a, cudaRoundMinInf);
}

static long long int __internal_double2ll(double a, enum cudaRoundMode rndMode)
{
  return __internal_double2ll_kernel(a, 9223372036854775807LL, -9223372036854775807LL -1LL, -9223372036854775807LL -1LL, rndMode);
}

static long long int __double2ll_rn(double a)
{
  return __internal_double2ll(a, cudaRoundNearest);
}

static long long int __double2ll_ru(double a)
{
  return __internal_double2ll(a, cudaRoundPosInf);
}

static long long int __double2ll_rd(double a)
{
  return __internal_double2ll(a, cudaRoundMinInf);
}

static unsigned long long int __internal_double2ull(double a, enum cudaRoundMode rndMode)
{
  return __internal_double2ull_kernel(a, 18446744073709551615ULL, 9223372036854775808ULL, rndMode);
}

static unsigned long long int __double2ull_rn(double a)
{
  return __internal_double2ull(a, cudaRoundNearest);
}

static unsigned long long int __double2ull_ru(double a)
{
  return __internal_double2ull(a, cudaRoundPosInf);
}

static unsigned long long int __double2ull_rd(double a)
{
  return __internal_double2ull(a, cudaRoundMinInf);
}

static double __int2double_rn(int a)
{
  return (double)a;
}

static double __uint2double_rn(unsigned int a)
{
  return (double)a;
}

static double __ll2double_rn(long long int a)
{
  return (double)a;
}

static double __ll2double_rz(long long int a)
{
  return __internal_ll2double_kernel(a, cudaRoundZero);
}

static double __ll2double_rd(long long int a)
{
  return __internal_ll2double_kernel(a, cudaRoundMinInf);
}

static double __ll2double_ru(long long int a)
{
  return __internal_ll2double_kernel(a, cudaRoundPosInf);
}

static double __ull2double_rn(unsigned long long int a)
{
  return __internal_ull2double_kernel(a, cudaRoundNearest);
}

static double __ull2double_rz(unsigned long long int a)
{
  return __internal_ull2double_kernel(a, cudaRoundZero);
}

static double __ull2double_rd(unsigned long long int a)
{
  return __internal_ull2double_kernel(a, cudaRoundMinInf);
}

static double __ull2double_ru(unsigned long long int a)
{
  return __internal_ull2double_kernel(a, cudaRoundPosInf);
}





static double __internal_fma_kernel(double x, double y, double z, enum cudaRoundMode rndMode)
{
  struct {
    unsigned int lo;
    unsigned int hi;
  } xx, yy, zz, ww;
  unsigned int s, t, u, prod0, prod1, prod2, prod3, expo_x, expo_y, expo_z;

  xx.hi = __double2hiint(x);
  xx.lo = __double2loint(x);
  yy.hi = __double2hiint(y);
  yy.lo = __double2loint(y);
  zz.hi = __double2hiint(z);
  zz.lo = __double2loint(z);

  expo_z = 0x7FF;
  t = xx.hi >> 20;
  expo_x = expo_z & t;
  expo_x = expo_x - 1;
  t = yy.hi >> 20;
  expo_y = expo_z & t;
  expo_y = expo_y - 1;
  t = zz.hi >> 20;
  expo_z = expo_z & t;
  expo_z = expo_z - 1;

  if (!((expo_x <= 0x7FD) &&
        (expo_y <= 0x7FD) &&
        (expo_z <= 0x7FD))) {





    if (((yy.hi << 1) | (yy.lo != 0)) > 0xffe00000) {
      yy.hi |= 0x00080000;
      return __hiloint2double(yy.hi, yy.lo);
    }
    if (((zz.hi << 1) | (zz.lo != 0)) > 0xffe00000) {
      zz.hi |= 0x00080000;
      return __hiloint2double(zz.hi, zz.lo);
    }
    if (((xx.hi << 1) | (xx.lo != 0)) > 0xffe00000) {
      xx.hi |= 0x00080000;
      return __hiloint2double(xx.hi, xx.lo);
    }
# 687 "/usr/local/cuda/bin/../include/sm_13_double_functions.h" 3
    if (((((xx.hi << 1) | xx.lo) == 0) &&
         (((yy.hi << 1) | (yy.lo != 0)) == 0xffe00000)) ||
        ((((yy.hi << 1) | yy.lo) == 0) &&
         (((xx.hi << 1) | (xx.lo != 0)) == 0xffe00000))) {
      xx.hi = 0xfff80000;
      xx.lo = 0x00000000;
      return __hiloint2double(xx.hi, xx.lo);
    }
    if (((zz.hi << 1) | (zz.lo != 0)) == 0xffe00000) {
      if ((((yy.hi << 1) | (yy.lo != 0)) == 0xffe00000) ||
          (((xx.hi << 1) | (xx.lo != 0)) == 0xffe00000)) {
        if ((int)(xx.hi ^ yy.hi ^ zz.hi) < 0) {
          xx.hi = 0xfff80000;
          xx.lo = 0x00000000;
          return __hiloint2double(xx.hi, xx.lo);
        }
      }
    }




    if (((xx.hi << 1) | (xx.lo != 0)) == 0xffe00000) {
      xx.hi = xx.hi ^ (yy.hi & 0x80000000);
      return __hiloint2double(xx.hi, xx.lo);
    }
    if (((yy.hi << 1) | (yy.lo != 0)) == 0xffe00000) {
      yy.hi = yy.hi ^ (xx.hi & 0x80000000);
      return __hiloint2double(yy.hi, yy.lo);
    }
    if (((zz.hi << 1) | (zz.lo != 0)) == 0xffe00000) {
      return __hiloint2double(zz.hi, zz.lo);
    }





    if ((zz.hi == 0x80000000) && (zz.lo == 0)) {
      if ((((xx.hi << 1) | xx.lo) == 0) ||
          (((yy.hi << 1) | yy.lo) == 0)) {
        if ((int)(xx.hi ^ yy.hi) < 0) {
          return __hiloint2double(zz.hi, zz.lo);
        }
      }
    }



    if ((((zz.hi << 1) | zz.lo) == 0) &&
        ((((xx.hi << 1) | xx.lo) == 0) ||
         (((yy.hi << 1) | yy.lo) == 0))) {
      if (rndMode == cudaRoundMinInf) {
        return __hiloint2double((xx.hi ^ yy.hi ^ zz.hi) & 0x80000000, zz.lo);
      } else {
        zz.hi &= 0x7fffffff;
        return __hiloint2double(zz.hi, zz.lo);
      }
    }




    if ((((xx.hi << 1) | xx.lo) == 0) ||
        (((yy.hi << 1) | yy.lo) == 0)) {
      return __hiloint2double(zz.hi, zz.lo);
    }

    if (expo_x == 0xffffffff) {
      expo_x++;
      t = xx.hi & 0x80000000;
      s = xx.lo >> 21;
      xx.lo = xx.lo << 11;
      xx.hi = xx.hi << 11;
      xx.hi = xx.hi | s;
      if (!xx.hi) {
        xx.hi = xx.lo;
        xx.lo = 0;
        expo_x -= 32;
      }
      while ((int)xx.hi > 0) {
        s = xx.lo >> 31;
        xx.lo = xx.lo + xx.lo;
        xx.hi = xx.hi + xx.hi;
        xx.hi = xx.hi | s;
        expo_x--;
      }
      xx.lo = (xx.lo >> 11);
      xx.lo |= (xx.hi << 21);
      xx.hi = (xx.hi >> 11) | t;
    }
    if (expo_y == 0xffffffff) {
      expo_y++;
      t = yy.hi & 0x80000000;
      s = yy.lo >> 21;
      yy.lo = yy.lo << 11;
      yy.hi = yy.hi << 11;
      yy.hi = yy.hi | s;
      if (!yy.hi) {
        yy.hi = yy.lo;
        yy.lo = 0;
        expo_y -= 32;
      }
      while ((int)yy.hi > 0) {
        s = yy.lo >> 31;
        yy.lo = yy.lo + yy.lo;
        yy.hi = yy.hi + yy.hi;
        yy.hi = yy.hi | s;
        expo_y--;
      }
      yy.lo = (yy.lo >> 11);
      yy.lo |= (yy.hi << 21);
      yy.hi = (yy.hi >> 11) | t;
    }
    if (expo_z == 0xffffffff) {
      expo_z++;
      t = zz.hi & 0x80000000;
      s = zz.lo >> 21;
      zz.lo = zz.lo << 11;
      zz.hi = zz.hi << 11;
      zz.hi = zz.hi | s;
      if (!zz.hi) {
        zz.hi = zz.lo;
        zz.lo = 0;
        expo_z -= 32;
      }
      while ((int)zz.hi > 0) {
        s = zz.lo >> 31;
        zz.lo = zz.lo + zz.lo;
        zz.hi = zz.hi + zz.hi;
        zz.hi = zz.hi | s;
        expo_z--;
      }
      zz.lo = (zz.lo >> 11);
      zz.lo |= (zz.hi << 21);
      zz.hi = (zz.hi >> 11) | t;
    }
  }

  expo_x = expo_x + expo_y;
  expo_y = xx.hi ^ yy.hi;
  t = xx.lo >> 21;
  xx.lo = xx.lo << 11;
  xx.hi = xx.hi << 11;
  xx.hi = xx.hi | t;
  yy.hi = yy.hi & 0x000fffff;
  xx.hi = xx.hi | 0x80000000;
  yy.hi = yy.hi | 0x00100000;

  prod0 = xx.lo * yy.lo;
  prod1 = __umulhi (xx.lo, yy.lo);
  prod2 = xx.hi * yy.lo;
  prod3 = xx.lo * yy.hi;
  prod1 += prod2;
  t = prod1 < prod2;
  prod1 += prod3;
  t += prod1 < prod3;
  prod2 = __umulhi (xx.hi, yy.lo);
  prod3 = __umulhi (xx.lo, yy.hi);
  prod2 += prod3;
  s = prod2 < prod3;
  prod3 = xx.hi * yy.hi;
  prod2 += prod3;
  s += prod2 < prod3;
  prod2 += t;
  s += prod2 < t;
  prod3 = __umulhi (xx.hi, yy.hi) + s;

  yy.lo = prod0;
  yy.hi = prod1;
  xx.lo = prod2;
  xx.hi = prod3;
  expo_x = expo_x - (1023 - 2);
  expo_y = expo_y & 0x80000000;

  if (xx.hi < 0x00100000) {
    s = xx.lo >> 31;
    s = (xx.hi << 1) + s;
    xx.hi = s;
    s = yy.hi >> 31;
    s = (xx.lo << 1) + s;
    xx.lo = s;
    s = yy.lo >> 31;
    s = (yy.hi << 1) + s;
    yy.hi = s;
    s = yy.lo << 1;
    yy.lo = s;
    expo_x--;
  }

  t = 0;
  if (((zz.hi << 1) | zz.lo) != 0) {

    s = zz.hi & 0x80000000;

    zz.hi &= 0x000fffff;
    zz.hi |= 0x00100000;
    ww.hi = 0;
    ww.lo = 0;


    if ((int)expo_z > (int)expo_x) {
      t = expo_z;
      expo_z = expo_x;
      expo_x = t;
      t = zz.hi;
      zz.hi = xx.hi;
      xx.hi = t;
      t = zz.lo;
      zz.lo = xx.lo;
      xx.lo = t;
      t = ww.hi;
      ww.hi = yy.hi;
      yy.hi = t;
      t = ww.lo;
      ww.lo = yy.lo;
      yy.lo = t;
      t = expo_y;
      expo_y = s;
      s = t;
    }



    expo_z = expo_x - expo_z;
    u = expo_y ^ s;
    if (expo_z <= 107) {

      t = 0;
      while (expo_z >= 32) {
        t = ww.lo | (t != 0);
        ww.lo = ww.hi;
        ww.hi = zz.lo;
        zz.lo = zz.hi;
        zz.hi = 0;
        expo_z -= 32;
      }
      if (expo_z) {
        t = (t >> expo_z) | (ww.lo << (32 - expo_z)) |
                ((t << (32 - expo_z)) != 0);
        ww.lo = (ww.lo >> expo_z) | (ww.hi << (32 - expo_z));
        ww.hi = (ww.hi >> expo_z) | (zz.lo << (32 - expo_z));
        zz.lo = (zz.lo >> expo_z) | (zz.hi << (32 - expo_z));
        zz.hi = (zz.hi >> expo_z);
      }
    } else {
      t = 1;
      ww.lo = 0;
      ww.hi = 0;
      zz.lo = 0;
      zz.hi = 0;
    }
    if ((int)u < 0) {

      t = (unsigned)(-(int)t);
      s = (t != 0);
      u = yy.lo - s;
      s = u > yy.lo;
      yy.lo = u - ww.lo;
      s += yy.lo > u;
      u = yy.hi - s;
      s = u > yy.hi;
      yy.hi = u - ww.hi;
      s += yy.hi > u;
      u = xx.lo - s;
      s = u > xx.lo;
      xx.lo = u - zz.lo;
      s += xx.lo > u;
      xx.hi = (xx.hi - zz.hi) - s;
      if (!(xx.hi | xx.lo | yy.hi | yy.lo | t)) {

        if (rndMode == cudaRoundMinInf) {
          return __hiloint2double(0x80000000, xx.lo);
        } else {
          return __hiloint2double(xx.hi, xx.lo);
        }
      }
      if ((int)xx.hi < 0) {



        t = ~t;
        yy.lo = ~yy.lo;
        yy.hi = ~yy.hi;
        xx.lo = ~xx.lo;
        xx.hi = ~xx.hi;
        if (++t == 0) {
          if (++yy.lo == 0) {
            if (++yy.hi == 0) {
              if (++xx.lo == 0) {
              ++xx.hi;
              }
            }
          }
        }
        expo_y ^= 0x80000000;
      }


      while (!(xx.hi & 0x00100000)) {
        xx.hi = (xx.hi << 1) | (xx.lo >> 31);
        xx.lo = (xx.lo << 1) | (yy.hi >> 31);
        yy.hi = (yy.hi << 1) | (yy.lo >> 31);
        yy.lo = (yy.lo << 1);
        expo_x--;
      }
    } else {

      yy.lo = yy.lo + ww.lo;
      s = yy.lo < ww.lo;
      yy.hi = yy.hi + s;
      u = yy.hi < s;
      yy.hi = yy.hi + ww.hi;
      u += yy.hi < ww.hi;
      xx.lo = xx.lo + u;
      s = xx.lo < u;
      xx.lo = xx.lo + zz.lo;
      s += xx.lo < zz.lo;
      xx.hi = xx.hi + zz.hi + s;
      if (xx.hi & 0x00200000) {
        t = t | (yy.lo << 31);
        yy.lo = (yy.lo >> 1) | (yy.hi << 31);
        yy.hi = (yy.hi >> 1) | (xx.lo << 31);
        xx.lo = (xx.lo >> 1) | (xx.hi << 31);
        xx.hi = ((xx.hi & 0x80000000) | (xx.hi >> 1)) & ~0x40000000;
        expo_x++;
      }
    }
  }
  t = yy.lo | (t != 0);
  t = yy.hi | (t != 0);

  xx.hi |= expo_y;
  if (expo_x <= 0x7FD) {

    xx.hi = xx.hi & ~0x00100000;
    s = xx.lo & 1;
    u = xx.lo;
    if (rndMode == cudaRoundNearest) {
      xx.lo += (t == 0x80000000) ? s : (t >> 31);
    } else if (((rndMode == cudaRoundPosInf) && t && (!expo_y)) ||
               ((rndMode == cudaRoundMinInf) && t && expo_y)) {
      xx.lo += 1;
    }
    xx.hi += (u > xx.lo);
    xx.hi += ((expo_x + 1) << 20);
    return __hiloint2double(xx.hi, xx.lo);
  } else if ((int)expo_x >= 2046) {

    if ((rndMode == cudaRoundNearest) ||
        ((rndMode == cudaRoundPosInf) && (!expo_y)) ||
        ((rndMode == cudaRoundMinInf) && expo_y)) {
      xx.hi = (xx.hi & 0x80000000) | 0x7ff00000;
      xx.lo = 0;
    } else {
      xx.hi = (xx.hi & 0x80000000) | 0x7fefffff;
      xx.lo = 0xffffffff;
    }
    return __hiloint2double(xx.hi, xx.lo);
  }

  expo_x = (unsigned)(-(int)expo_x);
  if (expo_x > 54) {

    if (((rndMode == cudaRoundPosInf) && (!expo_y)) ||
        ((rndMode == cudaRoundMinInf) && expo_y)) {
      return __hiloint2double(xx.hi & 0x80000000, 1);
    } else {
      return __hiloint2double(xx.hi & 0x80000000, 0);
    }
  }
  yy.hi = xx.hi & 0x80000000;
  xx.hi = xx.hi & ~0xffe00000;
  if (expo_x >= 32) {
    t = xx.lo | (t != 0);
    xx.lo = xx.hi;
    xx.hi = 0;
    expo_x -= 32;
  }
  if (expo_x) {
    t = (t >> expo_x) | (xx.lo << (32 - expo_x)) | (t != 0);
    xx.lo = (xx.lo >> expo_x) | (xx.hi << (32 - expo_x));
    xx.hi = (xx.hi >> expo_x);
  }
  expo_x = xx.lo & 1;
  u = xx.lo;
  if (rndMode == cudaRoundNearest) {
    xx.lo += (t == 0x80000000) ? expo_x : (t >> 31);
  } else if (((rndMode == cudaRoundPosInf) && t && (!expo_y)) ||
             ((rndMode == cudaRoundMinInf) && t && expo_y)) {
    xx.lo += 1;
  }
  xx.hi += (u > xx.lo);
  xx.hi |= yy.hi;
  return __hiloint2double(xx.hi, xx.lo);
}

static double __fma_rn(double x, double y, double z)
{
  return __internal_fma_kernel(x, y, z, cudaRoundNearest);
}

static double __fma_rd(double x, double y, double z)
{
  return __internal_fma_kernel(x, y, z, cudaRoundMinInf);
}

static double __fma_ru(double x, double y, double z)
{
  return __internal_fma_kernel(x, y, z, cudaRoundPosInf);
}

static double __fma_rz(double x, double y, double z)
{
  return __internal_fma_kernel(x, y, z, cudaRoundZero);
}

static double __dadd_rz(double a, double b)
{
  return __fma_rz(a, 1.0, b);
}

static double __dadd_ru(double a, double b)
{
  return __fma_ru(a, 1.0, b);
}

static double __dadd_rd(double a, double b)
{
  return __fma_rd(a, 1.0, b);
}

static double __dmul_rz(double a, double b)
{
  return __fma_rz(a, b, __hiloint2double(0x80000000, 0x00000000));
}

static double __dmul_ru(double a, double b)
{
  return __fma_ru(a, b, __hiloint2double(0x80000000, 0x00000000));
}

static double __dmul_rd(double a, double b)
{
  return __fma_rd(a, b, 0.0);
}

static double __dadd_rn(double a, double b)
{
  return __fma_rn(a, 1.0, b);
}

static double __dmul_rn(double a, double b)
{
  return __fma_rn(a, b, __hiloint2double(0x80000000, 0x00000000));
}
# 1475 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 1 "/usr/local/cuda/bin/../include/texture_fetch_functions.h" 1 3
# 1909 "/usr/local/cuda/bin/../include/texture_fetch_functions.h" 3
extern void __cudaTextureFetch(const void *tex, void *index, int integer, void *val);

static int4 __itexfetchi(const void *tex, int4 index)
{
  int4 val;

  __cudaTextureFetch(tex, (void*)&index, 1, (void*)&val);

  return val;
}

static uint4 __utexfetchi(const void *tex, int4 index)
{
  uint4 val;

  __cudaTextureFetch(tex, (void*)&index, 1, (void*)&val);

  return val;
}

static float4 __ftexfetchi(const void *tex, int4 index)
{
  float4 val;

  __cudaTextureFetch(tex, (void*)&index, 1, (void*)&val);

  return val;
}

static int4 __itexfetch(const void *tex, float4 index, int dim)
{
  int4 val;

  __cudaTextureFetch(tex, (void*)&index, 0, (void*)&val);

  return val;
}

static uint4 __utexfetch(const void *tex, float4 index, int dim)
{
  uint4 val;

  __cudaTextureFetch(tex, (void*)&index, 0, (void*)&val);

  return val;
}

static float4 __ftexfetch(const void *tex, float4 index, int dim)
{
  float4 val;

  __cudaTextureFetch(tex, (void*)&index, 0, (void*)&val);

  return val;
}
# 1476 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 908 "/usr/local/cuda/bin/../include/math_functions.h" 2 3


static int __cuda___signbitf(float a)
{
  return (int)((unsigned int)__float_as_int(a) >> 31);
}




static float __cuda_copysignf(float a, float b)
{
  return __int_as_float((__float_as_int(b) & 0x80000000) |
                        (__float_as_int(a) & ~0x80000000));
}
# 932 "/usr/local/cuda/bin/../include/math_functions.h" 3
extern __attribute__((__weak_import__, __weak__)) int min(int a, int b); int min(int a, int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) unsigned int umin(unsigned int a, unsigned int b); unsigned int umin(unsigned int a, unsigned int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) int max(int a, int b); int max(int a, int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) unsigned int umax(unsigned int a, unsigned int b); unsigned int umax(unsigned int a, unsigned int b)
{
  return a > b ? a : b;
}
# 1016 "/usr/local/cuda/bin/../include/math_functions.h" 3
static float __internal_nearbyintf(float a)
{
  float fa = fabsf(a);

  if (fa >= 8388608.0f) {
    return a;
  } else {
    volatile float u = 8388608.0f + fa;

    u = u - 8388608.0f;
    return copysignf(u, a);
  }
}

static float __internal_fminf(float a, float b)
{
  volatile union {
    float f;
    unsigned int i;
  } cvta, cvtb;

  cvta.f = a;
  cvtb.f = b;
  if ((cvta.i << 1) > 0xff000000) return b;
  if ((cvtb.i << 1) > 0xff000000) return a;
  if ((cvta.i | cvtb.i) == 0x80000000) {
    return __int_as_float(0x80000000);
  }
  return a < b ? a : b;
}

static float __internal_fmaxf(float a, float b)
{
  volatile union {
    float f;
    unsigned int i;
  } cvta, cvtb;

  cvta.f = a;
  cvtb.f = b;
  if ((cvta.i << 1) > 0xff000000) return b;
  if ((cvtb.i << 1) > 0xff000000) return a;
  if ((cvta.f == 0.0f) && (cvtb.f == 0.0f)) {
    cvta.i &= cvtb.i;
    return cvta.f;
  }
  return a > b ? a : b;
}
# 1104 "/usr/local/cuda/bin/../include/math_functions.h" 3
static long int __cuda_labs(long int a)
{
  return labs(a);
}

static float __cuda_ceilf(float a)
{
  return ceilf(a);
}

static float __cuda_floorf(float a)
{
  return floorf(a);
}

static float __cuda_sqrtf(float a)
{
   return sqrtf(a);
}

static float __cuda_rsqrtf(float a)
{
   return 1.0f / sqrtf(a);
}

static float __cuda_truncf(float a)
{
  return truncf(a);
}

static int __cuda_max(int a, int b)
{
  return max(a, b);
}

static int __cuda_min(int a, int b)
{
  return min(a, b);
}

static unsigned int __cuda_umax(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static unsigned int __cuda_umin(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static long long int __cuda_llrintf(float a)
{



  return __float2ll_rn(a);

}

static long int __cuda_lrintf(float a)
{






  return (long int)__float2int_rn(a);


}

static float __cuda_nearbyintf(float a)
{



  return __internal_nearbyintf(a);

}

static float __cuda_fmaxf(float a, float b)
{





  return __internal_fmaxf(a, b);

}

static float __cuda_fminf(float a, float b)
{





  return __internal_fminf(a, b);

}
# 1223 "/usr/local/cuda/bin/../include/math_functions.h" 3
static int __cuda___finitef(float a)
{
  return __cuda_fabsf(a) < __int_as_float(0x7f800000);
}



static int __cuda___isfinitef(float a)
{
  return __cuda___finitef(a);
}



static int __cuda___isinff(float a)
{
  return __cuda_fabsf(a) == __int_as_float(0x7f800000);
}

static int __cuda___isnanf(float a)
{
  return !(__cuda_fabsf(a) <= __int_as_float(0x7f800000));
}

static float __cuda_nextafterf(float a, float b)
{
  unsigned int ia;
  unsigned int ib;
  ia = __float_as_int(a);
  ib = __float_as_int(b);




  if (__cuda___isnanf(a) || __cuda___isnanf(b)) return a + b;
  if (__int_as_float (ia | ib) == 0.0f) return __int_as_float(ib);





  if (__int_as_float(ia) == 0.0f) {
    return __cuda_copysignf(__int_as_float(0x00000001), b);
  }

  if ((a < b) && (a < 0.0f)) ia--;
  if ((a < b) && (a > 0.0f)) ia++;
  if ((a > b) && (a < 0.0f)) ia++;
  if ((a > b) && (a > 0.0f)) ia--;
  a = __int_as_float(ia);





  return a;
}

static float __cuda_nanf(const char *tagp)
{

  return __int_as_float(0x7fffffff);
}


static float __internal_atanhf_kernel(float a_1, float a_2)
{
  float a, a2, t;

  a = a_1 + a_2;
  a2 = a * a;
  t = 1.566305595598990E-001f/64.0f;
  t = t * a2 + 1.995081856004762E-001f/16.0f;
  t = t * a2 + 3.333382699617026E-001f/4.0f;
  t = t * a2;
  t = t * a + a_2;
  t = t + a_1;
  return t;
}




static float __internal_atanf_kernel(float a)
{
  float t4, t0, t1;

  t4 = a * a;
  t0 = - 5.674867153f;
  t0 = t4 * - 0.823362947f + t0;
  t0 = t0 * t4 - 6.565555096f;
  t0 = t0 * t4;
  t0 = t0 * a;
  t1 = t4 + 11.33538818f;
  t1 = t1 * t4 + 28.84246826f;
  t1 = t1 * t4 + 19.69667053f;
  t1 = 1.0f / t1;
  a = t0 * t1 + a;
  return a;
}


static float __internal_tan_kernel(float a)
{
  float a2, s, t;

  a2 = a * a;
  t = 4.114678393115178E-003f * a2 - 8.231194034909670E-001f;
  s = a2 - 2.469348886157666E+000f;
  s = 1.0f / s;
  t = t * s;
  t = t * a2;
  t = t * a + a;
  return t;
}

static float __internal_accurate_logf(float a)
{
  float t;
  float z;
  float m;
  int ia, e;
  ia = __float_as_int(a);

  if ((ia < 0x00800000) || (ia > 0x7f7fffff)) {
    return __logf(a);
  }

  m = __int_as_float((ia & 0x807fffff) | 0x3f800000);
  e = ((unsigned)ia >> 23) - 127;
  if (m > 1.414213562f) {
    m = m * 0.5f;
    e = e + 1;
  }
  t = m - 1.0f;
  z = m + 1.0f;
  z = t / z;
  z = -t * z;
  z = __internal_atanhf_kernel(t, z);
  z = (float)e * 0.693147181f + z;
  return z;
}

static float2 __internal_log_ep(float a)
{
  float2 res;
  int expo;
  float m;
  float log_hi, log_lo;
  float t_hi, t_lo;
  float f, g, u, v, q;



  float r, s, e;

  expo = (__float_as_int(a) >> 23) & 0xff;


  if (expo == 0) {
    a *= 16777216.0f;
    expo = (__float_as_int(a) >> 23) & 0xff;
    expo -= 24;
  }

  expo -= 127;
  m = __int_as_float((__float_as_int(a) & 0x807fffff) | 0x3f800000);
  if (m > 1.414213562f) {
    m = m * 0.5f;
    expo = expo + 1;
  }






  f = m - 1.0f;
  g = m + 1.0f;
  g = 1.0f / g;
  u = 2.0f * f * g;
  v = u * u;
  q = 1.49356810919559350E-001f/64.0f;
  q = q * v + 1.99887797540072460E-001f/16.0f;
  q = q * v + 3.33333880955515580E-001f/4.0f;
  q = q * v;
  q = q * u;
  log_hi = __int_as_float(__float_as_int(u) & 0xfffff000);
  v = __int_as_float(__float_as_int(f) & 0xfffff000);
  u = 2.0f * (f - log_hi);
  f = f - v;
  u = u - log_hi * v;
  u = u - log_hi * f;
  u = g * u;



  r = log_hi + u;
  s = u - (r - log_hi);
  log_hi = r;
  log_lo = s;

  r = log_hi + q;
  s = ((log_hi - r) + q) + log_lo;
  log_hi = e = r + s;
  log_lo = (r - e) + s;


  t_hi = expo * 0.6931457519f;
  t_lo = expo * 1.4286067653e-6f;


  r = t_hi + log_hi;
  s = (((t_hi - r) + log_hi) + log_lo) + t_lo;
  res.y = e = r + s;
  res.x = (r - e) + s;
  return res;
}

static float __internal_accurate_log2f(float a)
{
  return 1.442695041f * __internal_accurate_logf(a);
}


static unsigned int __cudart_i2opi_f [] = {
  0x3c439041,
  0xdb629599,
  0xf534ddc0,
  0xfc2757d1,
  0x4e441529,
  0xa2f9836e,
};


static float __internal_trig_reduction_kernel(float a, int *quadrant)
{
  float j;
  int q;
  if (__cuda_fabsf(a) > 48039.0f) {

    unsigned int ia = __float_as_int(a);
    unsigned int s = ia & 0x80000000;
    unsigned int result[7];
    unsigned int phi, plo;
    unsigned int hi, lo;
    unsigned int e;
    int idx;
    e = ((ia >> 23) & 0xff) - 128;
    ia = (ia << 8) | 0x80000000;

    idx = 4 - (e >> 5);
    hi = 0;



    for (q = 0; q < 6; q++) {
      plo = __cudart_i2opi_f[q] * ia;
      phi = __umulhi (__cudart_i2opi_f[q], ia);
      lo = hi + plo;
      hi = phi + (lo < plo);
      result[q] = lo;
    }
    result[q] = hi;
    e = e & 31;



    hi = result[idx+2];
    lo = result[idx+1];
    if (e) {
      q = 32 - e;
      hi = (hi << e) | (lo >> q);
      lo = (lo << e) | (result[idx] >> q);
    }
    q = hi >> 30;

    hi = (hi << 2) | (lo >> 30);
    lo = (lo << 2);
    e = (hi + (lo > 0)) > 0x80000000;
    q += e;
    if (s) q = -q;
    if (e) {
      unsigned int t;
      hi = ~hi;
      lo = -(int)lo;
      t = (lo == 0);
      hi += t;
      s = s ^ 0x80000000;
    }
    *quadrant = q;

    e = 0;
    while ((int)hi > 0) {
      hi = (hi << 1) | (lo >> 31);
      lo = (lo << 1);
      e--;
    }
    lo = hi * 0xc90fdaa2;
    hi = __umulhi(hi, 0xc90fdaa2);
    if ((int)hi > 0) {
      hi = (hi << 1) | (lo >> 31);
      lo = (lo << 1);
      e--;
    }
    hi = hi + (lo > 0);
    ia = s | (((e + 126) << 23) + (hi >> 8) + ((hi << 24) >= 0x80000000));
    return __int_as_float(ia);
  }
  q = __float2int_rn(a * 0.636619772f);
  j = (float)q;
  a = a - j * 1.5703125000000000e+000f;
  a = a - j * 4.8351287841796875e-004f;
  a = a - j * 3.1385570764541626e-007f;
  a = a - j * 6.0771005065061922e-011f;
  *quadrant = q;
  return a;
}
# 1551 "/usr/local/cuda/bin/../include/math_functions.h" 3
static float __internal_expf_kernel(float a, float scale)
{
  float j, z;

  j = __cuda_truncf(a * 1.442695041f);
  z = a - j * 0.6931457519f;
  z = z - j * 1.4286067653e-6f;
  z = z * 1.442695041f;
  z = __cuda_exp2f(z) * __cuda_exp2f(j + scale);
  return z;
}

static float __internal_accurate_expf(float a)
{
  float z;
  z = __internal_expf_kernel(a, 0.0f);
  if (a < -105.0f) z = 0.0f;
  if (a > 105.0f) z = __int_as_float(0x7f800000);
  return z;
}

static float __internal_accurate_exp10f(float a)
{
  float j, z;
  j = __cuda_truncf(a * 3.321928094f);
  z = a - j * 3.0102920532226563e-001f;
  z = z - j * 7.9034171557301747e-007f;
  z = z * 3.321928094f;
  z = __cuda_exp2f(z) * __cuda_exp2f(j);
  if (a < -46.0f) z = 0.0f;
  if (a > 46.0f) z = __int_as_float(0x7f800000);
  return z;
}

static float __internal_lgammaf_pos(float a)
{
  float sum;
  float s, t;

  if (a == __int_as_float(0x7f800000)) {
    return a;
  }
  if (a >= 3.0f) {
    if (a >= 7.8f) {



      s = 1.0f / a;
      t = s * s;
      sum = 0.77783067e-3f;
      sum = sum * t - 0.2777655457e-2f;
      sum = sum * t + 0.83333273853e-1f;
      sum = sum * s + 0.918938533204672f;
      s = 0.5f * __internal_accurate_logf(a);
      t = a - 0.5f;
      s = s * t;
      t = s - a;
      s = __fadd_rn(s, sum);
      t = t + s;
      return t;
    } else {
      a = a - 3.0f;
      s = - 7.488903254816711E+002f;
      s = s * a - 1.234974215949363E+004f;
      s = s * a - 4.106137688064877E+004f;
      s = s * a - 4.831066242492429E+004f;
      s = s * a - 1.430333998207429E+005f;
      t = a - 2.592509840117874E+002f;
      t = t * a - 1.077717972228532E+004f;
      t = t * a - 9.268505031444956E+004f;
      t = t * a - 2.063535768623558E+005f;
      t = s / t;
      t = t + a;
      return t;
    }
  } else if (a >= 1.5f) {
    a = a - 2.0f;
    t = + 4.959849168282574E-005f;
    t = t * a - 2.208948403848352E-004f;
    t = t * a + 5.413142447864599E-004f;
    t = t * a - 1.204516976842832E-003f;
    t = t * a + 2.884251838546602E-003f;
    t = t * a - 7.382757963931180E-003f;
    t = t * a + 2.058131963026755E-002f;
    t = t * a - 6.735248600734503E-002f;
    t = t * a + 3.224670187176319E-001f;
    t = t * a + 4.227843368636472E-001f;
    t = t * a;
    return t;
  } else if (a >= 0.7f) {
    a = 1.0f - a;
    t = + 4.588266515364258E-002f;
    t = t * a + 1.037396712740616E-001f;
    t = t * a + 1.228036339653591E-001f;
    t = t * a + 1.275242157462838E-001f;
    t = t * a + 1.432166835245778E-001f;
    t = t * a + 1.693435824224152E-001f;
    t = t * a + 2.074079329483975E-001f;
    t = t * a + 2.705875136435339E-001f;
    t = t * a + 4.006854436743395E-001f;
    t = t * a + 8.224669796332661E-001f;
    t = t * a + 5.772156651487230E-001f;
    t = t * a;
    return t;
  } else {
    t = + 3.587515669447039E-003f;
    t = t * a - 5.471285428060787E-003f;
    t = t * a - 4.462712795343244E-002f;
    t = t * a + 1.673177015593242E-001f;
    t = t * a - 4.213597883575600E-002f;
    t = t * a - 6.558672843439567E-001f;
    t = t * a + 5.772153712885004E-001f;
    t = t * a;
    t = t * a + a;
    return -__internal_accurate_logf(t);
  }
}


static float __internal_sin_kernel(float x)
{
  float x2, z;

  x2 = x * x;
  z = - 1.95152959e-4f;
  z = z * x2 + 8.33216087e-3f;
  z = z * x2 - 1.66666546e-1f;
  z = z * x2;
  z = z * x + x;

  return z;
}


static float __internal_cos_kernel(float x)
{
  float x2, z;

  x2 = x * x;
  z = 2.44331571e-5f;
  z = z * x2 - 1.38873163e-3f;
  z = z * x2 + 4.16666457e-2f;
  z = z * x2 - 5.00000000e-1f;
  z = z * x2 + 1.00000000e+0f;
  return z;
}

static float __internal_accurate_sinf(float a)
{
  float z;
  int i;

  if ((__cuda___isinff(a)) || (a == 0.0f)) {
    return __fmul_rn (a, 0.0f);
  }
  z = __internal_trig_reduction_kernel(a, &i);

  if (i & 1) {
    z = __internal_cos_kernel(z);
  } else {
    z = __internal_sin_kernel(z);
  }
  if (i & 2) {
    z = -z;
  }
  return z;
}







static float __cuda_rintf(float a)
{



  return __cuda_nearbyintf(a);

}

static float __cuda_sinf(float a)
{





  return __internal_accurate_sinf(a);

}

static float __cuda_cosf(float a)
{





  float z;
  int i;

  if (__cuda___isinff(a)) {
    return __int_as_float(0x7fffffff);
  }
  z = __internal_trig_reduction_kernel(a, &i);

  i++;
  if (i & 1) {
    z = __internal_cos_kernel(z);
  } else {
    z = __internal_sin_kernel(z);
  }
  if (i & 2) {
    z = -z;
  }
  return z;

}

static float __cuda_tanf(float a)
{





  float z;
  int i;

  if (__cuda___isinff(a)) {
    return __int_as_float(0x7fffffff);
  }
  z = __internal_trig_reduction_kernel(a, &i);

  z = __internal_tan_kernel(z);
  if (i & 1) {
    z = -1.0f / z;
  }
  return z;

}

static float __cuda_log2f(float a)
{





  return __internal_accurate_log2f(a);

}

static float __cuda_expf(float a)
{





  return __internal_accurate_expf(a);

}

static float __cuda_exp10f(float a)
{





  return __internal_accurate_exp10f(a);

}

static float __cuda_coshf(float a)
{
  float z;

  a = __cuda_fabsf(a);
  z = __internal_expf_kernel(a, -2.0f);
  z = 2.0f * z + 0.125f / z;
  if (a >= 90.0f) {
    z = __int_as_float(0x7f800000);
  }
  return z;
}

static float __cuda_sinhf(float a)
{
  float s, z;

  s = a;
  a = __cuda_fabsf(a);
  if (a < 1.0f) {
    float a2 = a * a;

    z = 2.816951222e-6f;
    z = z * a2 + 1.983615978e-4f;
    z = z * a2 + 8.333350058e-3f;
    z = z * a2 + 1.666666650e-1f;
    z = z * a2;
    z = z * a + a;
  } else {
    z = __internal_expf_kernel(a, -2.0f);
    z = 2.0f * z - 0.125f / z;
    if (a >= 90.0f) {
      z = __int_as_float(0x7f800000);
    }
  }
  return __cuda_copysignf(z, s);
}

static float __cuda_tanhf(float a)
{
  float s, t;

  t = __cuda_fabsf(a);
  if (t < 0.55f) {
    float z, z2;
    z = t;
    z2 = z * z;
    t = 1.643758066599993e-2f;
    t = t * z2 - 5.267181327760551e-2f;
    t = t * z2 + 1.332072505223051e-1f;
    t = t * z2 - 3.333294663641083e-1f;
    t = t * z2;
    s = t * z + z;
  } else {
    s = 1.0f - 2.0f / (__internal_expf_kernel(2.0f * t, 0.0f) + 1.0f);
    if (t >= 88.0f) {
      s = 1.0f;
    }
  }
  return __cuda_copysignf(s, a);
}

static float __cuda_atan2f(float a, float b)
{



  float t0, t1, t3, fa, fb;



  fb = __cuda_fabsf(b);
  fa = __cuda_fabsf(a);

  if (fa == 0.0f && fb == 0.0f) {
    t3 = __cuda___signbitf(b) ? 3.141592654f : 0;
  } else if ((fa == __int_as_float(0x7f800000)) && (fb == __int_as_float(0x7f800000))) {
    t3 = __cuda___signbitf(b) ? 2.356194490f : 0.785398163f;
  } else {

    if (fb < fa) {
      t0 = fa;
      t1 = fb;
    } else {
      t0 = fb;
      t1 = fa;
    }
    t3 = __internal_accurate_fdividef(t1, t0);
    t3 = __internal_atanf_kernel(t3);

    if (fa > fb) t3 = 1.570796327f - t3;
    if (b < 0.0f) t3 = 3.141592654f - t3;
  }
  t3 = __cuda_copysignf(t3, a);

  return t3;

}

static float __cuda_atanf(float a)
{
  float t0, t1;


  t0 = __cuda_fabsf(a);
  t1 = t0;
  if (t0 > 1.0f) {
    t1 = 1.0f / t1;
  }

  t1 = __internal_atanf_kernel(t1);

  if (t0 > 1.0f) {
    t1 = 1.570796327f - t1;
  }
  return __cuda_copysignf(t1, a);
}


static float __internal_asinf_kernel(float a)
{
  float t2, t3, t4;

  t2 = a * a;
  t3 = - 0.501162291f;
  t3 = t3 * t2 + 0.915201485f;
  t3 = t3 * t2;
  t3 = t3 * a;
  t4 = t2 - 5.478654385f;
  t4 = t4 * t2 + 5.491230488f;
  t4 = 1.0f / t4;
  a = t3 * t4 + a;
  return a;
}

static float __cuda_asinf(float a)
{
  float t0, t1, t2;

  t0 = __cuda_fabsf(a);
  t2 = 1.0f - t0;
  t2 = 0.5f * t2;
  t2 = __cuda_sqrtf(t2);
  t1 = t0 > 0.575f ? t2 : t0;
  t1 = __internal_asinf_kernel(t1);
  t2 = -2.0f * t1 + 1.570796327f;
  if (t0 > 0.575f) {
    t1 = t2;
  }
  return __cuda_copysignf(t1, a);
}

static float __cuda_acosf(float a)
{
  float t0, t1, t2;

  t0 = __cuda_fabsf(a);
  t2 = 1.0f - t0;
  t2 = 0.5f * t2;
  t2 = __cuda_sqrtf(t2);
  t1 = t0 > 0.575f ? t2 : t0;
  t1 = __internal_asinf_kernel(t1);
  t1 = t0 > 0.575f ? 2.0f * t1 : 1.570796327f - t1;
  if (__cuda___signbitf(a)) {
    t1 = 3.141592654f - t1;
  }
  return t1;
}

static float __cuda_logf(float a)
{





  return __internal_accurate_logf(a);

}

static float __cuda_log10f(float a)
{





  return 0.434294482f * __internal_accurate_logf(a);

}

static float __cuda_log1pf(float a)
{



  float t;




  if (a >= -0.394f && a <= 0.65f) {

    t = a + 2.0f;
    t = a / t;
    t = -a * t;
    t = __internal_atanhf_kernel (a, t);
  } else {
    t = __internal_accurate_logf (1.0f + a);
  }
  return t;

}

static float __cuda_acoshf(float a)
{



  float s, t;

  t = a - 1.0f;
  if (__cuda_fabsf(t) > 8388608.0f) {

    return 0.693147181f + __internal_accurate_logf(a);
  } else {
    s = a + 1.0f;
    t = t + __cuda_sqrtf(s * t);
    return __cuda_log1pf(t);
  }

}

static float __cuda_asinhf(float a)
{



  float fa, oofa, t;

  fa = __cuda_fabsf(a);
  if (fa > 8.507059173e37f) {
    t = 0.693147181f + __logf(fa);
  } else {
    oofa = 1.0f / fa;
    t = fa + fa / (oofa + __cuda_sqrtf(1.0f + oofa * oofa));
    t = __cuda_log1pf(t);
  }
  return __cuda_copysignf(t, a);

}

static float __cuda_atanhf(float a)
{



  float fa, t;

  fa = __cuda_fabsf(a);
  t = (2.0f * fa) / (1.0f - fa);
  t = 0.5f * __cuda_log1pf(t);
  return __cuda_copysignf(t, a);

}

static float __cuda_expm1f(float a)
{
  float t, z, j, u;

  t = __cuda_rintf (a * 1.442695041f);
  z = a - t * 0.6931457519f;
  z = z - t * 1.4286067653e-6f;

  if (__cuda_fabsf(a) < 0.41f) {
    z = a;
    t = 0.0f;
  }

  j = t;
  if (t == 128.0f) j = j - 1.0f;

  u = 1.38795078474044430E-003f;
  u = u * z + 8.38241261853264930E-003f;
  u = u * z + 4.16678317762833940E-002f;
  u = u * z + 1.66663978874356580E-001f;
  u = u * z + 4.99999940395997040E-001f;
  u = u * z;
  u = u * z + z;
  if (a == 0.0f) u = a;

  z = __cuda_exp2f (j);
  a = z - 1.0f;
  if (a != 0.0f) u = u * z + a;
  if (t == 128.0f) u = u + u;

  if (j > 128.0f) u = __int_as_float(0x7f800000);
  if (j < -25.0f) u = -1.0f;
  return u;
}

static float __cuda_hypotf(float a, float b)
{



  float v, w, t;

  a = __cuda_fabsf(a);
  b = __cuda_fabsf(b);

  if (a > b) {
    v = a;
    w = b;
  } else {
    v = b;
    w = a;
  }
  t = __internal_accurate_fdividef(w, v);
  t = 1.0f + t * t;
  t = v * __cuda_sqrtf(t);
  if (v == 0.0f) {
    t = v + w;
  }
  if ((v == __int_as_float(0x7f800000)) || (w == __int_as_float(0x7f800000))) {
    t = __int_as_float(0x7f800000);
  }
  return t;

}

static float __cuda_cbrtf(float a)
{



  float s, t;

  s = __cuda_fabsf(a);
  if ((a == 0.0f) || (s == __int_as_float(0x7f800000))) {
    return a;
  }
  t = __cuda_exp2f(0.333333333f * __log2f(s));
  t = t - (t - (s / (t * t))) * 0.333333333f;
  if (__cuda___signbitf(a)) {
     t = -t;
  }
  return t;

}

static float __cuda_erff(float a)
{
  float t, r, q;

  t = __cuda_fabsf(a);
  if (t < 1.0f) {
    t = t * t;
    r = -5.58510127926029810E-004f;
    r = r * t + 4.90688891415893070E-003f;
    r = r * t - 2.67027980930150640E-002f;
    r = r * t + 1.12799056505903940E-001f;
    r = r * t - 3.76122956138427440E-001f;
    r = r * t + 1.12837911712623450E+000f;
    a = a * r;
  } else if (t <= __int_as_float(0x7f800000)) {



    q = 0.3275911f * t + 1.0f;
    q = 1.0f / q;
    r = 1.061405429f;
    r = r * q - 1.453152027f;
    r = r * q + 1.421413741f;
    r = r * q - 0.284496736f;
    r = r * q + 0.254829592f;
    r = r * q;
    q = __internal_expf_kernel(-a * a, 0.0f);
    r = 1.0f - q * r;
    if (t >= 5.5f) {
      r = 1.0f;
    }
    a = __int_as_float (__float_as_int(r) | (__float_as_int(a) & 0x80000000));
  }
  return a;
}

static float __cuda_erfcf(float a)
{
  if (a <= 0.55f) {
    return 1.0f - __cuda_erff(a);
  } else if (a > 10.0f) {
    return 0.0f;
  } else {
    float p;
    float q;
    float h;
    float l;




    p = + 4.014893410762552E-006f;
    p = p * a + 5.640401259462436E-001f;
    p = p * a + 2.626649872281140E+000f;
    p = p * a + 5.486372652389673E+000f;
    p = p * a + 5.250714831459401E+000f;
    q = a + 4.651376250488319E+000f;
    q = q * a + 1.026302828878470E+001f;
    q = q * a + 1.140762166021288E+001f;
    q = q * a + 5.251211619089947E+000f;

    h = 1.0f / q;
    q = 2.0f * h - q * h * h;
    p = p * q;

    h = __int_as_float(__float_as_int(a) & 0xfffff000);
    l = __fadd_rn (a, -h);
    q = __fmul_rn (-h, h);
    q = __internal_expf_kernel(q, 0.0f);
    a = a + h;
    l = l * a;
    h = __internal_expf_kernel(-l, 0.0f);
    q = q * h;
    p = p * q;
    return p;
  }
}

static float __cuda_lgammaf(float a)
{
  float t;
  float i;
  int quot;
  t = __internal_lgammaf_pos(__cuda_fabsf(a));
  if (a >= 0.0f) return t;
  a = __cuda_fabsf(a);
  i = __cuda_floorf(a);
  if (a == i) return __int_as_float(0x7f800000);
  if (a < 1e-19f) return -__internal_accurate_logf(a);
  i = __cuda_rintf (2.0f * a);
  quot = (int)i;
  i = a - 0.5f * i;
  i = i * 3.141592654f;
  if (quot & 1) {
    i = __internal_cos_kernel(i);
  } else {
    i = __internal_sin_kernel(i);
  }
  i = __cuda_fabsf(i);
  t = 1.144729886f - __internal_accurate_logf(i * a) - t;
  return t;
}

static float __cuda_ldexpf(float a, int b)
{



  float fa = __cuda_fabsf(a);

  if ((fa == 0.0f) || (fa == __int_as_float(0x7f800000)) || (b == 0)) {
    return a;
  }
  else if (__cuda_abs(b) < 126) {
    return a * __cuda_exp2f((float)b);
  }
  else if (__cuda_abs(b) < 252) {
    int bhalf = b / 2;
    return a * __cuda_exp2f((float)bhalf) * __cuda_exp2f((float)(b - bhalf));
  }
  else {
    int bquarter = b / 4;
    float t = __cuda_exp2f((float)bquarter);
    return a * t * t * t * __cuda_exp2f((float)(b - 3 * bquarter));
  }

}

static float __cuda_scalbnf(float a, int b)
{




  return __cuda_ldexpf(a, b);

}

static float __cuda_scalblnf(float a, long int b)
{



  int t;
  if (b > 2147483647L) {
    t = 2147483647;
  } else if (b < (-2147483647 - 1)) {
    t = (-2147483647 - 1);
  } else {
    t = (int)b;
  }
  return __cuda_scalbnf(a, t);

}

static float __cuda_frexpf(float a, int *b)
{
  float fa = __cuda_fabsf(a);
  unsigned int expo;
  unsigned int denorm;

  if (fa < 1.175494351e-38f) {
    a *= 16777216.0f;
    denorm = 24;
  } else {
    denorm = 0;
  }
  expo = ((__float_as_int(a) >> 23) & 0xff);
  if ((fa == 0.0f) || (expo == 0xff)) {
    expo = 0;
    a = a + a;
  } else {
    expo = expo - denorm - 126;
    a = __int_as_float(((__float_as_int(a) & 0x807fffff) | 0x3f000000));
  }
  *b = expo;
  return a;
}

static float __cuda_modff(float a, float *b)
{



  float t;
  if (__cuda___finitef(a)) {
    t = __cuda_truncf(a);
    *b = t;
    t = a - t;
    return __cuda_copysignf(t, a);
  } else if (__cuda___isinff(a)) {
    t = 0.0f;
    *b = a;
    return __cuda_copysignf(t, a);
  } else {
    *b = a;
    return a;
  }

}

static float __cuda_fmodf(float a, float b)
{



  float orig_a = a;
  float orig_b = b;
  a = __cuda_fabsf(a);
  b = __cuda_fabsf(b);
  if (!((a <= __int_as_float(0x7f800000)) && (b <= __int_as_float(0x7f800000)))) {
    return orig_a + orig_b;
  }
  if ((a == __int_as_float(0x7f800000)) || (b == 0.0f)) {
    return __int_as_float(0x7fffffff);
  } else if (a >= b) {


    int expoa = (a < 1.175494351e-38f) ?
        ((int)__log2f(a)) : (((__float_as_int(a) >> 23) & 0xff) - 127);
    int expob = (b < 1.175494351e-38f) ?
        ((int)__log2f(b)) : (((__float_as_int(b) >> 23) & 0xff) - 127);
    int scale = expoa - expob;
    float scaled_b = __cuda_ldexpf(b, scale);
    if (scaled_b <= 0.5f * a) {
      scaled_b *= 2.0f;
    }







    while (scaled_b >= b) {
      if (a >= scaled_b) {
        a -= scaled_b;
      }
      scaled_b *= 0.5f;
    }
    return __cuda_copysignf(a, orig_a);
  } else {
    return orig_a;
  }

}

static float __cuda_remainderf(float a, float b)
{

  float twoa = 0.0f;
  unsigned int quot0 = 0;
  float orig_a = a;
  float orig_b = b;

  a = __cuda_fabsf(a);
  b = __cuda_fabsf(b);
  if (!((a <= __int_as_float(0x7f800000)) && (b <= __int_as_float(0x7f800000)))) {
    return orig_a + orig_b;
  }
  if ((a == __int_as_float(0x7f800000)) || (b == 0.0f)) {
    return __int_as_float(0x7fffffff);
  } else if (a >= b) {

    int expoa = (a < 1.175494351e-38f) ?
        ((int)__log2f(a)) : (((__float_as_int(a) >> 23) & 0xff) - 127);
    int expob = (b < 1.175494351e-38f) ?
        ((int)__log2f(b)) : (((__float_as_int(b) >> 23) & 0xff) - 127);
    int scale = expoa - expob;
    float scaled_b = __cuda_ldexpf(b, scale);
    if (scaled_b <= 0.5f * a) {
      scaled_b *= 2.0f;
    }
# 2464 "/usr/local/cuda/bin/../include/math_functions.h" 3
    while (scaled_b >= b) {
      quot0 = 0;
      if (a >= scaled_b) {
        twoa = (2.0f * a - scaled_b) - scaled_b;
        a -= scaled_b;
        quot0 = 1;
      }
      scaled_b *= 0.5f;
    }
  }


  twoa = 2.0f * a;
  if ((twoa > b) || ((twoa == b) && quot0)) {
    a -= b;
    a = __cuda_copysignf (a, -1.0f);
  }
# 2496 "/usr/local/cuda/bin/../include/math_functions.h" 3
  a = __int_as_float((__float_as_int(orig_a) & 0x80000000)^
                     __float_as_int(a));
  return a;
}

static float __cuda_remquof(float a, float b, int* quo)
{
  float twoa = 0.0f;
  unsigned int quot = 0;
  unsigned int sign;
  float orig_a = a;
  float orig_b = b;


  sign = 0 - (__cuda___signbitf(a) != __cuda___signbitf(b));
  a = __cuda_fabsf(a);
  b = __cuda_fabsf(b);
  if (!((a <= __int_as_float(0x7f800000)) && (b <= __int_as_float(0x7f800000)))) {
    *quo = quot;
    return orig_a + orig_b;
  }
  if ((a == __int_as_float(0x7f800000)) || (b == 0.0f)) {
    *quo = quot;
    return __int_as_float(0x7fffffff);
  } else if (a >= b) {


    int expoa = (a < 1.175494351e-38f) ?
        ((int)__log2f(a)) : (((__float_as_int(a) >> 23) & 0xff) - 127);
    int expob = (b < 1.175494351e-38f) ?
        ((int)__log2f(b)) : (((__float_as_int(b) >> 23) & 0xff) - 127);
    int scale = expoa - expob;
    float scaled_b = __cuda_ldexpf(b, scale);
    if (scaled_b <= 0.5f * a) {
      scaled_b *= 2.0f;
    }
# 2549 "/usr/local/cuda/bin/../include/math_functions.h" 3
    while (scaled_b >= b) {
      quot <<= 1;
      if (a >= scaled_b) {
        twoa = (2.0f * a - scaled_b) - scaled_b;
        a -= scaled_b;
        quot += 1;
      }
      scaled_b *= 0.5f;
    }
  }


  twoa = 2.0f * a;
  if ((twoa > b) || ((twoa == b) && (quot & 1))) {
    quot++;
    a -= b;
    a = __cuda_copysignf (a, -1.0f);
  }
# 2584 "/usr/local/cuda/bin/../include/math_functions.h" 3
  a = __int_as_float((__float_as_int(orig_a) & 0x80000000)^
                     __float_as_int(a));
  quot = quot & (~((~0)<<3));
  quot = quot ^ sign;
  quot = quot - sign;
  *quo = quot;
  return a;
}

static float __cuda_fmaf(float a, float b, float c)
{
  unsigned int xx, yy, zz, ww;
  unsigned int temp, s, u;
  unsigned int expo_x, expo_y, expo_z;

  xx = __float_as_int(a);
  yy = __float_as_int(b);
  zz = __float_as_int(c);
# 2610 "/usr/local/cuda/bin/../include/math_functions.h" 3
  temp = 0xff;
  expo_x = temp & (xx >> 23);
  expo_x = expo_x - 1;
  expo_y = temp & (yy >> 23);
  expo_y = expo_y - 1;
  expo_z = temp & (zz >> 23);
  expo_z = expo_z - 1;

  if (!((expo_x <= 0xFD) &&
        (expo_y <= 0xFD) &&
        (expo_z <= 0xFD))) {




    if ((yy << 1) > 0xff000000) {
      return __int_as_float(0x7fffffff);
    }
    if ((zz << 1) > 0xff000000) {
      return __int_as_float(0x7fffffff);
    }
    if ((xx << 1) > 0xff000000) {
      return __int_as_float(0x7fffffff);
    }
# 2645 "/usr/local/cuda/bin/../include/math_functions.h" 3
    if ((((xx << 1) == 0) && ((yy << 1) == 0xff000000)) ||
        (((yy << 1) == 0) && ((xx << 1) == 0xff000000))) {
      return __int_as_float(0x7fffffff);
    }
    if ((zz << 1) == 0xff000000) {
      if (((yy << 1) == 0xff000000) || ((xx << 1) == 0xff000000)) {
        if ((int)(xx ^ yy ^ zz) < 0) {
          return __int_as_float(0x7fffffff);
        }
      }
    }




    if ((xx << 1) == 0xff000000) {
      xx = xx ^ (yy & 0x80000000);
      return __int_as_float(xx);
    }
    if ((yy << 1) == 0xff000000) {
      yy = yy ^ (xx & 0x80000000);
      return __int_as_float(yy);
    }
    if ((zz << 1) == 0xff000000) {
      return __int_as_float(zz);
    }





    if (zz == 0x80000000) {
      if (((xx << 1) == 0) || ((yy << 1) == 0)) {
        if ((int)(xx ^ yy) < 0) {
          return __int_as_float(zz);
        }
      }
    }



    if (((zz << 1) == 0) &&
        (((xx << 1) == 0) || ((yy << 1) == 0))) {
      zz &= 0x7fffffff;
      return __int_as_float(zz);
    }



    if (((xx << 1) == 0) || ((yy << 1) == 0)) {
      return __int_as_float(zz);
    }

    if (expo_x == (unsigned int)-1) {
      temp = xx & 0x80000000;
      xx = xx << 8;
      while (!(xx & 0x80000000)) {
        xx <<= 1;
        expo_x--;
      }
      expo_x++;
      xx = (xx >> 8) | temp;
    }

    if (expo_y == (unsigned int)-1) {
      temp = yy & 0x80000000;
      yy = yy << 8;
      while (!(yy & 0x80000000)) {
        yy <<= 1;
        expo_y--;
      }
      expo_y++;
      yy = (yy >> 8) | temp;
    }

    if ((expo_z == (unsigned int)-1) && ((zz << 1) != 0)) {
      temp = zz & 0x80000000;
      zz = zz << 8;
      while (!(zz & 0x80000000)) {
        zz <<= 1;
        expo_z--;
      }
      expo_z++;
      zz = (zz >> 8) | temp;
    }
  }

  expo_x = expo_x + expo_y;
  expo_y = xx ^ yy;
  xx = xx & 0x00ffffff;
  yy = yy << 8;
  xx = xx | 0x00800000;
  yy = yy | 0x80000000;

  s = __umulhi(xx, yy);
  yy = xx * yy;
  xx = s;
  expo_x = expo_x - 127 + 2;
  expo_y = expo_y & 0x80000000;


  if (xx < 0x00800000) {
      xx = (xx << 1) | (yy >> 31);
      yy = (yy << 1);
      expo_x--;
  }
  temp = 0;
  if ((zz << 1) != 0) {
    s = zz & 0x80000000;
    zz &= 0x00ffffff;
    zz |= 0x00800000;
    ww = 0;

    if ((int)expo_z > (int)expo_x) {
      temp = expo_z;
      expo_z = expo_x;
      expo_x = temp;
      temp = zz;
      zz = xx;
      xx = temp;
      temp = ww;
      ww = yy;
      yy = temp;
      temp = expo_y;
      expo_y = s;
      s = temp;
    }


    expo_z = expo_x - expo_z;
    u = expo_y ^ s;
    if (expo_z <= 49) {

      temp = 0;
      while (expo_z >= 32) {
        temp = ww | (temp != 0);
        ww = zz;
        zz = 0;
        expo_z -= 32;
      }
      if (expo_z) {
        temp = ((temp >> expo_z) | (ww << (32 - expo_z)) |
                ((temp << (32 - expo_z)) != 0));
        ww = (ww >> expo_z) | (zz << (32 - expo_z));
        zz = (zz >> expo_z);
      }
    } else {
      temp = 1;
      ww = 0;
      zz = 0;
    }
    if ((int)u < 0) {

      temp = (unsigned)(-(int)temp);
      s = (temp != 0);
      u = yy - s;
      s = u > yy;
      yy = u - ww;
      s += yy > u;
      xx = (xx - zz) - s;
      if (!(xx | yy | temp)) {

        return __int_as_float(xx);
      }
      if ((int)xx < 0) {



        temp = ~temp;
        yy = ~yy;
        xx = ~xx;
        if (++temp == 0) {
          if (++yy == 0) {
            ++xx;
          }
        }
        expo_y ^= 0x80000000;
      }

      while (!(xx & 0x00800000)) {
        xx = (xx << 1) | (yy >> 31);
        yy = (yy << 1);
        expo_x--;
      }
    } else {

      yy = yy + ww;
      s = yy < ww;
      xx = xx + zz + s;
      if (xx & 0x01000000) {
        temp = temp | (yy << 31);
        yy = (yy >> 1) | (xx << 31);
        xx = ((xx & 0x80000000) | (xx >> 1)) & ~0x40000000;
        expo_x++;
      }
    }
  }
  temp = yy | (temp != 0);
  if (expo_x <= 0xFD) {

    xx |= expo_y;
    s = xx & 1;
    xx += (temp == 0x80000000) ? s : (temp >> 31);
    xx = xx + (expo_x << 23);
    return __int_as_float(xx);
  } else if ((int)expo_x >= 126) {

    xx = expo_y | 0x7f800000;
    return __int_as_float(xx);
  }

  expo_x = (unsigned int)(-(int)expo_x);
  if (expo_x > 25) {

    return __int_as_float(expo_y);
  }
  yy = (xx << (32 - expo_x)) | ((yy) ? 1 : 0);
  xx = expo_y + (xx >> expo_x);
  xx = xx + ((yy==0x80000000) ? (xx & 1) : (yy >> 31));
  xx |= expo_y;




  return __int_as_float(xx);
}

static float __internal_accurate_powf(float a, float b)
{
  float2 loga, prod;



  float t;




  float up, vp, u1, u2, v1, v2, mh, ml;



  loga = __internal_log_ep(a);


  if (__cuda_fabsf(b) > 1.0e34f) b *= 1.220703125e-4f;

  up = loga.y * 4097.0f;
  u1 = (loga.y - up) + up;
  u2 = loga.y - u1;
  vp = b * 4097.0f;
  v1 = (b - vp) + vp;
  v2 = b - v1;
  mh = __fmul_rn(loga.y, b);
  ml = (((u1 * v1 - mh) + u1 * v2) + u2 * v1) + u2 * v2;
  ml = __fmul_rn(loga.x, b) + ml;
  prod.y = up = mh + ml;
  prod.x = (mh - up) + ml;


  t = __cuda_expf(prod.y);

  if (t != __int_as_float(0x7f800000)) {



    t = t * prod.x + t;
  }
  return t;
}

static float __cuda_powif(float a, int b)
{
  unsigned int e = __cuda_abs(b);
  float r = 1.0f;

  while (1) {
    if ((e & 1) != 0) {
      r = r * a;
    }
    e = e >> 1;
    if (e == 0) {
      return b < 0 ? 1.0f/r : r;
    }
    a = a * a;
  }
}

static double __cuda_powi(double a, int b)
{
  unsigned int e = __cuda_abs(b);
  double r = 1.0;

  while (1) {
    if ((e & 1) != 0) {
      r = r * a;
    }
    e = e >> 1;
    if (e == 0) {
      return b < 0 ? 1.0/r : r;
    }
    a = a * a;
  }
}

static float __cuda_powf(float a, float b)
{





  int bIsOddInteger;
  float t;
  if (a == 1.0f || b == 0.0f) {
    return 1.0f;
  }
  if (__cuda___isnanf(a) || __cuda___isnanf(b)) {
    return a + b;
  }
  if (a == __int_as_float(0x7f800000)) {
    return __cuda___signbitf(b) ? 0.0f : __int_as_float(0x7f800000);
  }
  if (__cuda___isinff(b)) {
    if (a == -1.0f) {
      return 1.0f;
    }
    t = (__cuda_fabsf(a) > 1.0f) ? __int_as_float(0x7f800000) : 0.0f;
    if (b < 0.0f) {
      t = 1.0f / t;
    }
    return t;
  }
  bIsOddInteger = (b - (2.0f * floorf(0.5f * b))) == 1.0f;
  if (a == 0.0f) {
    t = bIsOddInteger ? a : 0.0f;
    if (b < 0.0f) {
      t = 1.0f / t;
    }
    return t;
  }
  if (a == -__int_as_float(0x7f800000)) {
    t = (b < 0.0f) ? -1.0f/a : -a;
    if (bIsOddInteger) {
      t = __int_as_float(__float_as_int(t) ^ 0x80000000);
    }
    return t;
  }
  if ((a < 0.0f) && (b != __cuda_truncf(b))) {
    return __int_as_float(0x7fffffff);
  }
  t = __cuda_fabsf(a);
  t = __internal_accurate_powf(t, b);
  if ((a < 0.0f) && bIsOddInteger) {
    t = __int_as_float(__float_as_int(t) ^ 0x80000000);
  }
  return t;

}


static float __internal_tgammaf_kernel(float a)
{
  float t;
  t = - 1.05767296987211380E-003f;
  t = t * a + 7.09279059435508670E-003f;
  t = t * a - 9.65347121958557050E-003f;
  t = t * a - 4.21736613253687960E-002f;
  t = t * a + 1.66542401247154280E-001f;
  t = t * a - 4.20043267827838460E-002f;
  t = t * a - 6.55878234051332940E-001f;
  t = t * a + 5.77215696929794240E-001f;
  t = t * a + 1.00000000000000000E+000f;
  return t;
}





static float __cuda_tgammaf(float a)
{
  float s, xx, x=a;
  if (x >= 0.0f) {
    if (x > 36.0f) x = 36.0f;
    s = 1.0f;
    xx = x;
    if (x > 34.03f) {
      xx -= 1.0f;
    }
    while (xx > 1.5f) {
      xx = xx - 1.0f;
      s = s * xx;
    }
    if (x >= 0.5f) {
      xx = xx - 1.0f;
    }
    xx = __internal_tgammaf_kernel(xx);
    if (x < 0.5f) {
      xx = xx * x;
    }
    s = s / xx;
    if (x > 34.03f) {

      xx = x - 1.0f;
      s = s * xx;
    }
    return s;
  } else {
    if (x == __cuda_floorf(x)) {
      x = __int_as_float(0x7fffffff);

      return x;

    }
    if (x < -41.1f) x = -41.1f;
    xx = x;
    if (x < -34.03f) {
      xx += 6.0f;
    }
    s = xx;
    while (xx < -0.5f) {
      xx = xx + 1.0f;
      s = s * xx;
    }
    xx = __internal_tgammaf_kernel(xx);
    s = s * xx;
    s = 1.0f / s;
    if (x < -34.03f) {
      xx = x;
      xx *= (x + 1.0f);
      xx *= (x + 2.0f);
      xx *= (x + 3.0f);
      xx *= (x + 4.0f);
      xx *= (x + 5.0f);
      xx = 1.0f / xx;
      s = s * xx;
      if ((a < -42.0f) && !(((int)a)&1)) {
        s = __int_as_float(0x80000000);
      }
    }
    return s;
  }
}

static float __cuda_roundf(float a)
{



  float fa = __cuda_fabsf(a);
  if (fa > 8388608.0f) {
    return a;
  } else {
    float u = __cuda_floorf(fa + 0.5f);
    if (fa < 0.5f) u = 0.0f;
    return __cuda_copysignf(u, a);
  }

}

static long long int __internal_llroundf_kernel(float a)
{
  unsigned long long int res, t = 0LL;
  int shift;
  unsigned int ia = __float_as_int(a);
  if ((ia << 1) > 0xff000000) return 0LL;
  if ((int)ia >= 0x5f000000) return 0x7fffffffffffffffLL;
  if (ia >= 0xdf000000) return 0x8000000000000000LL;
  shift = 189 - ((ia >> 23) & 0xff);
  res = ((long long int)(((ia << 8) | 0x80000000) >> 1)) << 32;
  if (shift >= 64) {
    t = res;
    res = 0;
  } else if (shift) {
    t = res << (64 - shift);
    res = res >> shift;
  }
  if (t >= 0x8000000000000000LL) {
      res++;
  }
  if ((int)ia < 0) res = (unsigned long long int)(-(long long int)res);
  return (long long int)res;
}

static long long int __cuda_llroundf(float a)
{



  return __internal_llroundf_kernel(a);

}

static long int __cuda_lroundf(float a)
{







  if (__cuda___isnanf(a)) return 0L;
  if (a >= 2147483648.0f) return 2147483647L;
  if (a <= -2147483648.0f) return (-2147483647L - 1L);

  return (long int)(__cuda_roundf(a));


}

static float __cuda_fdimf(float a, float b)
{
  float t;
  t = a - b;
  if (a <= b) {
    t = 0.0f;
  }
  return t;
}

static int __cuda_ilogbf(float a)
{
  unsigned int i;
  int expo;
  a = __cuda_fabsf(a);
  if (a <= 1.175494351e-38f) {

    if (a == 0.0f) {
      expo = -((int)((unsigned int)-1 >> 1))-1;
    } else {
      expo = -126;
      i = __float_as_int(a);
      i = i << 8;
      while ((int)i >= 0) {
        expo--;
        i = i + i;
      }
    }
  } else {
    i = __float_as_int(a);
    expo = ((int)((i >> 23) & 0xff)) - 127;
    if ((i == 0x7f800000)) {
      expo = ((int)((unsigned int)-1 >> 1));
    }
    if ((i > 0x7f800000)) {
      expo = -((int)((unsigned int)-1 >> 1))-1;
    }
  }
  return expo;
}

static float __cuda_logbf(float a)
{



  unsigned int i;
  int expo;
  float res;

  if (__cuda___isnanf(a)) return a + a;

  a = __cuda_fabsf(a);
  if (a <= 1.175494351e-38f) {

    if (a == 0.0f) {
      res = -__int_as_float(0x7f800000);
    } else {
      expo = -126;
      i = __float_as_int(a);
      i = i << 8;
      while ((int)i >= 0) {
        expo--;
        i = i + i;
      }
      res = (float)expo;
    }
  } else {
    i = __float_as_int(a);
    expo = ((int)((i >> 23) & 0xff)) - 127;
    res = (float)expo;
    if ((i >= 0x7f800000)) {

      res = a + a;
    }
  }
  return res;

}

static void __cuda_sincosf(float a, float *sptr, float *cptr)
{





  float t, u, s, c;
  int quadrant;
  if (__cuda___isinff(a)) {
    *sptr = __int_as_float(0x7fffffff);
    *cptr = __int_as_float(0x7fffffff);
    return;
  }
  if (a == 0.0f) {
    *sptr = a;
    *cptr = 1.0f;
    return;
  }
  t = __internal_trig_reduction_kernel(a, &quadrant);
  u = __internal_cos_kernel(t);
  t = __internal_sin_kernel(t);
  if (quadrant & 1) {
    s = u;
    c = t;
  } else {
    s = t;
    c = u;
  }
  if (quadrant & 2) {
    s = -s;
  }
  quadrant++;
  if (quadrant & 2) {
    c = -c;
  }
  *sptr = s;
  *cptr = c;

}
# 3286 "/usr/local/cuda/bin/../include/math_functions.h" 3
extern __attribute__((__weak_import__, __weak__)) double rsqrt(double a); double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

extern __attribute__((__weak_import__, __weak__)) float rsqrtf(float a); float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}
# 3304 "/usr/local/cuda/bin/../include/math_functions.h" 3
extern __attribute__((__weak_import__, __weak__)) double exp10(double a); double exp10(double a)
{
  return pow(10.0, a);
}
# 3818 "/usr/local/cuda/bin/../include/math_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/math_functions_dbl_ptx1.h" 1 3
# 45 "/usr/local/cuda/bin/../include/math_functions_dbl_ptx1.h" 3
static double __cuda_fabs(double a)
{
  return (float)__cuda_fabsf((float)a);
}

static double __cuda_fmax(double a, double b)
{
  return (float)__cuda_fmaxf((float)a, (float)b);
}

static double __cuda_fmin(double a, double b)
{
  return (float)__cuda_fminf((float)a, (float)b);
}

static int __cuda___finite(double a)
{
  return __cuda___finitef((float)a);
}

static int __cuda___isinf(double a)
{
  return __cuda___isinff((float)a);
}

static int __cuda___isnan(double a)
{
  return __cuda___isnanf((float)a);
}

static int __cuda___signbit(double a)
{
  return __cuda___signbitf((float)a);
}

static double __cuda_sqrt(double a)
{
  return (double)__cuda_sqrtf((float)a);
}

static double __cuda_rsqrt(double a)
{
  return (double)__cuda_rsqrtf((float)a);
}

static double __cuda_ceil(double a)
{
  return (double)__cuda_ceilf((float)a);
}

static double __cuda_trunc(double a)
{
  return (double)__cuda_truncf((float)a);
}

static double __cuda_floor(double a)
{
  return (double)__cuda_floorf((float)a);
}

static double __cuda_copysign(double a, double b)
{
  return (double)__cuda_copysignf((float)a, (float)b);
}

static double __cuda_sin(double a)
{
  return (double)__cuda_sinf((float)a);
}

static double __cuda_cos(double a)
{
  return (double)__cuda_cosf((float)a);
}

static void __cuda_sincos(double a, double *sptr, double *cptr)
{
  float fs, fc;

  __cuda_sincosf((float)a, &fs, &fc);

  *sptr = (double)fs;
  *cptr = (double)fc;
}

static double __cuda_tan(double a)
{
  return (double)__cuda_tanf((float)a);
}

static double __cuda_exp(double a)
{
  return (double)__cuda_expf((float)a);
}

static double __cuda_exp2(double a)
{
  return (double)__cuda_exp2f((float)a);
}

static double __cuda_exp10(double a)
{
  return (double)__cuda_exp10f((float)a);
}

static double __cuda_expm1(double a)
{
  return (double)__cuda_expm1f((float)a);
}

static double __cuda_cosh(double a)
{
  return (double)__cuda_coshf((float)a);
}

static double __cuda_sinh(double a)
{
  return (double)__cuda_sinhf((float)a);
}

static double __cuda_tanh(double a)
{
  return (double)__cuda_tanhf((float)a);
}

static double __cuda_asin(double a)
{
  return (double)__cuda_asinf((float)a);
}

static double __cuda_acos(double a)
{
  return (double)__cuda_acosf((float)a);
}

static double __cuda_atan(double a)
{
  return (double)__cuda_atanf((float)a);
}

static double __cuda_atan2(double a, double b)
{
  return (double)__cuda_atan2f((float)a, (float)b);
}

static double __cuda_log(double a)
{
  return (double)__cuda_logf((float)a);
}

static double __cuda_log2(double a)
{
  return (double)__cuda_log2f((float)a);
}

static double __cuda_log10(double a)
{
  return (double)__cuda_log10f((float)a);
}

static double __cuda_log1p(double a)
{
  return (double)__cuda_log1pf((float)a);
}

static double __cuda_acosh(double a)
{
  return (double)__cuda_acoshf((float)a);
}

static double __cuda_asinh(double a)
{
  return (double)__cuda_asinhf((float)a);
}

static double __cuda_atanh(double a)
{
  return (double)__cuda_atanhf((float)a);
}

static double __cuda_hypot(double a, double b)
{
  return (double)__cuda_hypotf((float)a, (float)b);
}

static double __cuda_cbrt(double a)
{
  return (double)__cuda_cbrtf((float)a);
}

static double __cuda_erf(double a)
{
  return (double)__cuda_erff((float)a);
}

static double __cuda_erfc(double a)
{
  return (double)__cuda_erfcf((float)a);
}

static double __cuda_lgamma(double a)
{
  return (double)__cuda_lgammaf((float)a);
}

static double __cuda_tgamma(double a)
{
  return (double)__cuda_tgammaf((float)a);
}

static double __cuda_ldexp(double a, int b)
{
  return (double)__cuda_ldexpf((float)a, b);
}

static double __cuda_scalbn(double a, int b)
{
  return (double)__cuda_scalbnf((float)a, b);
}

static double __cuda_scalbln(double a, long b)
{
  return (double)__cuda_scalblnf((float)a, b);
}

static double __cuda_frexp(double a, int *b)
{
  return (double)__cuda_frexpf((float)a, b);
}

static double __cuda_modf(double a, double *b)
{
  float fb;
  float fa = __cuda_modff((float)a, &fb);

  *b = (double)fb;

  return (double)fa;
}

static double __cuda_fmod(double a, double b)
{
  return (double)__cuda_fmodf((float)a, (float)b);
}

static double __cuda_remainder(double a, double b)
{
  return (double)__cuda_remainderf((float)a, (float)b);
}

static double __cuda_remquo(double a, double b, int *c)
{
  return (double)__cuda_remquof((float)a, (float)b, c);
}

static double __cuda_nextafter(double a, double b)
{
  return (double)__cuda_nextafterf((float)a, (float)b);
}

static double __cuda_nan(const char *tagp)
{
  return (double)__cuda_nanf(tagp);
}

static double __cuda_pow(double a, double b)
{
  return (double)__cuda_powf((float)a, (float)b);
}

static double __cuda_round(double a)
{
  return (double)__cuda_roundf((float)a);
}

static long __cuda_lround(double a)
{
  return __cuda_lroundf((float)a);
}

static long long __cuda_llround(double a)
{
  return __cuda_llroundf((float)a);
}

static double __cuda_rint(double a)
{
  return (double)__cuda_rintf((float)a);
}

static long __cuda_lrint(double a)
{
  return __cuda_lrintf((float)a);
}

static long long __cuda_llrint(double a)
{
  return __cuda_llrintf((float)a);
}

static double __cuda_nearbyint(double a)
{
  return (double)__cuda_nearbyintf((float)a);
}

static double __cuda_fdim(double a, double b)
{
  return (double)__cuda_fdimf((float)a, (float)b);
}

static int __cuda_ilogb(double a)
{
  return __cuda_ilogbf((float)a);
}

static double __cuda_logb(double a)
{
  return (double)__cuda_logbf((float)a);
}

static double __cuda_fma(double a, double b, double c)
{
  return (double)__cuda_fmaf((float)a, (float)b, (float)c);
}


static int __cuda___isfinited(double a)
{
  return (double)__cuda___finitef((float)a);
}

static int __cuda___signbitd(double a)
{
  return (double)__cuda___signbitf((float)a);
}
# 3819 "/usr/local/cuda/bin/../include/math_functions.h" 2 3
# 94 "/usr/local/cuda/bin/../include/common_functions.h" 2
# 226 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2
# 6 "/tmp/tmpxft_00009006_00000000-1_cuda_code.cudafe1.stub.c" 2
struct __T20;
struct __T20 {struct params __par0;int __dummy_field;};



static void __sti____cudaRegisterAll_44_tmpxft_00009006_00000000_4_cuda_code_cpp1_ii_397df274(void) __attribute__((__constructor__));
void __device_stub___globfunc__Z9flip_main6params(struct params __par0){auto struct __T20 __T21;
if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T21.__par0 - (size_t)&__T21) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)__device_stub___globfunc__Z9flip_main6params); (void)cudaLaunch(((char *)__device_stub___globfunc__Z9flip_main6params)); };}



static void __sti____cudaRegisterAll_44_tmpxft_00009006_00000000_4_cuda_code_cpp1_ii_397df274(void){__cudaFatCubinHandle = __cudaRegisterFatBinary((void*)(&__fatDeviceText));__cudaRegisterFunction(__cudaFatCubinHandle, (const char*)__device_stub___globfunc__Z9flip_main6params, (char*)"__globfunc__Z9flip_main6params", "__globfunc__Z9flip_main6params", (-1), (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);}

}
# 49 "cuda_code.cu" 2
